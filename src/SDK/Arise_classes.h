#pragma once

// Name: Arise, Version: 1.0.0

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class Arise.AccessoryExpTable
// 0x0030 (0x01E8 - 0x01B8)
class UAccessoryExpTable : public UXmlDatabaseBase
{
public:
	struct FAccessoryExpTableRow                       Database;                                                 // 0x01B8(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AccessoryExpTable");
		return ptr;
	}

};


// Class Arise.AINavLinkProxy
// 0x0000 (0x0378 - 0x0378)
class AAINavLinkProxy : public ANavLinkProxy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AINavLinkProxy");
		return ptr;
	}

};


// Class Arise.AlphaMaskComponent
// 0x0100 (0x01F8 - 0x00F8)
class UAlphaMaskComponent : public UActorComponent
{
public:
	float                                              AlphaMaskValue;                                           // 0x00F8(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	TWeakObjectPtr<class AAlphaMaskManagerActor>       OwnerAlphaMaskManager;                                    // 0x00FC(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               RuntimeTickSwichable;                                     // 0x0104(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0105(0x0003) MISSED OFFSET
	float                                              InterpolationTime;                                        // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	TEnumAsByte<EAlphaMask>                            AlphaMaskType;                                            // 0x010C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	TArray<class UMeshComponent*>                      MeshComponents;                                           // 0x0110(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class UParticleSystemComponent*>            ParticleSystemComponents;                                 // 0x0120(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class UCameraFadeComponent*>                CameraFadeComponents;                                     // 0x0130(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	class UAlphaMaskTask*                              PriorityTopTask;                                          // 0x0140(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	TArray<class UAlphaMaskTask*>                      Tasks;                                                    // 0x0148(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	struct FName                                       DefaultParameterName;                                     // 0x0158(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EAlphaMaskDirection                                FadeOutDirection;                                         // 0x0160(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	float                                              InvisibleMinValue;                                        // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUseTaskTickableCameraDistance;                         // 0x0168(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0169(0x0003) MISSED OFFSET
	float                                              TaskTickableCameraDistance;                               // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TaskTickableCameraOffset;                                 // 0x0170(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              CameraDistanceSquared;                                    // 0x017C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0180(0x0001) MISSED OFFSET
	bool                                               bIsSortRequest;                                           // 0x0181(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x0182(0x0006) MISSED OFFSET
	struct FAlphaMaskFadeTaskNode                      CameraFadeTask;                                           // 0x0188(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsStartupFadeTask;                                        // 0x0198(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0199(0x0003) MISSED OFFSET
	int                                                CameraFadeEnableFlags;                                    // 0x019C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIsAutoCollection;                                        // 0x01A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x01A1(0x0003) MISSED OFFSET
	unsigned char                                      bIsBindBuildCharacter : 1;                                // 0x01A4(0x0001) (Transient)
	unsigned char                                      UnknownData08[0x3];                                       // 0x01A5(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFadeInExecute;                                          // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadeInComplete;                                         // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadeOutExecute;                                         // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadeOutComplete;                                        // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadeChange;                                             // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AlphaMaskComponent");
		return ptr;
	}


	void SetAlphaMaskVisibleParticle(class UParticleSystemComponent* ParticleSystem);
	void SetAlphaMaskVisible(class UMeshComponent* MeshComponent);
	void SetAlphaMaskValueParticle(class UParticleSystemComponent* ParticleSystem, float Alpha);
	void SetAlphaMaskValue(class UMeshComponent* MeshComponent, float Alpha);
	void SetAlphaMaskType(TEnumAsByte<EAlphaMask> NewValue);
	void SetAlphaMaskInvisibleParticle(class UParticleSystemComponent* ParticleSystem);
	void SetAlphaMaskInvisible(class UMeshComponent* MeshComponent);
	void SetAllAlphaMaskVisible();
	void SetAllAlphaMaskValue(float Alpha);
	void SetAllAlphaMaskInvisible();
	void Received_OnFadeOutExecute();
	void Received_OnFadeOutComplete();
	void Received_OnFadeInExecute();
	void Received_OnFadeInComplete();
	TArray<class UMeshComponent*> Received_CollectionMeshComponent();
	TArray<class UCameraFadeComponent*> Received_CollectionCameraFadeComponent();
	void OnEndCameraAnimInternal(class AArisePlayerCameraManager* CameraMaanager);
	void OnBuildCharacterInternal();
	void OnBeginCameraAnimInternal(class AArisePlayerCameraManager* CameraMaanager, class UCameraAnimInst* CameraAnim);
	bool IsVisible();
	bool IsInvisible();
	bool IsFading();
	bool IsFadeout();
	bool IsFadein();
	bool HasTargetMeshComponents();
	float GetVisiableValue();
	TArray<class UParticleSystemComponent*> GetTargetParticleComponents();
	TArray<class UMeshComponent*> GetTargetMeshComponents();
	float GetInvisiableValue();
	TArray<class UCameraFadeComponent*> GetCameraFadeComponents();
	void ForceStopFadeTask();
	void FadeOutComplete_Callback(TEnumAsByte<EAlphaMask> ResultType);
	void FadeOut(float FadeTime);
	void FadeInComplete_Callback(TEnumAsByte<EAlphaMask> ResultType);
	void FadeIn(float FadeTime);
	void FadeEventSignature__DelegateSignature();
	void FadeEventChangeSignature__DelegateSignature(TEnumAsByte<EAlphaMask> Prev, TEnumAsByte<EAlphaMask> Current);
	void ExclusionMeshByClass(TArray<class UClass*> ExclusionClasses);
	void ExclusionMesh(TArray<class UMeshComponent*> ExclusionMeshComponents);
	void EnableCameraFade(EAlphaMaskFlagCategory Category);
	void DisableCameraFade(EAlphaMaskFlagCategory Category);
	void DebugForceVisible();
	void DebugForceInvisible();
	void DebugForceFadeOut();
	void DebugForceFadeIn();
	void CollectionParticleSystemComponent();
	void CollectionMeshComponent();
	void CollectionComponents();
	void CollectionCameraFadeComponent();
	void AlphaBranch(EAlphaMaskBranch* MaskOutputExec);
};


// Class Arise.AlphaMaskManagerActor
// 0x0040 (0x0368 - 0x0328)
class AAlphaMaskManagerActor : public AInfo
{
public:
	class UDataTable*                                  PriorityTable;                                            // 0x0328(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UAlphaMaskComponent*>                 AlphaMaskCompoentns;                                      // 0x0330(0x0010) (ExportObject, ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnAssignAlphaMask;                                        // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnassignAlphaMask;                                      // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bTaskTickEnable;                                          // 0x0360(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0361(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AlphaMaskManagerActor");
		return ptr;
	}


	void OnChangeDisplayScene(unsigned char ChangedScene, unsigned char OldScene);
	void AlphaMask_UnassignSignature__DelegateSignature(class UAlphaMaskComponent* RemoveAlphaMask);
	void AlphaMask_AssignSignature__DelegateSignature(class UAlphaMaskComponent* NewAlphaMask);
};


// Class Arise.AlphaMaskTask
// 0x0018 (0x0040 - 0x0028)
class UAlphaMaskTask : public UObject
{
public:
	TWeakObjectPtr<class UAlphaMaskComponent>          OwnerComponent;                                           // 0x0028(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	int                                                Priority;                                                 // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                PriorityGranularity;                                      // 0x0034(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FAlphaMaskPriorityLabel                     PriorityLabel;                                            // 0x0038(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AlphaMaskTask");
		return ptr;
	}


	void VisualReflect();
	void Tick(float Delta);
	bool StopRequest(bool bForce);
	void OnChangePriorityTop(class UAlphaMaskTask* PrevTopPriorityTask);
	bool IsComplate();
	void End();
	void Begin();
};


// Class Arise.AlphaMaskCameraFadeTask
// 0x0020 (0x0060 - 0x0040)
class UAlphaMaskCameraFadeTask : public UAlphaMaskTask
{
public:
	float                                              CameraFadeTime;                                           // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FAlphaMaskPriorityLabel                     CameraFadeLabel;                                          // 0x0048(0x0008)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0050(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AlphaMaskCameraFadeTask");
		return ptr;
	}


	void SetMethodMeshCheckDistanceBoundingSphere(bool IsAnyMeshCheck, float DistanceFadein, float DistanceFadeout);
	void SetMethodMeshCheckDistanceBoundingBox(bool IsAnyMeshCheck, float DistanceFadein, float DistanceFadeout);
	void SetMethodCameraFadeCheck(bool IsAnyCheck);
	void MeshCheckSignature__DelegateSignature(class UMeshComponent* MeshCmp, bool* Check);
	bool IsFadeOutAble();
	bool IsFadeInAble();
	bool STATIC_IsAnyOfMeshComponent(TArray<class UMeshComponent*> TargetComponents, const struct FScriptDelegate& Condition);
	bool STATIC_IsAnyOfCameraFadeComponent(TArray<class UCameraFadeComponent*> TargetComponents, const struct FScriptDelegate& Condition);
	bool STATIC_IsAllOfMeshComponent(TArray<class UMeshComponent*> TargetComponents, const struct FScriptDelegate& Condition);
	bool STATIC_IsAllOfCameraFadeComponent(TArray<class UCameraFadeComponent*> TargetComponents, const struct FScriptDelegate& Condition);
	bool IntersectSingleLineBoundingBox(class UMeshComponent* TargetMesh, float RayLength, const struct FVector& SizeOffset);
	bool IntersectSingleCameraFadeSphere(class UCameraFadeComponent* FadeComponent, ECameraFadeType Type);
	bool IntersectSingleCameraBoundingSphere(class UMeshComponent* TargetMesh, float Distance);
	bool IntersectSingleCameraBoundingBox(class UMeshComponent* TargetMesh, const struct FVector& SizeOffset);
	bool IntersectMultiLineBoundingBox(bool bIsAnyof, float RayLength, const struct FVector& SizeOffset);
	bool IntersectMultiCameraFadeSphere(bool bIsAnyof, ECameraFadeType Type);
	bool IntersectMultiCameraBoundingSphere(bool bIsAnyof, float Distance);
	bool IntersectMultiCameraBoundingBox(bool bIsAnyof, const struct FVector& SizeOffset);
	void CameraFadeCheckSignature__DelegateSignature(class UCameraFadeComponent* CameraFadeCmp, bool* Check);
};


// Class Arise.AlphaMaskCameraFade_CameraFadeCompTask
// 0x0008 (0x0068 - 0x0060)
class UAlphaMaskCameraFade_CameraFadeCompTask : public UAlphaMaskCameraFadeTask
{
public:
	bool                                               IsAnyCheck;                                               // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AlphaMaskCameraFade_CameraFadeCompTask");
		return ptr;
	}

};


// Class Arise.AsyncTaskAlphaMaskFadeProxyBase
// 0x0020 (0x0060 - 0x0040)
class UAsyncTaskAlphaMaskFadeProxyBase : public UAlphaMaskTask
{
public:
	struct FScriptMulticastDelegate                    OnComplete;                                               // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFailed;                                                 // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AsyncTaskAlphaMaskFadeProxyBase");
		return ptr;
	}

};


// Class Arise.AsyncTaskAlphaMaskFadeProxy
// 0x0030 (0x0090 - 0x0060)
class UAsyncTaskAlphaMaskFadeProxy : public UAsyncTaskAlphaMaskFadeProxyBase
{
public:
	TArray<TWeakObjectPtr<class UMeshComponent>>       MeshComponents;                                           // 0x0060(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<TWeakObjectPtr<class UParticleSystemComponent>> ParticleSystemComponents;                                 // 0x0070(0x0010) (ExportObject, ZeroConstructor, Transient)
	float                                              InterpolationTime;                                        // 0x0080(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ElapsedTime;                                              // 0x0084(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              Alpha;                                                    // 0x0088(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EAlphaMask>                            AlphaMaskType;                                            // 0x008C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEnd;                                                     // 0x008D(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsMasterFade;                                            // 0x008E(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x008F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AsyncTaskAlphaMaskFadeProxy");
		return ptr;
	}

};


// Class Arise.AsyncTaskAlphaMaskGroupFadeProxy
// 0x0000 (0x0040 - 0x0040)
class UAsyncTaskAlphaMaskGroupFadeProxy : public UAlphaMaskTask
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AsyncTaskAlphaMaskGroupFadeProxy");
		return ptr;
	}

};


// Class Arise.AlphaMaskHelperLibrary
// 0x0000 (0x0028 - 0x0028)
class UAlphaMaskHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AlphaMaskHelperLibrary");
		return ptr;
	}


	class UAsyncTaskAlphaMaskFadeProxy* STATIC_CreateMultiAlphaMaskFadeProxyObject(const struct FAlphaMaskPriorityLabel& PriorityCategory, class UAlphaMaskComponent* Owner, TArray<class UMeshComponent*> Meshs, TEnumAsByte<EAlphaMask> Type, float InterpolationTime);
	class UAsyncTaskAlphaMaskFadeProxy* STATIC_CreateMasterAlphaMaskFadeProxyObject(const struct FAlphaMaskPriorityLabel& PriorityCategory, class UAlphaMaskComponent* Owner, TEnumAsByte<EAlphaMask> Type, float InterpolationTime, bool bOverlapUsePrevStartAlpha);
	class UAsyncTaskAlphaMaskFadeProxy* STATIC_CreateAlphaMaskFadeProxyObject(const struct FAlphaMaskPriorityLabel& PriorityCategory, class UAlphaMaskComponent* Owner, class UMeshComponent* Mesh, TEnumAsByte<EAlphaMask> Type, float InterpolationTime);
	void STATIC_AlphaBranch(class UAlphaMaskComponent* Target, class UMeshComponent* TargetMesh, EAlphaMaskBranch* MaskOutputExec);
};


// Class Arise.AriseAccountManager
// 0x0000 (0x0028 - 0x0028)
class UAriseAccountManager : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseAccountManager");
		return ptr;
	}


	bool TryGetUserLocale(struct FString* Locale);
	bool QueryUserInfo();
};


// Class Arise.AriseAnimCameraActor
// 0x0020 (0x1050 - 0x1030)
class AAriseAnimCameraActor : public ACameraActor
{
public:
	class AArisePlayerCameraManager*                   Manager;                                                  // 0x1030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UCameraAnimInst*                             CameraAnimInst;                                           // 0x1038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x1040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseAnimCameraActor");
		return ptr;
	}


	void Received_EndCameraAnimation();
	void Received_BeginCameraAnimation();
	void EndCameraAnimation(class AArisePlayerCameraManager* PlyaerCameraManager, class UCameraAnimInst* EndCameraAnimInst);
};


// Class Arise.AriseArtifactLibraray
// 0x0000 (0x0028 - 0x0028)
class UAriseArtifactLibraray : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseArtifactLibraray");
		return ptr;
	}


	void STATIC_SetArtifactEnabled(const struct FString& InArtifactLabel, bool bNewEnable);
	void STATIC_OutputLog_State();
	void OnArtifactEnableChangedDelegate__DelegateSignature(const struct FName& InSkillID, bool bNewEnabled);
	bool STATIC_IsUnlockDifficultyUnknown();
	bool STATIC_IsUnlockDifficultyEasiest();
	bool STATIC_IsUnlockDifficultyChaos();
	bool STATIC_IsNoTrackingEncountSymbol();
	bool STATIC_IsEnableRiskOrLife();
	bool STATIC_IsAllDamageOne();
	int STATIC_GetWeaponMaterialNeedNum();
	int STATIC_GetVolumeUpNum_DropItem();
	int STATIC_GetVolumeUpNum_BreakPoint();
	int STATIC_GetVolumeUpMax_BreakPoint();
	int STATIC_GetUnlockedItemMaxNum_Tool();
	float STATIC_GetRPUpRate();
	float STATIC_GetPriceUpRate();
	float STATIC_GetPriceDownRate_Shop();
	float STATIC_GetPriceDownRate_AccessoryShop();
	float STATIC_GetHerbUpRate_Penetrate();
	float STATIC_GetHerbUpRate_HPMax();
	float STATIC_GetHerbUpRate_Endurance();
	float STATIC_GetHerbUpRate_ElementDefence();
	float STATIC_GetHerbUpRate_ElementAttack();
	float STATIC_GetHerbUpRate_Defence();
	float STATIC_GetHerbUpRate_Attack();
	float STATIC_GetGradeUpRate();
	float STATIC_GetExtUpRate();
	float STATIC_GetCPCostDownRate();
	float STATIC_GetCookTimeUpRate();
	int STATIC_GetCookTimeUp(int InFoodNum);
	int STATIC_GetCookMaterialNeedNum();
	float STATIC_GetCollectRate();
	int STATIC_GetArtifactCompleteNum();
	void STATIC_ExecuteArtifactEnableChanged();
};


// Class Arise.AriseArtifactConsoleCommands
// 0x0000 (0x0028 - 0x0028)
class UAriseArtifactConsoleCommands : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseArtifactConsoleCommands");
		return ptr;
	}


	void ArtifactOutputLog_State();
};


// Class Arise.AriseAssetManager
// 0x0000 (0x0028 - 0x0028)
class UAriseAssetManager : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseAssetManager");
		return ptr;
	}


	void STATIC_K2_Unload();
	class UObject* STATIC_K2_LoadSync();
	bool STATIC_K2_LoadAsync();
	bool STATIC_K2_IsValid();
};


// Class Arise.AriseAutoSave
// 0x0038 (0x0060 - 0x0028)
class UAriseAutoSave : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStartEvent;                                             // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndEvent;                                               // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bSaving;                                                  // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UAriseSave*                                  CacheSave;                                                // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseAutoSave");
		return ptr;
	}

};


// Class Arise.AriseAutoSaveLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseAutoSaveLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseAutoSaveLibrary");
		return ptr;
	}


	bool STATIC_IsAutoSaving();
	void STATIC_AutoSave();
};


// Class Arise.AriseBlueprintAssetDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UAriseBlueprintAssetDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FAriseBlueprintAssetDatabase                Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseBlueprintAssetDatabaseObject");
		return ptr;
	}

};


// Class Arise.AriseBlueprintAssetManager
// 0x0000 (0x0028 - 0x0028)
class UAriseBlueprintAssetManager : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseBlueprintAssetManager");
		return ptr;
	}


	void STATIC_UnloadById(const struct FName& ID);
	void STATIC_UnloadByCategoryAndId(EAriseBlueprintAssetCategory Category, const struct FName& ID);
	void STATIC_UnloadByCategory(EAriseBlueprintAssetCategory Category);
	void STATIC_SetLoadPolicy(EAriseBlueprintAssetLoadPolicy NewPolicy);
	void STATIC_LoadDatabase();
	bool STATIC_LoadById(const struct FName& ID);
	bool STATIC_LoadByCategoryAndId(EAriseBlueprintAssetCategory Category, const struct FName& ID);
	bool STATIC_LoadByCategory(EAriseBlueprintAssetCategory Category);
	void STATIC_K2_AwaitLoadedById(class UObject* WorldContextObject, const struct FName& ID, const struct FLatentActionInfo& LatentInfo);
	void STATIC_K2_AwaitLoadedByCategory(class UObject* WorldContextObject, EAriseBlueprintAssetCategory Category, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_IsLoadedById(const struct FName& ID);
	bool STATIC_IsLoadedByCategoryAndId(EAriseBlueprintAssetCategory Category, const struct FName& ID);
	bool STATIC_IsLoadedByCategory(EAriseBlueprintAssetCategory Category);
	class UClass* STATIC_GetClassById(const struct FName& ID);
	class UClass* STATIC_GetClassByCategoryAndId(EAriseBlueprintAssetCategory Category, const struct FName& ID);
	class UObject* STATIC_CreateById(const struct FName& ID, class UObject* Outer);
	class UObject* STATIC_CreateByCategoryAndId(EAriseBlueprintAssetCategory Category, const struct FName& ID, class UObject* Outer);
};


// Class Arise.AriseCameraModifier_CameraShake
// 0x0008 (0x0068 - 0x0060)
class UAriseCameraModifier_CameraShake : public UCameraModifier_CameraShake
{
public:
	bool                                               bIsPause;                                                 // 0x0060(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseCameraModifier_CameraShake");
		return ptr;
	}


	void SetPause(bool IsPause);
};


// Class Arise.AriseCharacter
// 0x00A0 (0x07F0 - 0x0750)
class AAriseCharacter : public AASCharacterBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0750(0x0008) MISSED OFFSET
	struct FName                                       CharacterID;                                              // 0x0758(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBlockBuild;                                              // 0x0760(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseIK;                                                   // 0x0761(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseIKTwist;                                              // 0x0762(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseAdjustGround;                                         // 0x0763(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InterpHeightSpeed;                                        // 0x0764(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FAriseCharacterPartsData                    PartsData;                                                // 0x0768(0x0050)
	TArray<class UMeshComponent*>                      CombinePartsComponents;                                   // 0x07B8(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UCharacterFootstep*>                  Footsteps;                                                // 0x07C8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x1];                                       // 0x07D8(0x0001) MISSED OFFSET
	bool                                               bBuilded;                                                 // 0x07D9(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x16];                                      // 0x07DA(0x0016) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseCharacter");
		return ptr;
	}


	void K2_RequestBuild(const struct FName& NewCharaID, bool bBlock);
	struct FRotator K2_GetFootstepTwistRotator(const struct FName& SocketName);
	struct FName K2_GetFootstepSocketName(int Index);
	struct FVector K2_GetFootstepEffectorLocation(const struct FName& SocketName);
};


// Class Arise.AriseIconWidgetBase
// 0x0010 (0x0218 - 0x0208)
class UAriseIconWidgetBase : public UUserWidget
{
public:
	class UMaterialInstanceDynamic*                    TargetMaterial;                                           // 0x0208(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       IconParameterName;                                        // 0x0210(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseIconWidgetBase");
		return ptr;
	}


	class UImage* GetTargetImage();
};


// Class Arise.AriseCharaIconWidgetBase
// 0x0028 (0x0240 - 0x0218)
class UAriseCharaIconWidgetBase : public UAriseIconWidgetBase
{
public:
	bool                                               IsLoading;                                                // 0x0218(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0219(0x0007) MISSED OFFSET
	struct FSoftObjectPath                             CurrentPath;                                              // 0x0220(0x0018) (Transient)
	int                                                IconLoadPriority;                                         // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x023C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseCharaIconWidgetBase");
		return ptr;
	}


	void SetIconLoadPriority(int NewPriority);
	void SetIconLabel(const struct FString& IconLabel);
	void SetIcon_PartyId(EArisePartyID PartyId);
	void SetIcon(EAriseCharaIconID IconId);
	void Received_LoadStart();
	void Received_LoadComplate();
	void AssetLoadComplete(class UObject* Object);
};


// Class Arise.AriseBattleCharaIconWidgetBase
// 0x0000 (0x0240 - 0x0240)
class UAriseBattleCharaIconWidgetBase : public UAriseCharaIconWidgetBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseBattleCharaIconWidgetBase");
		return ptr;
	}

};


// Class Arise.AriseCheatManager
// 0x0000 (0x0078 - 0x0078)
class UAriseCheatManager : public UCheatManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseCheatManager");
		return ptr;
	}

};


// Class Arise.AriseChunkInstall
// 0x0000 (0x0028 - 0x0028)
class UAriseChunkInstall : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseChunkInstall");
		return ptr;
	}


	void STATIC_SetChunkInstallSpeed(EAriseChunkInstallSpeed iSpeed);
	void STATIC_SetChunkInstallPriority(EAriseChunkNo iChunkNo, EAriseChunkInstallPriority iPriority);
	bool STATIC_IsChunkInstalled(EAriseChunkNo iChunkNo);
	bool STATIC_IsAllChunkInstalled();
	EAriseChunkLocation STATIC_GetChunkLocation(EAriseChunkNo iChunkNo);
	EAriseChunkInstallSpeed STATIC_GetChunkInstallSpeed();
	float STATIC_GetChunkInstallProgressSec(EAriseChunkNo iChunkNo);
	float STATIC_GetChunkInstallProgressPerc(EAriseChunkNo iChunkNo);
	float STATIC_GetAllChunkInstallProgressPerc();
	void STATIC_DebugStartNextChunk();
};


// Class Arise.AriseCinematicAnimLocation
// 0x0008 (0x03B8 - 0x03B0)
class AAriseCinematicAnimLocation : public ASkeletalMeshActor
{
public:
	struct FName                                       LocationSocket;                                           // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseCinematicAnimLocation");
		return ptr;
	}


	struct FTransform GetLocation();
};


// Class Arise.AriseClickableArea
// 0x0318 (0x0430 - 0x0118)
class UAriseClickableArea : public UContentWidget
{
public:
	struct FButtonStyle                                WidgetStyle;                                              // 0x0118(0x0278) (Edit, BlueprintVisible)
	struct FLinearColor                                ColorAndOpacity;                                          // 0x0390(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                BackgroundColor;                                          // 0x03A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	TEnumAsByte<EButtonClickMethod>                    ClickMethod;                                              // 0x03B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EButtonTouchMethod>                    TouchMethod;                                              // 0x03B1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsFocusable;                                              // 0x03B2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x03B3(0x0005) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnClicked;                                                // 0x03B8(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnPressed;                                                // 0x03C8(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnReleased;                                               // 0x03D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMouseClicked;                                           // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHovered;                                                // 0x03F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnhovered;                                              // 0x0408(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0418(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseClickableArea");
		return ptr;
	}


	ESlateVisibility VisibilityOverwrite();
	void SetStyle(const struct FButtonStyle& InStyle);
	void STATIC_SetMouseEnabled(bool Enable);
	void SetMouseCursorHere();
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetBackgroundColor(const struct FLinearColor& InBackgroundColor);
	bool IsPressed();
	bool STATIC_IsAnyHovered();
	void Activate(bool IsEnabled);
};


// Class Arise.AriseCommerce
// 0x0010 (0x0038 - 0x0028)
class UAriseCommerce : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseCommerce");
		return ptr;
	}


	bool SearchContentsAsync(const struct FAriseCommerceCategoryInfo& iCategoryInfo);
	bool SearchCategoriesAsync();
	bool ProductBrowseAsync(const struct FAriseCommerceContentInfo& iContentInfo);
	bool IsConnect();
	bool IsBusy();
	EAriseCommerceResult GetResult();
	void GetContentsInfo(TArray<struct FAriseCommerceContentInfo>* OutContentsInfo);
	void GetCategoriesInfo(TArray<struct FAriseCommerceCategoryInfo>* OutCategoriesInfo);
	bool DisconnectAsync();
	bool ConnectAsync();
	bool Cancel();
};


// Class Arise.AriseConfig
// 0x0058 (0x0080 - 0x0028)
class UAriseConfig : public UObject
{
public:
	struct FScriptMulticastDelegate                    ApplyGameDelegate;                                        // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplyGraphicDelegate;                                     // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<unsigned char>                              AriseDlcBtlBgmID;                                         // 0x0048(0x0010) (BlueprintVisible, ZeroConstructor)
	class UAriseUserSettings*                          AriseUserSetting;                                         // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 LightCurve;                                               // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FIntPoint                                   LastFullScreenResolution;                                 // 0x0068(0x0008) (IsPlainOldData)
	int                                                ResolutionTextNumberDisplayAspectRatioOnly;               // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ResolutionTextNumberAll;                                  // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               ChangedResolution;                                        // 0x0078(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseConfig");
		return ptr;
	}


	void STATIC_UpdateScreenMode(int ChoiceIndex);
	void STATIC_UpdateScreenBrightness(int ScreenValue);
	void STATIC_UpdatePFCameraYaw(int ChoiceIndex);
	void STATIC_UpdatePFCameraSpeed(int Param);
	void STATIC_UpdatePFCameraPitch(int ChoiceIndex);
	void STATIC_Tick(float iDeltaTime);
	void STATIC_Terminate();
	bool STATIC_SetConfigValue(EConfigKey Key, int Value, TMap<EConfigKey, int>* configValues);
	bool STATIC_SetAnalysisSave(bool IsAgree);
	void STATIC_SavePadKeyAssign(class AInputExtPlayerController* PlayerController, const struct FPadKeyAssign& Data);
	void STATIC_SaveMouseKeyAssign(class AInputExtPlayerController* PlayerController, const struct FMouseKeyAssign& Data);
	void STATIC_SaveKeyboardKeyAssign(class AInputExtPlayerController* PlayerController, const struct FKeyboardKeyAssign& Data);
	void STATIC_SaveGraphics(const struct FGraphicsConfigData& Data);
	void STATIC_SaveGame(const struct FGameConfigData& Data);
	struct FPadKeyAssign STATIC_ResetPadKeyAssign(class AInputExtPlayerController* PlayerController);
	struct FKeyboardKeyAssign STATIC_ResetKeyboardKeyAssign(class AInputExtPlayerController* PlayerController);
	void STATIC_ResetKeyboardAndMouseKeyAssign(class AInputExtPlayerController* PlayerController);
	void STATIC_ResetDLCBattleBgmIdList();
	struct FGraphicsConfigData STATIC_LoadDefaultGraphics();
	struct FGameConfigData STATIC_LoadDefaultGame();
	bool STATIC_IsExistCustomResolution(int choiceListNumber);
	bool STATIC_IsCustomResolutionIndex(int Index);
	bool STATIC_IsCustomResolution();
	bool STATIC_IsChangedResolution();
	void STATIC_InitializePadKeyAssign(class AInputExtPlayerController* PlayerController);
	void STATIC_InitializeMouseKeyAssign(class AInputExtPlayerController* PlayerController);
	void STATIC_InitializeKeyboardKeyAssign(class AInputExtPlayerController* iController);
	void STATIC_InitializeGraphics();
	void STATIC_InitializeGame();
	void STATIC_Initialize();
	int STATIC_GetScreenMode();
	EAriseSaveResult STATIC_GetSaveResult();
	int STATIC_GetResolutionTextNumber(bool DisplayAspectRatioOnly);
	TArray<struct FModifiedText> STATIC_GetResolutionTextList(bool DisplayAspectRatioOnly);
	struct FModifiedText STATIC_GetResolutionText();
	struct FIntPoint STATIC_GetResolutionNumber();
	int STATIC_GetResolutionIndex();
	struct FPadKeyAssign STATIC_GetPadKeyAssign(class AInputExtPlayerController* PlayerController);
	void STATIC_GetOptionListIndex(EConfigCategory Category, TArray<int>* outList);
	struct FName STATIC_GetNextBGMLabel();
	struct FMouseKeyAssign STATIC_GetMouseKeyAssign(class AInputExtPlayerController* PlayerController);
	class UCurveFloat* STATIC_GetLightCurveData();
	struct FKeyboardKeyAssign STATIC_GetKeyboardKeyAssign(class AInputExtPlayerController* PlayerController);
	struct FGraphicsConfigData STATIC_GetGraphics();
	void STATIC_GetGraphicOptionValue(TMap<EConfigKey, int>* configValues);
	void STATIC_GetGameOptionValue(TMap<EConfigKey, int>* configValues);
	struct FGameConfigData STATIC_GetGame();
	struct FName STATIC_GetDLCBattleBGMLabel();
	struct FMouseKeyAssign STATIC_GetDefaultMouseKeyAssign(class AInputExtPlayerController* PlayerController);
	EPadKeyId STATIC_GetDefaultKeyPadID(const struct FName& LavelName);
	struct FKeyboardKeyAssign STATIC_GetDefaultKeyboardKeyAssign(class AInputExtPlayerController* PlayerController);
	void STATIC_GetDefaultGraphicOptionValue(TMap<EConfigKey, int>* configValues);
	void STATIC_GetDefaultGameOptionValue(TMap<EConfigKey, int>* configValues);
	class UConfigDataClass* STATIC_GetDatabase();
	class UAriseConfig* STATIC_GetConfigInstance();
	TArray<struct FModifiedText> STATIC_GetChoiceTextList(EConfigKey Key);
	struct FModifiedText STATIC_GetChoiceText(EConfigKey Key, int Index);
	TArray<struct FString> STATIC_GetChoiceList(const struct FString& TitleLabel);
	float STATIC_GetBrightnessValue(int SavedValue);
	class UConfigBgmDataClass* STATIC_GetBgmDatabase();
	void STATIC_DifficultyLevelUnlockCheck();
	void STATIC_ApplyGraphicOptionValueCustomResolution(TMap<EConfigKey, int> configValues, const struct FIntPoint& CustomResolution, bool isSaveSettings);
	void STATIC_ApplyGraphicOptionValue(TMap<EConfigKey, int> configValues, bool isSaveSettings);
	void STATIC_ApplyGameOptionValue(TMap<EConfigKey, int> configValues);
};


// Class Arise.AriseConfigBgm
// 0x0000 (0x0208 - 0x0208)
class UAriseConfigBgm : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseConfigBgm");
		return ptr;
	}


	void STATIC_SortGameTitle(TArray<struct FConfigBgmData>* BgmData);
};


// Class Arise.AriseGameConfigProfile
// 0x0000 (0x0028 - 0x0028)
class UAriseGameConfigProfile : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameConfigProfile");
		return ptr;
	}


	void STATIC_SetVolume_VOICE(int Value);
	void STATIC_SetVolume_SE(int Value);
	void STATIC_SetVolume_BGM(int Value);
	void STATIC_SetSubTitleVisible(bool bEnable);
	void STATIC_SetSubQuestMarkVisible(bool bEnable);
	void STATIC_SetSoundOutputType(EAriseSoundOutputType Type);
	void STATIC_SetScreenBrightness(int Value);
	void STATIC_SetPFCameraYawType(EAriseCameraControlType Type);
	void STATIC_SetPFCameraSpeed(int Value);
	void STATIC_SetPFCameraPitchType(EAriseCameraControlType Type);
	void STATIC_SetNavMapRotationFixed(bool bEnable);
	void STATIC_SetMainQuestMarkVisible(bool bEnable);
	void STATIC_SetDlcBtlBgmPlayMode(int Value);
	void STATIC_SetDlcBtlBgmPlayID(int Value);
	void STATIC_SetDlcBtlBgmPlayFlagVisible(int ID, bool bEnable);
	void STATIC_SetControllerVibration(bool bEnable);
	void STATIC_SetBtlBgmPlayType(int Value);
	void STATIC_SetBattleRank(EBtlRank Rank);
	void STATIC_SetBattleCameraYawType(EAriseCameraControlType Type);
	void STATIC_SetBattleCameraSpeed(int Value);
	void STATIC_SetBattleCameraPitchType(EAriseCameraControlType Type);
	void STATIC_SetBattleCameraCorrection_Move(int Value);
	void STATIC_SetBattleCameraCorrection_Attack(int Value);
	void STATIC_SetBattleCameraAutoUnlock(int Value);
	void STATIC_SetBattleAdvanceInputType(EAriseAdvanceInputType Type);
	void STATIC_ResetDlcBtlBgmPlayFlag();
	void STATIC_ResetConfig();
	bool STATIC_IsSubTitleVisible();
	bool STATIC_IsSubQuestMarkVisible();
	bool STATIC_IsNavMapRotationFixed();
	bool STATIC_IsMainQuestMarkVisible();
	bool STATIC_IsDlcBtlBgmPlayFlagVisible(int ID);
	bool STATIC_IsControllerVibration();
	int STATIC_GetVolume_VOICE();
	int STATIC_GetVolume_SE();
	int STATIC_GetVolume_BGM();
	EAriseSoundOutputType STATIC_GetSoundOutputType();
	int STATIC_GetScreenBrightness();
	EAriseCameraControlType STATIC_GetPFCameraYawType();
	int STATIC_GetPFCameraSpeed();
	EAriseCameraControlType STATIC_GetPFCameraPitchType();
	int STATIC_GetDlcBtlBgmPlayMode();
	int STATIC_GetDlcBtlBgmPlayID();
	int STATIC_GetBtlBgmPlayType();
	EBtlRank STATIC_GetBattleRank();
	EAriseCameraControlType STATIC_GetBattleCameraYawType();
	int STATIC_GetBattleCameraSpeed();
	EAriseCameraControlType STATIC_GetBattleCameraPitchType();
	int STATIC_GetBattleCameraCorrection_Move();
	int STATIC_GetBattleCameraCorrection_Attack();
	int STATIC_GetBattleCameraAutoUnlock();
	EAriseAdvanceInputType STATIC_GetBattleAdvanceInputType();
};


// Class Arise.AriseCustomDPIRule
// 0x0000 (0x0028 - 0x0028)
class UAriseCustomDPIRule : public UDPICustomScalingRule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseCustomDPIRule");
		return ptr;
	}

};


// Class Arise.AriseDebugCameraController
// 0x0000 (0x06C0 - 0x06C0)
class AAriseDebugCameraController : public ADebugCameraController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseDebugCameraController");
		return ptr;
	}

};


// Class Arise.AriseEntitlementManager
// 0x0010 (0x0038 - 0x0028)
class UAriseEntitlementManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseEntitlementManager");
		return ptr;
	}


	void RequestActivateEntitlement();
	bool OpenPresent(const struct FString& PresentLabel);
	bool OpenItem(const struct FString& ItemLabel);
	bool IsOpenedPresent(const struct FString& PresentLabel);
	bool IsOpenedItem(const struct FString& ItemLabel);
	bool IsActivatedPresent(const struct FString& PresentLabel);
	bool IsActivatedPackage(const struct FString& PackageLabel);
	bool IsActivatedItem(const struct FString& ItemLabel);
	bool HasOpenedAppendMusic();
	TArray<struct FString> GetPresentsInPackage(const struct FString& PresentLabel);
	TArray<struct FString> GetPresents();
	bool GetPresentData(const struct FString& PresentLabel, struct FDLCPresentData* Data);
	TArray<struct FString> GetPackagesFromItem(const struct FString& ItemLabel);
	TArray<struct FString> GetPackages();
	bool GetPackageLabelByItemLabel(const struct FString& ItemLabel, TArray<struct FString>* PackageLabels);
	bool GetPackageLabelByItemId(int ItemID, TArray<struct FString>* PackageLabels);
	struct FString GetPackageId(const struct FString& PackageLabel);
	bool GetPackageData(const struct FString& PackageLabel, struct FDLCPackageData* Data);
	TArray<struct FString> GetItemsInPresent(const struct FString& ItemLabel);
	TArray<struct FString> GetItems();
	bool GetItemData(const struct FString& ItemLabel, struct FDLCItemData* Data, TArray<struct FDLCAcquireItemData>* AcquireData);
	TArray<struct FString> GetActivatedPresents();
	TArray<struct FString> GetActivatedPackages();
	TArray<struct FString> GetActivatedItems();
	TArray<struct FString> GetActivatedEntitlements();
	void ForceActivePresent(const struct FString& PresentLabel);
	void ForceActivePackage(const struct FString& PackageLabel);
	void ForceActiveItem(const struct FString& ItemLabel);
	bool CheckActivateEntitlement();
	void Activate();
};


// Class Arise.AriseGameDataLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseGameDataLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameDataLibrary");
		return ptr;
	}


	void STATIC_UseCook2(const struct FString& SkillLabel, float EffectTime, float FavoriteValue, EArisePartyID Favorite);
	void STATIC_UseCook(const struct FString& SkillLabel_2, const struct FString& SkillLabel_3, float Time);
	void STATIC_UpdateMaxTP();
	EArisePartyID STATIC_SwitchPartyTop(bool bCW);
	void STATIC_SubCurrentTP(int Value);
	void STATIC_SetSpecialCount_SIO(int Value);
	void STATIC_SetShopLevel(int Level);
	void STATIC_SetRisePoint(int RP, EArisePartyID PartyId);
	void STATIC_SetPlayRecordIfUpdate(EPlayRecordList ID, int Value);
	void STATIC_SetPlayRecord(EPlayRecordList ID, int Value);
	void STATIC_SetPFCameraIndex(int Index);
	void STATIC_SetPFActionCount_SIO(int Value);
	void STATIC_SetLockDecBattleBonus(bool bEnable);
	void STATIC_SetGald(int Gald);
	void STATIC_SetFavorability(EArisePartyID PartyId, int NewValue);
	void STATIC_SetEventEncountDefeat(const struct FString& EncountGroupLabel, bool Flag);
	void STATIC_SetDefeatCount(int UnitID, int Count);
	void STATIC_SetBattleStartControllID(EArisePartyID PartyId);
	void STATIC_SetBattleRank(EBtlRank Rank);
	void STATIC_SetBattleBonus(float Num);
	void STATIC_SetAliasCounter(EArisePartyID PartyId, EBtlAliasCountDefine Alias, int Value);
	void STATIC_LockPartyTop(bool bLock);
	bool STATIC_K2_IsCookSkill(const struct FString& SkillLabel, float* Value);
	void STATIC_K2_GetShopLevel(int* Level);
	bool STATIC_IsLockPartyTop();
	bool STATIC_IsLockDecBattleBonus();
	bool STATIC_IsBattleFever();
	bool STATIC_HasCookSkill();
	int STATIC_GetTrophyMonsterCompleteCount();
	int STATIC_GetSpecialCount_SIO();
	int STATIC_GetRisePoint(EArisePartyID PartyId);
	int STATIC_GetReadLongChatNum();
	int STATIC_GetPlayRecordMax(EPlayRecordList ID);
	int STATIC_GetPlayRecord(EPlayRecordList ID);
	int STATIC_GetPFCameraIndex();
	int STATIC_GetPFActionCount_SIO();
	EArisePartyID STATIC_GetPartyTop();
	int STATIC_GetMaxTP_DLC();
	int STATIC_GetMaxTP_Base();
	int STATIC_GetMaxTp();
	int STATIC_GetMaxGald();
	int STATIC_GetGameLapsCount();
	int STATIC_GetGald();
	int STATIC_GetFavorability(EArisePartyID PartyId);
	int STATIC_GetExDungeonClear();
	bool STATIC_GetEventEncountDefeat(const struct FString& EncountGroupLabel);
	int STATIC_GetDefeatCount(int UnitID);
	int STATIC_GetCurrentTP();
	float STATIC_GetCookTotalTime();
	float STATIC_GetCookTime();
	int STATIC_GetCookSkill2(float* Value);
	void STATIC_GetCookSkill(int* SkillID_2, int* SkillID_3);
	EArisePartyID STATIC_GetCookFavorite();
	EArisePartyID STATIC_GetBattleStartControllID();
	EBtlRank STATIC_GetBattleRank();
	float STATIC_GetBattleBonus();
	int STATIC_GetArtifactGetCount();
	int STATIC_GetAliasCounter(EArisePartyID PartyId, EBtlAliasCountDefine Alias);
	bool STATIC_GetActiveCookSkill(bool bUnitConversion, int* SkillID, float* SkillValue);
	void STATIC_CheckUnlockTrophy(const struct FString& TrophyName, int Value);
	void STATIC_CheckPlayRecordTrophy(EPlayRecordList ID, int Value);
	void STATIC_AddTPMax_DLC(int Value);
	void STATIC_AddTPMax(int Value);
	void STATIC_AddSpecialCount_SIO(int Value);
	void STATIC_AddRisePoint(int RP, EArisePartyID PartyId);
	void STATIC_AddReadLongChatNum(int Value);
	void STATIC_AddPlayRecord(EPlayRecordList ID, int Add);
	void STATIC_AddPFActionCount_SIO(int Value);
	void STATIC_AddGameLapsCount(int Value);
	void STATIC_AddGald(int Gald);
	void STATIC_AddFavorability(EArisePartyID PartyId, int AddValue);
	void STATIC_AddExDungeonClear(int Value);
	void STATIC_AddDefeatCount(int UnitID, int Count);
	void STATIC_AddCurrentTP(int Value);
	void STATIC_AddBattleBonus(float Add);
	void STATIC_AddAliasCounter(EArisePartyID PartyId, EBtlAliasCountDefine Alias, int Value);
};


// Class Arise.AriseGameInstance
// 0x0220 (0x02C0 - 0x00A0)
class UAriseGameInstance : public UGameInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET
	class UBuildInfo*                                  BuildInfo;                                                // 0x00A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UAriseSave*                                  AriseSave;                                                // 0x00B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UAriseAutoSave*                              AriseAutoSave;                                            // 0x00B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UArisePartyOrder*                            PartyOrder;                                               // 0x00C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UArisePartyProfile*                          PartyProfile;                                             // 0x00C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class AShortChatManager*                           ShortChat;                                                // 0x00D0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class AAriseSoundSystem*                           SoundSystem;                                              // 0x00D8(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class ALongChatManager*                            LongChat;                                                 // 0x00E0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UAriseConfig*                                AriseConfig;                                              // 0x00E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TMap<struct FString, class UObject*>               ResidentDatabaseList;                                     // 0x00F0(0x0050) (ZeroConstructor, Transient)
	TMap<struct FString, class UObject*>               ResidentStringDatabaseList;                               // 0x0140(0x0050) (ZeroConstructor, Transient)
	TMap<struct FString, class UClass*>                ResidentClassList;                                        // 0x0190(0x0050) (ZeroConstructor, Transient)
	TMap<struct FString, struct FSoftObjectPath>       AsyncLoadAssetList;                                       // 0x01E0(0x0050) (ZeroConstructor, Transient)
	class UClass*                                      QuestSaveDataClass;                                       // 0x0230(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class UAriseScenarioVariable*                      QuestSaveData;                                            // 0x0238(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class UAriseShareControlManager*                   ShareControlManager;                                      // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAriseEntitlementManager*                    EntitlementManager;                                       // 0x0248(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAriseAccountManager*                        AccountManager;                                           // 0x0250(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0258(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnViewportResizedEvent;                                   // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplayMetricsChangedEvent;                             // 0x0278(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartGameSection;                                       // 0x0288(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bBootDiplaySkip;                                          // 0x0298(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0299(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnChangeDebugMode;                                        // 0x02A0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x10];                                      // 0x02B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameInstance");
		return ptr;
	}


	void LoadDataSection(EGameSection Section);
	bool STATIC_IsTextTagDatabaseLoaded();
	bool IsLoadedSectionData(int sectionid);
	bool IsInitializedSection(int sectionid);
	bool IsDebugMode();
	bool IsBootDisplaySkip();
	bool IsAsyncLoadDataEmpty();
	void InitializeGameSection(EGameSection Section);
	class UObject* GetResidentStringDatabase(const struct FString& Key);
	class UObject* GetResidentDatabase(const struct FString& Key);
	class UClass* GetResidentClass(const struct FString& Key);
	void EventStartGameSection__DelegateSignature(unsigned char StartedSection);
	float STATIC_CalcCursorScale(class UObject* WorldContextObject);
};


// Class Arise.AriseGameMode
// 0x0358 (0x0768 - 0x0410)
class AAriseGameMode : public AGameMode
{
public:
	unsigned char                                      UnknownData00[0xD8];                                      // 0x0410(0x00D8) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x0410(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Arise.AriseGameMode.BlueprintAssetDatabasePath
	EGameSection                                       CurrentGameSection;                                       // 0x0510(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EGameSection                                       OldGameSection;                                           // 0x0511(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0512(0x0006) MISSED OFFSET
	class UGameSceneManager*                           GameSceneManager;                                         // 0x0518(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AStreamLevelLoader*                          StreamLevelLoader;                                        // 0x0520(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAriseGameStateController*                   GameStateController;                                      // 0x0528(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAreaPriorityManager*                        InstAreaPriorityManage;                                   // 0x0530(0x0008) (ZeroConstructor, IsPlainOldData)
	class AArisePCAssetManager*                        PCAssetManager;                                           // 0x0538(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ACharacter*                                  DefaultPlayerMirror;                                      // 0x0540(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USceneFade*                                  SceneFade;                                                // 0x0548(0x0008) (ZeroConstructor, IsPlainOldData)
	class AAriseSoundSystem*                           SoundSystem;                                              // 0x0550(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             EncountLockUser;                                          // 0x0558(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class USeriousFlagCharaManager*                    SeriouseFlagCharaManager;                                 // 0x0568(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       BattleManager_AssetById;                                  // 0x0570(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsBattleManager_LoadRequest;                              // 0x0578(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0579(0x0007) MISSED OFFSET
	class ABtlManager*                                 BattleManager;                                            // 0x0580(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UGarbageCollectionManager*                   GCManager;                                                // 0x0588(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      AlphaMaskManagerClass;                                    // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	class AAlphaMaskManagerActor*                      AlphaMaskManager;                                         // 0x0598(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      QuestManagerClass;                                        // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AQuestManager*                               QuestManager;                                             // 0x05A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TMap<struct FName, TWeakObjectPtr<class UObject>>  ReferenceObjects;                                         // 0x05B0(0x0050) (ZeroConstructor, Transient)
	bool                                               bSyncMode;                                                // 0x0600(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0601(0x0007) MISSED OFFSET
	class USceneFinalizeManager*                       SceneFinalizeManager;                                     // 0x0608(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FTimerHandle                                PrintMemoryInfoTimerHandle;                               // 0x0610(0x0008) (Transient)
	unsigned char                                      UnknownData05[0x40];                                      // 0x0618(0x0040) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStartGameSection;                                       // 0x0658(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginPFScene;                                           // 0x0668(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginBattleScene;                                       // 0x0678(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndBattleScene;                                         // 0x0688(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeDebugCameraActive;                                // 0x0698(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EventPreMapChangeNative;                                  // 0x06A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EventPostMapChangeNative;                                 // 0x06B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EventOpenSystemWindowNative;                              // 0x06C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EventCloseSystemWindowNative;                             // 0x06D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGoBackTitleEvent;                                       // 0x06E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FString>                             DisablePCCacheMapName;                                    // 0x06F8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0708(0x0008) MISSED OFFSET
	class UObject*                                     pMapNameDatabase;                                         // 0x0710(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UObject*                                     pWorldMapDatabase;                                        // 0x0718(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UObject*                                     pMapLocatorDatabase;                                      // 0x0720(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UObject*                                     pMapLinkDatabase;                                         // 0x0728(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UObject*                                     pPassBlockDatabase;                                       // 0x0730(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UObject*                                     pFastTravelControlDatabase;                               // 0x0738(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CEBankInitRetryTime;                                      // 0x0740(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x24];                                      // 0x0744(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameMode");
		return ptr;
	}


	void UpdatePCCacheForPreMapJump(const struct FString& OldMapName, const struct FString& NewMapName);
	void UnloadStreamLevels(TArray<struct FName> names);
	void UnloadBattleAsset();
	void TextureRefresh();
	void Test_PackageNameLength(const struct FString& startPath, int maxLength);
	void Test_MapDatabase(const struct FString& MapPath);
	void Test_MapCooker(bool bAutoAditional);
	void StopRec_ScenarioFlagChangeHistory();
	void StartRec_ScenarioFlagChangeHistory();
	void SpawnQuestManager();
	void SpawnBattleManager(class UClass* SpawnBattleManagerClass);
	void SetSystemPauseRequestEnable(bool bEnable);
	void SetGCTimeMode(bool bPlayerFree);
	void SetGameState(EAriseGameState State, bool bNewValue);
	void SetFadeOpacity(const struct FString& Layer, float Alpha);
	void SetFadeDebugMode(bool bDebug);
	void ResetLoadLog();
	void ResetFade(const struct FString& Layer);
	void ReservedGameScene(unsigned char aResSceneId);
	void RequestSystemPause();
	void RemoveStreamLevels(class UObject* WorldContextObject, TArray<struct FName> names);
	void RemoveRefObject(const struct FName& objName);
	void RemoveGameScene(unsigned char aResSceneId);
	void Play_LongChat(const struct FString& lchatName, const struct FString& InArgs);
	void OutputLog_ScenarioFlagChangeHistory();
	void OnOpenSystemWindowNativeSignature__DelegateSignature();
	bool OnlyThisScene(unsigned char aResSceneId);
	void OnGoBackTitleSignature__DelegateSignature();
	void OnEndBattleSignature__DelegateSignature(const struct FBtlResultInfo& ResultInfo);
	void OnCloseSystemWindowNativeSignature__DelegateSignature();
	void OnChangeState_PauseMovie(EAriseGameState ChangedState, bool NewState);
	void OnChangeState(EAriseGameState ChangedState, bool NewState);
	void OnChangeDebugCameraActivetDelegate__DelegateSignature(bool bActive);
	void OnBeginPFSignature__DelegateSignature();
	void OnBeginBattleSignature__DelegateSignature();
	void MemoryRefresh(bool bGarbageCollection, bool DropMips, bool DissolveAllClusters, EARISE_DROPMIPS_TYPE dropmipsType);
	void MapChange(const struct FString& MapName, const struct FString& MapLocator);
	void LogTexture(bool bForceUpdate);
	void LogMemory();
	void LogMemAndTexture();
	void LogLLM();
	void LoadStreamLevels(TArray<struct FName> names);
	bool IsSystemPauseRequestEnabled();
	void IsScreenUnMasked(bool* bUnMasked);
	void IsScreenMasked(bool* bMasked);
	bool IsPausePossibleState();
	bool IsEditEnabled();
	bool IsDoingDropMips();
	bool IsDevelopEnabled();
	struct FAriseTextureSizeInfo GetTextureSize(bool bForceUpdate);
	class USceneFinalizeManager* GetSceneFinalizeManager();
	class USceneFade* GetSceneFade();
	class UObject* GetRefObject(const struct FName& objName);
	class AQuestManager* GetQuestManager();
	unsigned char GetPrevGameSceneId();
	class UGameSceneController* GetPrevGameScene();
	class ACharacter* GetPFPlayer();
	float GetPersistentPeakValue(EARISE_MEM_PEAKVALUE valueType);
	class ULevel* GetPersistantLevel();
	void GetLLMValues(TArray<float>* Values);
	float GetIntervalPeakValue(EARISE_MEM_PEAKVALUE valueType);
	class UAriseGameStateController* GetGameState();
	class UGameSceneController* GetGameSceneController(EAriseGameScene sid);
	EAriseGameScene GetDisplayScene();
	void GetCurrentScreenMask(class AScreenMaskBase** CurrentScreenMask);
	float GetCurrentPeakValue(EARISE_MEM_PEAKVALUE valueType);
	unsigned char GetCurrentGameSceneId();
	class UGameSceneController* GetCurrentGameScene();
	class AAlphaMaskManagerActor* GetAlphaMaskManager();
	void ForceCrush();
	void FlushRequestSystemPause();
	void EventStartGameSection__DelegateSignature(unsigned char StartedSection);
	void EventPreMapChangeNativeSignature__DelegateSignature(const struct FString& OldMapName, const struct FString& NewMapName);
	void EventPostMapChangeNativeSignature__DelegateSignature(const struct FString& OldMapName, const struct FString& NewMapName);
	void EncountLockImp(const struct FString& UserName, bool bLock);
	void DumpParticleInfo();
	void DoUnloadSceneStreamLevel();
	void DoScreenMask(bool MaskOn, bool AutoDestroy, bool bInstantly);
	void DoLoadSceneStreamLevel();
	void DissolveAllClusters();
	void DebugCamera(bool bEnable);
	void Dbg_SetPlayerLocation(float X, float Y, float Z);
	void Dbg_DumpEventAreaActor();
	void Cmd_SetScenarioFlag(const struct FString& FlagName, bool bNewValue);
	void Cmd_SetScenarioCounter(int Chapter, int Section);
	void Cmd_PlayMovie(const struct FString& movieName);
	void Cmd_GetScenarioFlag(const struct FString& FlagName);
	void Cmd_GetScenarioCounter();
	int CheckSystemPauseState();
	void ChangeScreenMask(class AScreenMaskBase* NewScreenMask);
	void ChangeGCTime(int tm);
	bool ChangeGameScene(unsigned char aNewSceneId, ESceneRunType aSceneRunType, bool bChangeNow);
	void CEBank_SetDetectLoginStatusChanged(bool bInNew);
	bool CEBank_RetryInit();
	void CEBank_ResetKPIBufferOverFlowFlag();
	bool CEBank_IsKPIBufferOverFlow();
	bool CEBank_IsDetectLoginStatusChanged();
	bool CEBank_IsAgreeKpi();
	void CEBank_Init();
	struct FString CEBank_GetLoginUserID();
	int CEBank_GetKPIBufferUtilization();
	void CEBank_Exit();
	void CEBank_ExecRequest();
	void CEBank_ChangeAgreeKpi(bool bNewAgreeKpi);
	void CastSystemWindowDelegate(bool bOpen);
	void CastPreMapChange(const struct FString& OldMapName, const struct FString& NewMapName);
	void CastPostMapChange(const struct FString& OldMapName, const struct FString& NewMapName);
	void CaptureScene(const struct FTransform& CameraTransform, bool bUsePlayerTransform, class UCameraComponent* BaseCamera);
	void CancelSystemPauseAll();
	void CancelSystemPause();
	void BugReport();
	void BPE_TextureRefresh(bool bGarbageCollection, bool DropMips);
	void BPE_PlayMovie(const struct FString& movieName);
	void BPE_PlayLongChatWithArgs(const struct FString& LongchatName, const struct FLongChatPlayArgs& InArgs);
	void BPE_PlayLongChat(const struct FString& LongchatName, bool bInstantly);
	void BPE_MemoryRefresh(bool bGarbageCollection, bool DropMips);
	void BPE_MapChange(const struct FString& MapName, const struct FString& MapLocator, EMapChangeReason reason);
	struct FString BPE_GetCurrentMapname();
	void BPE_DoUnloadSceneStreamLevel();
	void BPE_DoLoadSceneStreamLevel();
	void BPE_CreateSceneController(unsigned char aSceneId, class UGameSceneController** newCtrl);
	void BackPrevGameScene();
	void AddStreamLevels(class UObject* WorldContextObject, TArray<struct FName> names, TArray<struct FString> Paths);
	void AddRefObject(const struct FName& objName, class UObject* refObject);
};


// Class Arise.AriseGameProcessComponent
// 0x0008 (0x0100 - 0x00F8)
class UAriseGameProcessComponent : public UActorComponent
{
public:
	TEnumAsByte<EAriseGameProcessState>                ProcessState;                                             // 0x00F8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	int                                                ReturnCode;                                               // 0x00FC(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameProcessComponent");
		return ptr;
	}


	void ProcessMain(float DeltaTime);
	void ProcessKill();
	void ProcessEnd();
	void ProcessBegin();
};


// Class Arise.AriseGameProcess
// 0x0030 (0x0358 - 0x0328)
class AAriseGameProcess : public AActor
{
public:
	TArray<TWeakObjectPtr<class UAriseGameProcessComponent>> ProcessArray;                                             // 0x0328(0x0010) (ExportObject, ZeroConstructor, Deprecated)
	TArray<class UAriseGameProcessComponent*>          Processes;                                                // 0x0338(0x0010) (ExportObject, ZeroConstructor, Transient)
	bool                                               bProcessStarted;                                          // 0x0348(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0349(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameProcess");
		return ptr;
	}


	void StartProcess();
	bool IsProcessCompleted();
	int GetLastReturnCode();
	void ClearProcess();
	class UAriseGameProcessComponent* AddProcess(class UClass* GameProcessClass);
};


// Class Arise.AriseGameSingleton
// 0x0028 (0x0050 - 0x0028)
class UAriseGameSingleton : public UObject
{
public:
	class UAriseKeyConfig*                             KeyConfig;                                                // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCEBankManager*                              CEBankManager;                                            // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTssSlotDataSupport*                         TssSlotDataSupport;                                       // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UNewsInfoManager*                            NewsInfoManager;                                          // 0x0040(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameSingleton");
		return ptr;
	}


	class UAriseGameSingleton* STATIC_K2_Get(bool* IsValid);
};


// Class Arise.AriseGameSoundInterface
// 0x0000 (0x0100 - 0x0100)
class UAriseGameSoundInterface : public UAriseSoundInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameSoundInterface");
		return ptr;
	}

};


// Class Arise.PostEventInfo
// 0x0000 (0x0080 - 0x0080)
class UPostEventInfo : public UPostEventInfoBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PostEventInfo");
		return ptr;
	}

};


// Class Arise.AriseGameStateController
// 0x0030 (0x0058 - 0x0028)
class UAriseGameStateController : public UObject
{
public:
	TArray<bool>                                       GameStateArray;                                           // 0x0028(0x0010) (ZeroConstructor)
	TArray<struct FString>                             GameStateName;                                            // 0x0038(0x0010) (ZeroConstructor)
	struct FScriptMulticastDelegate                    OnChangeState;                                            // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameStateController");
		return ptr;
	}


	struct FString ToString(EAriseGameState State);
	void Set(EAriseGameState State, bool bEnable);
	void ResetAll();
	void RemoveChangeStateDynamicDelegate(const struct FScriptDelegate& InDelegate);
	void OnChangeStateMulticastDelegate__DelegateSignature(EAriseGameState ChangedState, bool NewState);
	void OnChangeStateDynamicDelegate__DelegateSignature(EAriseGameState ChangedState, bool NewState);
	bool IsNoneOf(TArray<EAriseGameState> States);
	bool IsAnyOf(TArray<EAriseGameState> States);
	bool IsAllOf(TArray<EAriseGameState> States);
	bool Is(EAriseGameState State);
	TArray<struct FString> GetStateInfo();
	void AddChangeStateDynamicDelegate(const struct FScriptDelegate& InDelegate);
};


// Class Arise.AriseGameTimeFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseGameTimeFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGameTimeFunctionLibrary");
		return ptr;
	}


	bool STATIC_IsCurrentWorldTimeRange(float BeginTime, float EndTime);
	bool STATIC_IsCurrentWorldTimeNoon();
	bool STATIC_IsCurrentWorldTimeNight();
	int STATIC_GetOptimalWorldTimeIndex(TArray<float> WorldTimes);
	int STATIC_GetOptimalTimeIndex(TArray<struct FAriseGameTime> GameTimes);
};


// Class Arise.AriseGenericTask
// 0x0018 (0x0040 - 0x0028)
class UAriseGenericTask : public UObject
{
public:
	class AAriseGameMode*                              GameMode;                                                 // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     MyName;                                                   // 0x0030(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseGenericTask");
		return ptr;
	}


	void BPE_Tick(float DeltaTime);
	void BPE_Initialize();
};


// Class Arise.AriseHudLatentFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseHudLatentFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseHudLatentFunctionLibrary");
		return ptr;
	}


	void STATIC_ProgressBarLerpAnim(class UObject* WorldContextObject, class UProgressBar* ProgressBar, float Start, float End, float Time, const struct FLatentActionInfo& LatentInfo);
};


// Class Arise.AriseIconDatabaseLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseIconDatabaseLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseIconDatabaseLibrary");
		return ptr;
	}


	EAriseCharaIconID STATIC_SpeakerIdToCharaID(const struct FString& SpeakerId, class UDataTable* IconDataTable);
	EAriseCharaIconID STATIC_PFSpeakerToCharaID(ESpeakerType SpeakerId, class UDataTable* IconDataTable);
	EAriseCharaIconID STATIC_MassageDataToCharaID(class UMessageData* MessageData, class UDataTable* IconDataTable);
	TMap<EAriseCharaIconID, struct FString> STATIC_GetConvertToCharaIconID();
	TMap<EBtlVoiceCharaID, struct FString> STATIC_GetConvertToBattleCharaIconID();
	EAriseCharaIconID STATIC_GetCharaIconID(TMap<EAriseCharaIconID, struct FString> ConvertMap, class UMessageData* MessageData);
	EAriseCharaIconID STATIC_BattleVoiceToCharaID(EBtlVoiceCharaID VoiceID, class UDataTable* IconDataTable);
};


// Class Arise.AriseIconDataObject
// 0x0010 (0x01C8 - 0x01B8)
class UAriseIconDataObject : public UXmlDatabaseBase
{
public:
	struct FAriseIconDataCollection                    Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseIconDataObject");
		return ptr;
	}


	bool IsEnableIndex_mData(int Index);
};


// Class Arise.InheritFlags
// 0x0050 (0x0078 - 0x0028)
class UInheritFlags : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0028(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.InheritFlags");
		return ptr;
	}


	void SetFlag(const struct FString& FlagName, bool Flag);
	void RestoreFlags();
	void Initialize();
	bool GetFlag(const struct FString& FlagName);
	class UInheritFlags* STATIC_CreateInstance();
	void BackupFlags(TArray<struct FString> FlagNames);
};


// Class Arise.AriseItem
// 0x0000 (0x0028 - 0x0028)
class UAriseItem : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseItem");
		return ptr;
	}


	EArisePartyID STATIC_WhoEquipment(int ItemID);
	bool STATIC_UseItem(int ItemID, EArisePartyID PartyId, EArisePartyID UsePartyId);
	void STATIC_SetItemVisualFlag(int ItemID, bool Flag);
	void STATIC_SetItemNum(int ItemID, int Num, bool RegisterNew);
	void STATIC_SetItemNewFlag(int ItemID, bool Flag);
	void STATIC_SetItemLockFlag(int UniqueId, bool Flag);
	void STATIC_SetItemGetFlag(int ItemID, bool Flag);
	void STATIC_SetAccessoryRank(int UniqueId, int Rank);
	void STATIC_RemoveOverflowItem();
	void STATIC_RemoveItemWorkData(int UniqueId);
	bool STATIC_K2_IsItemCategory(int ItemID, EItemCategory Category);
	EItemCategory STATIC_K2_GetItemCategory(int ItemID);
	EItemIconTypeList STATIC_K2_GetIconType(int ItemID);
	void STATIC_K2_AddItemWorkData(const struct FItemWorkData& WorkData, int* UniqueId);
	bool STATIC_IsValidItemId(int ItemID);
	bool STATIC_IsUseItem(int ItemID, EArisePartyID PartyId, EArisePartyID UsePartyId, int* UnusedTypeBitFlag);
	bool STATIC_IsItemWorkDataFull_Category(EItemWorkCategory Category);
	bool STATIC_IsItemWorkDataFull();
	bool STATIC_IsItemVisualFlag(int ItemID);
	bool STATIC_IsItemNewFlag(int ItemID);
	bool STATIC_IsItemLockFlag(int UniqueId);
	bool STATIC_IsItemGetFlag(int ItemID);
	bool STATIC_IsItemEquipmentCategory(int ItemID);
	bool STATIC_IsItemCommonFlagByData(const struct FItemData& Data, EItemCommonFlag Flag);
	bool STATIC_IsItemCommonFlag(int ItemID, EItemCommonFlag Flag);
	bool STATIC_IsExistItemParameterByData(const struct FItemData& Data, EItemParameter Parameter);
	bool STATIC_IsExistItemParameter(int ItemID, EItemParameter Parameter);
	bool STATIC_IsEquipment(int ItemID, EArisePartyID PartyId);
	bool STATIC_IsAnyEquipment(int ItemID);
	int STATIC_GetTreasurePointItem(int ItemID, int Num, const struct FString& Param00, float Value00, const struct FString& Param01, float Value01);
	bool STATIC_GetShopItem(int ItemID, const struct FString& Param00, float Value00, const struct FString& Param01, float Value01);
	void STATIC_GetSearchPointItem(int ItemID, int Num);
	int STATIC_GetNewItemIdNum();
	int STATIC_GetNewItemId(int Index);
	TArray<struct FItemWorkData> STATIC_GetItemWorkDatas_Category(EItemWorkCategory Category);
	TArray<struct FItemWorkData> STATIC_GetItemWorkDatas();
	TArray<struct FItemWorkData> STATIC_GetItemWorkDataFromId(int ItemID);
	bool STATIC_GetItemWorkData(int UniqueId, struct FItemWorkData* Data);
	int STATIC_GetItemSell(int ItemID);
	int STATIC_GetItemPrice(int ItemID);
	EItemParameter STATIC_GetItemParameterValueId(int ItemID, EItemParamValueIndex ParamIndex);
	int STATIC_GetItemParameterValueByData(const struct FItemData& Data, EItemParameter Parameter);
	int STATIC_GetItemParameterValue(int ItemID, EItemParameter Parameter);
	EItemParameter STATIC_GetItemParameterStringId(int ItemID, EItemParamStrIndex ParamIndex);
	struct FString STATIC_GetItemParameterStringByData(const struct FItemData& Data, EItemParameter Parameter);
	struct FString STATIC_GetItemParameterString(int ItemID, EItemParameter Parameter);
	float STATIC_GetItemNumPercent();
	int STATIC_GetItemNum(int ItemID);
	int STATIC_GetItemMaxNum(int ItemID);
	int STATIC_GetItemId(int ItemID);
	void STATIC_GetItemEquipmentName(const struct FItemWorkData& WorkData, struct FText* Name);
	void STATIC_GetAccessoryMaterialWithSkillID(int ItemID, TArray<int> AbilityID);
	void STATIC_GetAccessoryMaterialWithSkill(int ItemID, TArray<struct FItemAbilityWorkData> AbilityData);
	void STATIC_GetAccessoryLevel(int UniqueId, int* Level);
	void STATIC_DebugPickRandomSkill(int SkillReality, bool bLess, TMap<int, float>* Result);
	void STATIC_DebugPickPowerUp(int ItemReality, TMap<int, float>* Result);
	void STATIC_DebugCreateAccessory(int ItemID);
	void STATIC_CreateRandomSkillItemWorkData(int ItemID, struct FItemWorkData* WorkData);
	void STATIC_CreateRandomSkillID(int ItemID, TArray<int>* AbilityID);
	void STATIC_CreateRandomSkill(int ItemID, TArray<struct FItemAbilityWorkData>* AbilityData);
	void STATIC_CreateFixedSkillItemWorkData(int ItemID, TArray<struct FString> Params, TArray<float> Values, struct FItemWorkData* WorkData);
	void STATIC_CreateBaseItemWorkData(int ItemID, struct FItemWorkData* WorkData);
	void STATIC_CountTotalItemNum();
	void STATIC_Clear();
	void STATIC_AddItemNum(int ItemID, int Add, bool RegisterNew);
	void STATIC_AddItemCallback(const struct FScriptDelegate& Callback);
};


// Class Arise.AriseKpiFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseKpiFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseKpiFunctionLibrary");
		return ptr;
	}


	void STATIC_Kpi_SetRequestVoiceLanguage();
	void STATIC_Kpi_SetRequestVisualSetting(EArisePartyID InPartyID, int InItemID, bool bInExNewGame);
	void STATIC_Kpi_SetRequestTrainingSP(int InSpMatchID, bool bInSuccessSpMatch, bool bInSuccessTimeAttack);
	void STATIC_Kpi_SetRequestTrainingRoom();
	void STATIC_Kpi_SetRequestTotalPlayTime();
	void STATIC_Kpi_SetRequestTitle(int InID);
	void STATIC_Kpi_SetRequestTechnique(EArisePartyID InPartyID, int InSkillID);
	void STATIC_Kpi_SetRequestSubQuest(const struct FString& InID);
	void STATIC_Kpi_SetRequestSeireika(int InNum);
	void STATIC_Kpi_SetRequestRecipe(int InID);
	void STATIC_Kpi_SetRequestPopularityOfEvent(const struct FString& InID);
	void STATIC_Kpi_SetRequestPFCtrlCharacter();
	void STATIC_Kpi_SetRequestLoop();
	void STATIC_Kpi_SetRequestLongChat(const struct FString& InID, bool bInSkip);
	void STATIC_Kpi_SetRequestFukurou(int InNum);
	void STATIC_Kpi_SetRequestFishing(const struct FString& InSpotID);
	void STATIC_Kpi_SetRequestExDungeon(const struct FString& InMapID, EAriseKpiExDungeonData InDataType, EAriseKpiExDungeonType InDungeonType, int InDungeonLoopNum);
	void STATIC_Kpi_SetRequestDlcShop(EAriseKpiDlcShopResult InShopResult);
	void STATIC_Kpi_SetRequestDifficultyExDungeon(const struct FString& InExDungeonID, int InExDungeonLoopNum, const struct FString& InQuestID);
	void STATIC_Kpi_SetRequestDifficultyChapter(int InScenarioChapter);
	void STATIC_Kpi_SetRequestDifficulty();
	void STATIC_Kpi_SetRequestCtrlModeExDungeon(const struct FString& InExDungeonID, int InExDungeonLoopNum, const struct FString& InQuestID);
	void STATIC_Kpi_SetRequestCtrlModeChapter(int InScenarioChapter);
	void STATIC_Kpi_SetRequestCtrlMode();
	void STATIC_Kpi_SetRequestClearLevelExDungeon(const struct FString& InExDungeonID, int InExDungeonLoopNum);
	void STATIC_Kpi_SetRequestClearLevelChapter(int InScenarioChapter);
	void STATIC_Kpi_SetRequestClearLevel();
	void STATIC_Kpi_SetRequestBossRetry(int InBossNo);
	void STATIC_Kpi_SetRequestBlackSmith();
	void STATIC_Kpi_SetRequestBattleCharacter();
	void STATIC_Kpi_SetRequestAccessory(EAriseKpiAccessoryShop InShopType);
	void STATIC_Kpi_SetEventSp(const struct FString& InEventID, bool bInSkip);
};


// Class Arise.AriseListBox
// 0x0528 (0x0640 - 0x0118)
class UAriseListBox : public UPanelWidget
{
public:
	struct FAriseListBoxStyle                          WidgetStyle;                                              // 0x0118(0x0010) (Edit, BlueprintVisible)
	struct FScrollBarStyle                             WidgetBarStyle;                                           // 0x0128(0x04D0) (Edit, BlueprintVisible)
	ESlateVisibility                                   ScrollBarVisibility;                                      // 0x05F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ScrollBarAlwaysVisible;                                   // 0x05F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x05FA(0x0002) MISSED OFFSET
	struct FVector2D                                   ScrollbarThickness;                                       // 0x05FC(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              ScrollTime;                                               // 0x0604(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ScrollMargin;                                             // 0x0608(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x060C(0x0004) MISSED OFFSET
	class UClass*                                      NoItemWidgetClass;                                        // 0x0610(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0618(0x0008) MISSED OFFSET
	class UUserWidget*                                 NoItemWidget;                                             // 0x0620(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0628(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseListBox");
		return ptr;
	}


	void SetTopIndex(int TopIndex, bool IsScroll);
	void SetScrollTime(float Time);
	void SetScrollBottom();
	void SetScrollBarVisibility(ESlateVisibility InVisibility);
	void SetScrollBarThickness(const struct FVector2D& InThickness);
	void SetScrollBarAlwaysVisible(bool InAlwaysVisible);
	void SetForceDisplayItemByIndex(int Index);
	void ScrollPage(int Value);
	bool IsListScrollFinish();
	int GetTopIndex();
	int GetMaxRenderCount();
	void AddScroll(int Value);
};


// Class Arise.AriseListBoxRefine
// 0x0550 (0x0668 - 0x0118)
class UAriseListBoxRefine : public UPanelWidget
{
public:
	struct FAriseListBoxStyle                          WidgetStyle;                                              // 0x0118(0x0010) (Edit, BlueprintVisible)
	struct FScrollBarStyle                             WidgetBarStyle;                                           // 0x0128(0x04D0) (Edit, BlueprintVisible)
	ESlateVisibility                                   ScrollBarVisibility;                                      // 0x05F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ScrollBarAlwaysVisible;                                   // 0x05F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x05FA(0x0002) MISSED OFFSET
	struct FVector2D                                   ScrollbarThickness;                                       // 0x05FC(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              ScrollTime;                                               // 0x0604(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ScrollMargin;                                             // 0x0608(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x060C(0x0004) MISSED OFFSET
	class UClass*                                      WidgetClass;                                              // 0x0610(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      NoItemWidgetClass;                                        // 0x0618(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnDataSet;                                                // 0x0620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x38];                                      // 0x0630(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseListBoxRefine");
		return ptr;
	}


	void WidgetMakeRequest(int Index, int Count);
	void UpdateWidgetIndex(int Index);
	void UpdateItemData(int Index, struct FListWidgetInitData* WidgetInitData);
	void SetTopIndex(int TopIndex, bool IsScroll);
	void SetScrollTime(float Time);
	void SetScrollBottom();
	void SetScrollBarVisibility(ESlateVisibility InVisibility);
	void SetScrollBarThickness(const struct FVector2D& InThickness);
	void SetScrollBarAlwaysVisible(bool InAlwaysVisible);
	void SetForceDisplayItemByIndex(int Index);
	void ScrollPage(int Value);
	void RemoveItemData(int Index);
	void MakeList();
	bool IsListScrollFinish();
	class UUserWidget* GetWidget(int Index);
	int GetTopIndex();
	int GetMaxRenderCount();
	int GetItemNum();
	bool GetInitData(int Index, struct FListWidgetInitData* OutData);
	int FindItemString(int ArrayIndex, const struct FString& Value);
	int FindItemInt(int ArrayIndex, int Value);
	int FindItemFloat(int ArrayIndex, float Value);
	void ClearItem();
	void BindWidgetCreateCallback(const struct FScriptDelegate& Callback);
	void AddScroll(int Value);
	void AddItemDataIndex(int Index, struct FListWidgetInitData* WidgetInitData);
	void AddItemData(struct FListWidgetInitData* WidgetInitData);
};


// Class Arise.AriseListBoxSlot
// 0x0010 (0x0048 - 0x0038)
class UAriseListBoxSlot : public UPanelSlot
{
public:
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                      // 0x0038(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0039(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseListBoxSlot");
		return ptr;
	}


	void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);
	int GetListIndex();
};


// Class Arise.AriseListenerComponent
// 0x04B0 (0x0700 - 0x0250)
class UAriseListenerComponent : public USceneComponent
{
public:
	TArray<class AActor*>                              ActorsToIgnore;                                           // 0x0250(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<TEnumAsByte<EObjectTypeQuery>>              HitObjectTypes;                                           // 0x0260(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UDataTable*                                  PhysicalSurfaceDataTable;                                 // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RayAngle;                                                 // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RayRadius;                                                // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityRayRadius;                                         // 0x0280(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	class UCurveFloat*                                 DensityRayDepthRateCurve;                                 // 0x0288(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityRayNoHitDepthRate;                                 // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WallDistanceLimit;                                        // 0x0294(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 SpatialVolumeRateCurve;                                   // 0x0298(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RTPCInterpTime;                                           // 0x02A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsProcessing;                                             // 0x02A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsDebugDraw;                                              // 0x02A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x02A6(0x0002) MISSED OFFSET
	float                                              ReverbeTestVolume;                                        // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x454];                                     // 0x02AC(0x0454) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseListenerComponent");
		return ptr;
	}


	float GetVolume(int Index);
	float GetNormalizedVolume(int Index);
	float GetMinDistance();
	float GetDensity(int Index);
	float GetAverageVolume();
	float GetAverageDensity();
};


// Class Arise.AriseMiningSaveData
// 0x0040 (0x0068 - 0x0028)
class UAriseMiningSaveData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0028(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseMiningSaveData");
		return ptr;
	}


	void Terminate();
	void SetDefault();
	void ResetMiningPointInfo();
	bool RemoveMiningPointInfo(const struct FString& Name);
	void Initialize();
	bool FindMiningPointInfo(const struct FString& Name, struct FAriseMiningPointSaveInfo* MiningPointInfo, bool* IsChangedRequest);
	bool ContainsMiningPointInfo(const struct FString& Name);
	bool AddMiningPointInfo(const struct FString& Name, const struct FAriseMiningPointSaveInfo& MiningPointInfo);
};


// Class Arise.AriseMiningSaveDataLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseMiningSaveDataLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseMiningSaveDataLibrary");
		return ptr;
	}


	int STATIC_GetMiningSaveData_MaxItemNum();
	class UAriseMiningSaveData* STATIC_GetMiningSaveData();
	class UAriseMiningSaveData* STATIC_CreateMiningSaveData(class UClass* SaveGameClass);
};


// Class Arise.AriseListBoxSlotRefine
// 0x0010 (0x0048 - 0x0038)
class UAriseListBoxSlotRefine : public UPanelSlot
{
public:
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                      // 0x0038(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0039(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseListBoxSlotRefine");
		return ptr;
	}


	void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);
	int GetListIndex();
};


// Class Arise.AriseParticleModuleLocationSkelVertSurface
// 0x0068 (0x0098 - 0x0030)
class UAriseParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x0034(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x0040(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x0040(0x0001) (Edit)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                                     // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SkelMeshActorParamName;                                   // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ValidAssociatedBones;                                     // 0x0050(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<EAchCharacterBuildComponent>           TargetBuildType;                                          // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseTargetBuildType;                                      // 0x0061(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0062(0x0002) MISSED OFFSET
	unsigned char                                      bEnforceNormalCheck : 1;                                  // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	struct FVector                                     NormalToCompare;                                          // 0x0068(0x000C) (Edit, IsPlainOldData)
	float                                              NormalCheckToleranceDegrees;                              // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckTolerance;                                     // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<int>                                        ValidMaterialIndices;                                     // 0x0080(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bInheritVertexColor : 1;                                  // 0x0090(0x0001) (Edit)
	unsigned char                                      bInheritUV : 1;                                           // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	uint32_t                                           InheritUVChannel;                                         // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseParticleModuleLocationSkelVertSurface");
		return ptr;
	}

};


// Class Arise.ArisePartyOrder
// 0x0120 (0x0148 - 0x0028)
class UArisePartyOrder : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    PartyInDelegate;                                          // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PartyOutDelegate;                                         // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    GuestInDelegate;                                          // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    GuestOutDelegate;                                         // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RecevieAddRisePointDelegate;                              // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PartyOrderLoadComplated;                                  // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChangeOrderDelegate;                                      // 0x0090(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FPartyOrder                                 PartyOrder;                                               // 0x00A0(0x0078)
	TArray<struct FArisePlayerStatus>                  PlayerStatus;                                             // 0x0118(0x0010) (ZeroConstructor)
	TArray<EOperationMode>                             PlayerModes;                                              // 0x0128(0x0010) (ZeroConstructor)
	class UAriseStatusContainer*                       StatusContainer;                                          // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0140(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyOrder");
		return ptr;
	}


	EArisePartyID SwitchPartyTop(bool bCW);
	void SwapPartyOrder(EPCOrder Src, EPCOrder Dst);
	void SetPartyTop(EArisePartyID PartyId);
	void SetPartyOrder(EArisePartyID PartyId, EPCOrder Order);
	void SetOperationMode(EControlPlayer Player, EOperationMode Mode);
	void SetGuest(EAriseGuestID GuestId);
	void SetFirstPartyIn(EArisePartyID PartyId, bool Flag);
	void SetCompanion(EAriseGuestID CompanionID);
	void ResetGuest();
	void ResetCompanion();
	void PushOrder(EBackupOrder Order);
	void PushBattleOrder();
	void PopOrder(EBackupOrder Order);
	void PopBattleOrder();
	void OutPartyAll();
	void OutParty(EArisePartyID PartyId);
	void K2_SetEquipmentFlag(EArisePartyID PartyId);
	bool IsParty(EArisePartyID PartyId);
	bool IsGuest(EAriseGuestID GuestId);
	bool IsFirstPartyIn(EArisePartyID PartyId);
	bool IsCompanion(EAriseGuestID CompanionID);
	void InParty(EArisePartyID PartyId);
	struct FArisePlayerStatus GetPlayerStatusByOrder(EPCOrder Order);
	TArray<struct FArisePlayerStatus> GetPlayerStatus();
	EArisePartyID GetPartyTop();
	EPCOrder GetPartyOrder(EArisePartyID PartyId);
	TArray<EArisePartyID> GetPartyList();
	EArisePartyID GetPartyId(EPCOrder Order);
	int GetPartyCount();
	EOperationMode GetOperationMode(EControlPlayer Player);
	TArray<EAriseGuestID> GetGuestList();
	int GetGuestCount();
	EAriseGuestID GetGuest(EGuestOrder Order);
	TArray<EAriseGuestID> GetCompanionList();
	int GetCompanionCount();
	EAriseGuestID GetCompanion(EGuestOrder Order);
	void Clear();
};


// Class Arise.ArisePartyProfile
// 0x0F90 (0x0FB8 - 0x0028)
class UArisePartyProfile : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UArisePartyProfile_Gald*                     Gald;                                                     // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_System*                   System;                                                   // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_Time*                     Time;                                                     // 0x0040(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_Encount*                  Encount;                                                  // 0x0048(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_Battle*                   Battle;                                                   // 0x0050(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_Bottle*                   Bottle;                                                   // 0x0058(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_Alias*                    Alias;                                                    // 0x0060(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_GradeShop*                GradeShop;                                                // 0x0068(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_Map*                      Map;                                                      // 0x0070(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_MiniGame*                 MiniGame;                                                 // 0x0078(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_PlayRecord*               PlayRecord;                                               // 0x0080(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UArisePartyProfile_Story*                    Story;                                                    // 0x0088(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF28];                                     // 0x0090(0x0F28) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile");
		return ptr;
	}


	void Update(class UAriseGameStateController* State, float Delta);
	void OnPostMapChange(const struct FString& OldMapName, const struct FString& NewMapName);
};


// Class Arise.ArisePartyProfile_Base
// 0x0008 (0x0030 - 0x0028)
class UArisePartyProfile_Base : public UObject
{
public:
	class UArisePartyProfile*                          Manager;                                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_Base");
		return ptr;
	}

};


// Class Arise.ArisePartyProfile_Alias
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_Alias : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_Alias");
		return ptr;
	}


	void SetRisePoint(int Value);
	int GetRisePoint();
	void AddRisePoint(int Value);
};


// Class Arise.ArisePartyProfile_Battle
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_Battle : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_Battle");
		return ptr;
	}


	void SubTP(int Var);
	void SetTPMaxBase(int Var);
	void SetTP(int Var);
	void SetSpecialCount_SIO(int Value);
	void SetPFTP(int Value);
	void SetPFActionCount_SIO(int Value);
	void SetFeverTotalBattleBonusDecValue(float Value);
	void SetBattleStartPartyID(EArisePartyID PartyId);
	void SetBattleRank(EBtlRank Rank);
	void SetBattleBonusTime(float Value);
	void SetBattleBonusFeverMode(bool bFever);
	void SetBattleBonus(float Value);
	void SetAliasCounter(EArisePartyID PartyId, EBtlAliasCountDefine Alias, int Value);
	bool IsBattleBonusFeverMode();
	int GetTPMaxDLC();
	int GetTPMaxBase();
	int GetTPMax();
	int GetTp();
	int GetSpecialCount_SIO();
	int GetPFTP();
	int GetPFActionCount_SIO();
	int GetOpenSkillNum();
	float GetFeverTotalBattleBonusDecValue();
	EArisePartyID GetBattleStartPartyID();
	EBtlRank GetBattleRank();
	float GetBattleBonusTime();
	float GetBattleBonus();
	int GetAliasCounter(EArisePartyID PartyId, EBtlAliasCountDefine Alias);
	void AddTP(int Var);
	void AddSpecialCount_SIO(int Value);
	void AddPFTP(int Value);
	void AddPFActionCount_SIO(int Value);
	void AddFeverTotalBattleBonusDecValue(float Value);
	void AddBattleBonusTime(float Value);
	void AddBattleBonus(float Value);
	void AddAliasCounter(EArisePartyID PartyId, EBtlAliasCountDefine Alias, int Value);
};


// Class Arise.ArisePartyProfile_Bottle
// 0x0030 (0x0060 - 0x0030)
class UArisePartyProfile_Bottle : public UArisePartyProfile_Base
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0030(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_Bottle");
		return ptr;
	}


	void UseCook2(const struct FString& SkillLabel, float EffectTime, float FavoriteValue, EArisePartyID Favorite);
	void UseCook(const struct FString& SkillLabel_2, const struct FString& SkillLabel_3, float Time);
	void SetBottleEffectNum(int Effect);
	void SetBottleEffect(int Num);
	bool IsCookSkill(int SkillID, float* Value);
	bool HasCookSkill();
	float GetCookTotalTime();
	float GetCookTime();
	int GetCookSkill2(float* Value);
	void GetCookSkill(int* SkillID_2, int* SkillID_3);
	EArisePartyID GetCookFavorite();
	int GetBottleEffectNum();
	int GetBottleEffect();
	void AddBottleEffectNum(int Add);
};


// Class Arise.ArisePartyProfile_Encount
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_Encount : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_Encount");
		return ptr;
	}


	void SetEventEncountDefeat(int ID, bool Flag);
	void SetEncountNum(int Num);
	void SetEncountFlag(int InUnitID, bool InNewFlag);
	void SetDefeatCount(int UnitID, int Count);
	void SetCharaDefeatCount(EArisePartyID PartyId, int Count);
	int GetTotalEncountNum();
	bool GetEventEncountDefeat(int ID);
	int GetEncountNum();
	bool GetEncountFlag(int InUnitID);
	int GetDefeatCount(int UnitID);
	int GetCharaDefeatCount(EArisePartyID PartyId);
	void AddEncountNum(int Add);
	void AddDefeatCount(int UnitID, int Count);
	void AddCharaDefeatCount(EArisePartyID PartyId, int Count);
};


// Class Arise.ArisePartyProfile_Gald
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_Gald : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_Gald");
		return ptr;
	}


	void SetGald(int Value);
	int MaxGald();
	int GetGald();
	void AddGald(int Value);
};


// Class Arise.ArisePartyProfile_GradeShop
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_GradeShop : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_GradeShop");
		return ptr;
	}


	void SetGradeShopEnableFlag(int ID, bool Flag);
	void SetGrade(int Grade);
	bool GetGradeShopEnableFlag(int ID);
	int GetGrade();
	void CopyToTemporaryGradeShopEnableFlag();
	void CopyFromTemporaryGradeShopEnableFlag();
	void AddGrade(int Add);
};


// Class Arise.ArisePartyProfile_Map
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_Map : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_Map");
		return ptr;
	}


	void UpdatePlayerMoveDistance(float InDistance);
	void SetPlayerSwimState(bool bInSwimState);
	void SetPlayerRotation(const struct FRotator& InNewValue);
	void SetPlayerLocation(const struct FVector& InNewValue);
	void SetMapName(const struct FString& InNewMapName);
	void SetMapLocationName(const struct FString& InNewMapLocationName);
	void ResetPlayerMoveDistanceCounter();
	void RequestReloadMap();
	bool IsRequestReloadMap();
	bool IsPlayerSwimState();
	struct FString GetReloadMapName();
	struct FString GetReloadLocationName();
	struct FRotator GetPlayerRotation();
	struct FVector GetPlayerLocation();
	void ClearRequestReloadMap();
	void ChangeMapLocationCallback(const struct FString& InMapLocationName);
	void ChangeMapCallback(const struct FString& InNextMapName);
};


// Class Arise.ArisePartyProfile_MiniGame
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_MiniGame : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_MiniGame");
		return ptr;
	}


	void SetTLCoin(int coin);
	void SetEpicFishCatchCount(int Count);
	void SetCatchLegendFish(bool bCatched);
	bool IsCatchLegendFish();
	int GetTLCoin();
	int GetEpicFishCatchCount();
	void AddTLCoin(int coin);
};


// Class Arise.ArisePartyProfile_PlayRecord
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_PlayRecord : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_PlayRecord");
		return ptr;
	}


	void SetPlayRecordIfUpdate(EPlayRecordList ID, int Value);
	void SetPlayRecordDetail(EPlayRecordList ID, int Value, bool bCheckTrophy);
	void SetPlayRecord(EPlayRecordList ID, int Value);
	int GetPlayRecord(EPlayRecordList ID);
	void CheckPlayRecordTrophy(EPlayRecordList ID, int Value);
	void AddPlayRecord(EPlayRecordList ID, int Add);
};


// Class Arise.ArisePartyProfile_Story
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_Story : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_Story");
		return ptr;
	}

};


// Class Arise.ArisePartyProfile_System
// 0x0000 (0x0030 - 0x0030)
class UArisePartyProfile_System : public UArisePartyProfile_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_System");
		return ptr;
	}


	void SetShopLevel(int Level);
	void SetPFCameraIndex(int Index);
	void SetGameClearCount(int Count);
	void SetFavorability(EArisePartyID PartyId, int NewValue);
	void GetShopLevel(int* Level);
	int GetPFCameraIndex();
	int GetGameLoopCount();
	int GetGameClearCount();
	int GetFavorability(EArisePartyID PartyId);
	void AddGameClearCount(int Count);
	void AddFavorability(EArisePartyID PartyId, int AddValue);
};


// Class Arise.ArisePartyProfile_Time
// 0x0008 (0x0038 - 0x0030)
class UArisePartyProfile_Time : public UArisePartyProfile_Base
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePartyProfile_Time");
		return ptr;
	}


	void SetTotalPlayTime(int frame);
	void SetBattleFrameCounter(int frame);
	int GetTotalPlayTimeSecond();
	int GetTotalPlayTimeMinute();
	int GetTotalPlayTimeHour();
	int GetTotalPlayTime();
	int GetFrameCounter();
	int GetBattleFrameCounter();
};


// Class Arise.ArisePCAssetManager
// 0x0058 (0x0380 - 0x0328)
class AArisePCAssetManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0328(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePCAssetManager");
		return ptr;
	}


	void UpdateCache();
	void SetDebugEnabled(bool bInNewValue);
	void SetCacheEnabled(bool bInNewValue);
	void OutputLog_Cache();
	bool IsDebugEnabled();
	bool IsCacheEnabled();
	void ClearCache();
};


// Class Arise.ArisePlatformAssetDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UArisePlatformAssetDatabase : public UXmlDatabaseBase
{
public:
	struct FArisePlatformAssetDataCollection           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePlatformAssetDatabase");
		return ptr;
	}

};


// Class Arise.ArisePlatformUserManagerEvent
// 0x0018 (0x0340 - 0x0328)
class AArisePlatformUserManagerEvent : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0328(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePlatformUserManagerEvent");
		return ptr;
	}


	void SwapLoginPlayerController();
	void ShowSwapLoginUI(int ControllerIndex);
	void SetDelegate();
	void ResetDelegate();
	void STATIC_RemoveMenuPadProcess(class AMenuPadProcess* MenuPadProcess);
	void STATIC_RemoveAllControllerMenuPadProcess(class UObject* WorldContextObject, TArray<class AMenuPadProcess*> MenuPadProcess);
	void ReconnectController(int ControllerId);
	void OnReconnectController();
	void OnLogoutMessaging();
	void OnChangeState(EAriseGameState ChangedState, bool NewState);
	bool STATIC_IsShowLoginUI();
	void STATIC_InitPlayerCachedUniqueNetId();
	void STATIC_GetPlayerDisplayName(struct FString* OutName);
	class AMenuPadProcess* STATIC_CreateMenuPadProcessLayer(class UObject* WorldContextObject, class APlayerController* PlayerController, int Layer);
	class AMenuPadProcess* STATIC_CreateMenuPadProcess(class UObject* WorldContextObject, class APlayerController* PlayerController);
	TArray<class AMenuPadProcess*> STATIC_CreateAllControllerMenuPadProcessLayer(class UObject* WorldContextObject, int Layer);
	TArray<class AMenuPadProcess*> STATIC_CreateAllControllerMenuPadProcess(class UObject* WorldContextObject);
};


// Class Arise.ArisePlayerCameraManager
// 0x0050 (0x5460 - 0x5410)
class AArisePlayerCameraManager : public APlayerCameraManager
{
public:
	struct FScriptMulticastDelegate                    OnBeginCameraAnimation;                                   // 0x5410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCameraAnimation;                                     // 0x5420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAllEndCameraAnimation;                                  // 0x5430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class AAriseAnimCameraActor*>               AnimCameraArray;                                          // 0x5440(0x0010) (ZeroConstructor, Transient)
	bool                                               bIsPause;                                                 // 0x5450(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x5451(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePlayerCameraManager");
		return ptr;
	}


	class AAriseAnimCameraActor* SpawnAnimationCameraActor(class UClass* Class);
	void SetPause(bool IsPause);
	void SetCameraShakePause(bool IsPauseShake);
	void RemoveAnimationCameraActor(class UClass* Class);
	class AAriseAnimCameraActor* PlayNewCameraAnim(class UCameraAnim* Anim, class UClass* TargetCamera, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	bool IsPlayingCameraAnimation();
	class AAriseAnimCameraActor* GetAnimationCameraActorInstance(class UCameraAnimInst* AnimInst);
	class AAriseAnimCameraActor* GetAnimationCameraActorClass(class UClass* Class);
	TArray<class AAriseAnimCameraActor*> GetAnimationCameraActor();
};


// Class Arise.ArisePCStatus
// 0x0288 (0x02B0 - 0x0028)
class UArisePCStatus : public UObject
{
public:
	unsigned char                                      UnknownData00[0x288];                                     // 0x0028(0x0288) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePCStatus");
		return ptr;
	}


	void UpdateStatusForce();
	void UpdateStatus();
	void UpdateSkillStatusAll();
	void UpdateSkillStatus(int SkillID, int Value);
	void SetWeapon(int UniqueId);
	void SetVisualWeapon(int ItemID);
	void SetTotalExp(int Value);
	void SetStrikeAttack(float Value);
	void SetStepLength(int Value);
	void SetSP(int Value);
	void SetSkillLearnByID(int AliasID, int SkillID, bool bLearn);
	void SetSkillLearn(int AliasID, int SkillNo, bool bLearn);
	void SetRisePoint(int Value);
	void SetPartyId(EArisePartyID PartyId);
	void SetOverLimit(int Value);
	void SetNormalAttack(int Value);
	void SetLevel(int Value);
	void SetJumpPower(int Value);
	void SetHP(int Value);
	void SetHerbSPMax(int Value);
	void SetHerbPenetrate(int Value);
	void SetHerbHPMax(int Value);
	void SetHerbEndurance(int Value);
	void SetHerbElementDefence(int Value);
	void SetHerbElementAttack(int Value);
	void SetHerbDefence(int Value);
	void SetHerbAttack(int Value);
	void SetHair(int ItemID);
	void SetEquipmentSPMax(int Value);
	void SetEquipmentPenetrate(int Value);
	void SetEquipmentHPMax(int Value);
	void SetEquipmentEndurance(int Value);
	void SetEquipmentElementDefence(int Value);
	void SetEquipmentElementAttack(int Value);
	void SetEquipmentDefence(int Value);
	void SetEquipmentAttack(int Value);
	void SetEquipment(int EquipPosition, int UniqueId);
	void SetDebugSkillLearnByID(int AliasID, int SkillID, bool bLearn);
	void SetDebugLevel(int Value);
	void SetDebugDefaultSkill();
	void SetCostume(int ItemID);
	void SetBaseSPMax(int Value);
	void SetBasePenetrate(int Value);
	void SetBaseHPMax(int Value);
	void SetBaseEndurance(int Value);
	void SetBaseElementDefence(int Value);
	void SetBaseElementAttack(int Value);
	void SetBaseDefence(int Value);
	void SetBaseAttack(int Value);
	void SetAttachmentWithIndex(EAttachmentNum AttachNum, int ItemID, int VariationIndex);
	void SetAttachment(EAttachmentNum AttachNum, int ItemID);
	void SetArtsUseCount(const struct FName& ArtsLabel, int Value);
	void SetArtsTypeProficiency(int Type, float Value);
	void SetArtsSealed(const struct FName& ArtsLabel, bool bSealed);
	void SetArtsLearn(const struct FName& ArtsLabel, bool bLearn);
	void SetArmor(int UniqueId);
	void SetAlleviation(int Value);
	void SetAliasUIStage(int AliasID, bool bEnable);
	void SetAliasLearn(int AliasID, bool bLearn);
	void SetActiveSkill(int SkillID, int Slot);
	void SetAccessory(int UniqueId);
	void SaveMySet(int Index);
	void RemoveActiveSkill(int Slot);
	void RegisterArts(const struct FName& ArtsLabel, EArtsKey Key);
	void RegisterAirArts(const struct FName& ArtsLabel, EArtsKey Key);
	void RecoveryAll(bool bRecoverySP);
	void OnAliasSkillEnableChangedDelegate__DelegateSignature(EArisePartyID InPartyID, const struct FName& InSkillID, bool bNewEnabled);
	void LoadMySet(int Index);
	bool IsSpecificSkillLearned(int SkillID);
	bool IsSkillLearnByID(int AliasID, int SkillID);
	bool IsSkillLearn(int AliasID, int SkillNo);
	bool IsArtsSealed(const struct FName& ArtsLabel);
	bool IsArtsLearn(const struct FName& ArtsLabel);
	bool IsAliasUIStage(int AliasID);
	bool IsAliasLearn(int AliasID);
	bool IsActiveSkill(int SkillID);
	void InitMySet(int Index);
	int GetWeapon();
	int GetVisualWeapon();
	void GetVisualStatus(struct FArisePlayerVisualData* Data);
	int GetTotalExp();
	float GetStrikeAttack();
	int GetStepLength();
	int GetSPRate();
	int GetSPMax();
	int GetSpecifiedNextTotalExp(int Level);
	int GetSP();
	int GetRisePoint();
	int GetPenetrate();
	EArisePartyID GetPartyId();
	int GetOverLimit();
	int GetNormalAttack();
	int GetNextTotalExp();
	int GetLevel();
	void GetLearnedActiveSkillList(TArray<int>* SkillList);
	int GetJumpPower();
	int GetHPRate();
	int GetHPMax();
	int GetHp();
	int GetHerbSPMax();
	int GetHerbPenetrate();
	int GetHerbHPMax();
	int GetHerbEndurance();
	int GetHerbElementDefence();
	int GetHerbElementAttack();
	int GetHerbDefence();
	int GetHerbAttack();
	int GetHair();
	int GetEquipmentSPMax();
	int GetEquipmentPenetrate();
	int GetEquipmentHPMax();
	int GetEquipmentEndurance();
	int GetEquipmentElementDefence();
	int GetEquipmentElementAttack();
	int GetEquipmentDefence();
	int GetEquipmentAttack();
	int GetEquipment(int EquipPosition);
	int GetEndurance();
	int GetElementDefence();
	int GetElementAttack();
	int GetDefence();
	int GetCostume();
	int GetBaseSPMax();
	int GetBasePenetrate();
	int GetBaseHPMax();
	int GetBaseEndurance();
	int GetBaseElementDefence();
	int GetBaseElementAttack();
	int GetBaseDefence();
	int GetBaseAttack();
	int GetAttack();
	int GetAttachmentWithIndex(EAttachmentNum AttachNum, int* VariationIndex);
	int GetAttachment(EAttachmentNum AttachNum);
	int GetArtsUseCount(const struct FName& ArtsLabel);
	float GetArtsTypeProficiency(int Type);
	TArray<struct FName> GetArtsArray();
	struct FName GetArts(EArtsKey Key);
	int GetArmor();
	int GetAlleviation();
	TArray<struct FName> GetAirArtsArray();
	struct FName GetAirArts(EArtsKey Key);
	int GetActiveSkillNum();
	TArray<int> GetActiveSkillList();
	int GetActiveSkillID(int Slot);
	int GetAccessory();
	void ExecuteAliasSkillEnableChanged();
	bool CompareVisualStatus(const struct FArisePlayerVisualData& Data);
	void AddTotalExp(int Value, struct FAriseLevelUpResult* Result);
	void AddStrikeAttack(float Value);
	void AddStepLength(int Value);
	void AddSP(int Value);
	void AddRisePoint(int Value);
	void AddOverLimit(int Value);
	void AddNormalAttack(int Value);
	void AddJumpPower(int Value);
	void AddHP(int Value);
	void AddBaseSPMax(int Value);
	void AddBasePenetrate(int Value);
	void AddBaseHPMax(int Value);
	void AddBaseEndurance(int Value);
	void AddBaseElementDefence(int Value);
	void AddBaseElementAttack(int Value);
	void AddBaseDefence(int Value);
	void AddBaseAttack(int Value);
	void AddArtsUseCount(const struct FName& ArtsLabel, int Value);
	void AddArtsTypeProficiency(int Type, float Value);
	void AddAlleviation(int Value);
};


// Class Arise.ArisePlayerStatusLibrary
// 0x0000 (0x0028 - 0x0028)
class UArisePlayerStatusLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArisePlayerStatusLibrary");
		return ptr;
	}


	void STATIC_UnloadDatabase_PlayerStatus();
	void STATIC_SetInitEquipment();
	void STATIC_SetAliasIDByCharacter(EArisePartyID PartyId, int ID);
	void STATIC_SetAliasByCharacter(EArisePartyID PartyId, const struct FString& AliasLabel);
	void STATIC_PostEventChangeEquipment(int PartyId, int Weapon, int Armor, int Hair, int Costume);
	void STATIC_LoadDatabase_PlayerStatus();
	void STATIC_GetStatus(int Level, EArisePartyID ID, struct FLvStatusData* Status);
	void STATIC_GetPlayerStatusByPartyID(EArisePartyID PartyId, struct FArisePlayerStatus* Status, bool* IsValid);
	void STATIC_GetPlayerStatusByOrder(EPCOrder Order, struct FArisePlayerStatus* Status, bool* IsValid);
	int STATIC_GetPlayerAverageLevel();
	int STATIC_GetMinLv();
	int STATIC_GetMaxTotalEXP();
	int STATIC_GetMaxLv();
	void STATIC_GetInitStatus(EArisePartyID ID, struct FInitStatusData* Status);
	void STATIC_GetEXPTable(TArray<struct FLvExpData>* Table);
	int STATIC_GetExp(int Level, EArisePartyID ID);
	void STATIC_ExecuteAliasSkillEnableChanged();
	void STATIC_ChangeVisualForce();
	void STATIC_AllPartyMemberAddRisePoint(int Value);
	void STATIC_AllPartyMemberAddLevel(int Value, bool HealHP);
	void STATIC_AllPartyMemberAddBaseHP(int Value, bool HealHP);
};


// Class Arise.AriseProjectSettings
// 0x0910 (0x0938 - 0x0028)
class UAriseProjectSettings : public UObject
{
public:
	struct FSoftObjectPath                             BattleSystemEffectDatabasePath;                           // 0x0028(0x0018) (Edit, Config, NoClear)
	struct FDirectoryPath                              MapOrderDatabaseDir;                                      // 0x0040(0x0010) (Edit, Config)
	struct FSoftObjectPath                             MapOrderAssetDatabase;                                    // 0x0050(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             MapNameDatabasePath;                                      // 0x0068(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             CampDatabasePath;                                         // 0x0080(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             CampCameraPresetPath;                                     // 0x0098(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             NpcResourceDatabasePath;                                  // 0x00B0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             NpcDefineDatabasePath;                                    // 0x00C8(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             NpcDefineDatabasePath_Debug;                              // 0x00E0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             NpcAnimDatabasePath;                                      // 0x00F8(0x0018) (Deprecated)
	struct FSoftObjectPath                             NpcFacialPresetDatabasePath;                              // 0x0110(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             NpcInteractionDatabasePath;                               // 0x0128(0x0018) (Deprecated)
	struct FSoftClassPath                              NpcSettingsClass;                                         // 0x0140(0x0018) (Deprecated)
	struct FSoftClassPath                              NpcSettingMetaDataClass;                                  // 0x0158(0x0018) (Deprecated)
	struct FSoftObjectPath                             NpcSettingsDatabasePath;                                  // 0x0170(0x0018) (Deprecated)
	struct FSoftObjectPath                             OneTopResourceDatabasePath;                               // 0x0188(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             OneTopDatabasePath;                                       // 0x01A0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             OneTopDatabasePath_Debug;                                 // 0x01B8(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             OneTopFakeLipSyncDatabasePath;                            // 0x01D0(0x0018) (Deprecated)
	struct FSoftObjectPath                             InteractInfoDatabasePath;                                 // 0x01E8(0x0018) (Deprecated)
	struct FSoftObjectPath                             ScriptCameraPresetPath;                                   // 0x0200(0x0018) (Edit, Config, NoClear)
	TArray<struct FXmlDatabaseItem>                    PlacementDatabaseList;                                    // 0x0218(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	TArray<struct FStringDictionaryItem>               PlacementStringDictionaryList;                            // 0x0228(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	TArray<struct FXmlDatabaseItem>                    BattleDatabaseList;                                       // 0x0238(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	TArray<struct FStringDictionaryItem>               BattleDictionaryList;                                     // 0x0248(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	struct FSoftObjectPath                             PictureIDDatabasePath;                                    // 0x0258(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             CharaIconIDDatabasePath;                                  // 0x0270(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             NowLoadingDatabasePath;                                   // 0x0288(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             MenuListDatabasePath;                                     // 0x02A0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             InputHelpDatabasePath;                                    // 0x02B8(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             InputHelpActionDatabasePath;                              // 0x02D0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             CollectionKeywordDatabasePath;                            // 0x02E8(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             CollectionPlayRecordDatabasePath;                         // 0x0300(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             CollectionHelpDatabasePath;                               // 0x0318(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             CollectionFishDatabasePath;                               // 0x0330(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             ArtifactDatabasePath;                                     // 0x0348(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             MapIconDatabasePath;                                      // 0x0360(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             MenuSoundDatabasePath;                                    // 0x0378(0x0018) (Edit, Config, NoClear)
	TArray<struct FXmlDatabaseItem>                    ShortchatDatabaseList;                                    // 0x0390(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	TArray<struct FStringDictionaryItem>               ShortchatDictionaryList;                                  // 0x03A0(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	TArray<struct FXmlDatabaseItem>                    EncountSymbolDatabaseList;                                // 0x03B0(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	struct FSoftObjectPath                             EncountGroupNameDatabasePath;                             // 0x03C0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             ScenarioBitFlagDatabasePath;                              // 0x03D8(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             SeriousFlagCharaDatabasePath;                             // 0x03F0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             EventSettingsDatabasePath;                                // 0x0408(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             EventDebugSettingsDatabasePath;                           // 0x0420(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             EventDebugSettingsDictionaryPath;                         // 0x0438(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             PostEventEncountDatabasePath;                             // 0x0450(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             PostEventItemDatabasePath;                                // 0x0468(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             PostEventEquipDatabasePath;                               // 0x0480(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             PostEventScenarioBitFlagDatabasePath;                     // 0x0498(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             PostEventMiscDatabasePath;                                // 0x04B0(0x0018) (Edit, Config, NoClear)
	TArray<struct FXmlDatabaseItem>                    ItemDatabasePath;                                         // 0x04C8(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	TArray<struct FStringDictionaryItem>               ItemDictionaryList;                                       // 0x04D8(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	TArray<struct FXmlDatabaseItem>                    QuestDatabaseList;                                        // 0x04E8(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	TArray<struct FStringDictionaryItem>               QuestDictionaryList;                                      // 0x04F8(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	struct FSoftObjectPath                             LongChatDatabasePath;                                     // 0x0508(0x0018) (Edit, Config, NoClear)
	TArray<struct FXmlDatabaseItem>                    PlayerStatusDatabaseList;                                 // 0x0520(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	struct FSoftObjectPath                             PCModelDatabasePath;                                      // 0x0530(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             PCModelConvDatabasePath;                                  // 0x0548(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             PFPCAnimBlueprintDatabase;                                // 0x0560(0x0018) (Edit, Config)
	struct FSoftObjectPath                             PFPCGadgetDatabase;                                       // 0x0578(0x0018) (Edit, Config)
	struct FSoftObjectPath                             PFPCIdleTransitionDatabase;                               // 0x0590(0x0018) (Edit, Config)
	TArray<struct FXmlDatabaseItem>                    MiniGameDatabaseList;                                     // 0x05A8(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	struct FSoftObjectPath                             CookingRecipeDatabasePath;                                // 0x05B8(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             CookingPointDatabasePath;                                 // 0x05D0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             FarmDatabasePath;                                         // 0x05E8(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             InnDatabasePath;                                          // 0x0600(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             CampMenuDatabasePath;                                     // 0x0618(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             AccessoryDatabasePath;                                    // 0x0630(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             ArtsMovieDatabasePath;                                    // 0x0648(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             StatusImageDatabasePath;                                  // 0x0660(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             MenuTopDatabasePath;                                      // 0x0678(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             MenuSkillPanelDatabasePath;                               // 0x0690(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             BlueprintAssetDatabasePath;                               // 0x06A8(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             ResidentAssetDatabasePath;                                // 0x06C0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             ResidentAssetDatabasePath_Debug;                          // 0x06D8(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             PlatformAssetDatabasePath;                                // 0x06F0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             PlatformStringDictionaryPath;                             // 0x0708(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             MenuCursorDatabasePath;                                   // 0x0720(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             EntitlementPackageDatabasePath;                           // 0x0738(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             EntitlementPackagePlatformDatabasePath;                   // 0x0750(0x0018) (Edit, Config, NoClear)
	struct FString                                     MapLinkXmlFilePath;                                       // 0x0768(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	struct FString                                     MapLocatorXmlFilePath;                                    // 0x0778(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	struct FString                                     WorldMapXmlFilePath;                                      // 0x0788(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	struct FSoftObjectPath                             MapLinkDatabasePath;                                      // 0x0798(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             MapLocatorDatabasePath;                                   // 0x07B0(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             WorldMapDatabasePath;                                     // 0x07C8(0x0018) (Edit, Config, NoClear)
	struct FString                                     PassBlockXmlFilePath;                                     // 0x07E0(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	struct FSoftObjectPath                             FastTravelControlDatabasePath;                            // 0x07F0(0x0018) (Edit, Config, NoClear)
	float                                              WorldTimeRate;                                            // 0x0808(0x0004) (Edit, ZeroConstructor, Config, NoClear, IsPlainOldData)
	float                                              LongchatQueRefreshInterval;                               // 0x080C(0x0004) (Edit, ZeroConstructor, Config, NoClear, IsPlainOldData)
	struct FString                                     LipCurveDirectoryPath;                                    // 0x0810(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             ResidentSoundBankNames;                                   // 0x0820(0x0010) (Edit, ZeroConstructor, Config)
	struct FString                                     MinimapNavMeshRootPath;                                   // 0x0830(0x0010) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             FishingDatabasePath;                                      // 0x0840(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             FishingRewardItemDatabasePath;                            // 0x0858(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             SearchOwlRewardDatabasePath;                              // 0x0870(0x0018) (Edit, Config, NoClear)
	struct FSoftObjectPath                             VisualItemDatabasePath;                                   // 0x0888(0x0018) (Edit, Config)
	struct FSoftObjectPath                             VisualItemDefineDatabasePath;                             // 0x08A0(0x0018) (Edit, Config)
	struct FSoftObjectPath                             FaceAttachmentConvDatabasePath_ARI;                       // 0x08B8(0x0018) (Edit, Config)
	struct FSoftObjectPath                             CharacterAttachmentConvDatabasePath;                      // 0x08D0(0x0018) (Edit, Config)
	struct FSoftObjectPath                             CharacterDisableFaceBlendDatabase;                        // 0x08E8(0x0018) (Edit, Config)
	struct FSoftObjectPath                             AriseGameDataDatabasePath;                                // 0x0900(0x0018) (Edit, Config, NoClear)
	bool                                               bUseMenuManager2;                                         // 0x0918(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0919(0x0007) MISSED OFFSET
	struct FString                                     BattleLauncherWorkerPath;                                 // 0x0920(0x0010) (Edit, ZeroConstructor, Config, NoClear)
	float                                              MouseRateForCameraRotation;                               // 0x0930(0x0004) (Edit, ZeroConstructor, Config, NoClear, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0934(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseProjectSettings");
		return ptr;
	}

};


// Class Arise.AriseRelationShipDatabase
// 0x0000 (0x0028 - 0x0028)
class UAriseRelationShipDatabase : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseRelationShipDatabase");
		return ptr;
	}


	bool STATIC_IsRelationShipEnable_SpeakerType(EAriseRelationship Relationship, ESpeakerType CharaID);
	bool STATIC_IsRelationShipEnable_IconId(EAriseRelationship Relationship, EAriseCharaIconID CharaID);
	bool STATIC_IsRelationShipEnable(EAriseRelationship Relationship, EArisePartyID PartyId);
	bool STATIC_HasRelationship(EAriseCharaIconID CharaID, EAriseRelationship Relationship);
};


// Class Arise.AriseRelationShipDataObject
// 0x0010 (0x01C8 - 0x01B8)
class UAriseRelationShipDataObject : public UXmlDatabaseBase
{
public:
	struct FAriseRelationShipDataCollection            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseRelationShipDataObject");
		return ptr;
	}


	bool IsEnableIndex_mData(int Index);
};


// Class Arise.AriseResidentAssetDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UAriseResidentAssetDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FAriseResidentAssetDatabase                 Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseResidentAssetDatabaseObject");
		return ptr;
	}

};


// Class Arise.AriseResidentAssetManager
// 0x0000 (0x0028 - 0x0028)
class UAriseResidentAssetManager : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseResidentAssetManager");
		return ptr;
	}


	void STATIC_UnloadById(const struct FName& ID);
	void STATIC_UnloadByCategory(EAriseResidentAssetCategory Category);
	void STATIC_SetLoadPolicy(EAriseResidentAssetLoadPolicy NewPolicy);
	void STATIC_LoadDatabase();
	void STATIC_LoadById(const struct FName& ID);
	void STATIC_LoadByCategory(EAriseResidentAssetCategory Category);
	void STATIC_K2_AwaitLoadedById(class UObject* WorldContextObject, const struct FName& ID, const struct FLatentActionInfo& LatentInfo);
	void STATIC_K2_AwaitLoadedByCategory(class UObject* WorldContextObject, EAriseResidentAssetCategory Category, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_IsLoadedById(const struct FName& ID);
	bool STATIC_IsLoadedByCategory(EAriseResidentAssetCategory Category);
	class UObject* STATIC_GetAssetById(const struct FName& ID);
};


// Class Arise.AriseSave
// 0x0068 (0x0090 - 0x0028)
class UAriseSave : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBeginSave;                                              // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginLoad;                                              // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndSave;                                                // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndLoad;                                                // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptDelegate                             OnUpdateSaveHeader;                                       // 0x0070(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0080(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseSave");
		return ptr;
	}


	void SetThumbneilDataAuto(int iSlotNo);
	void SetThumbneilData(int iSlotNo, TArray<unsigned char>* InBuffer);
	void SetOverrideAppSaveDataVersion(int iVersion);
	void SetEnableOverrideAppSaveDataVersion(bool iEnable);
	void SetDevelopmentSaveDirectory(bool iDevelopment);
	bool SaveUI();
	bool SaveSystemSaveDataAsync();
	bool SaveSystemSaveData();
	bool SaveAsync(const struct FAriseSaveArgument& iArgument);
	bool Save(const struct FAriseSaveArgument& iArgument);
	bool QuickSave();
	bool QuickLoad();
	void OnUpdateSaveHeader__DelegateSignature(struct FAriseSaveHeader* iHeaderWrapper);
	void OnEndSave__DelegateSignature(EAriseSaveResult iResult);
	void OnEndLoad__DelegateSignature(EAriseSaveResult iResult);
	void OnBeginSave__DelegateSignature();
	void OnBeginLoad__DelegateSignature();
	void NewGame();
	bool LoadUI();
	bool LoadSystemSaveDataAsync();
	bool LoadSystemSaveData();
	bool LoadAsync(const struct FAriseLoadArgument& iArgument);
	bool Load(const struct FAriseLoadArgument& iArgument);
	bool K2_SaveMemory(TArray<unsigned char>* iMemory);
	bool K2_LoadMemory(TArray<unsigned char>* iMemory);
	bool STATIC_IsManualSaveSlot(int iSlotIndex);
	bool IsEnableOverrideAppSaveDataVersion();
	bool IsDevelopmentSaveDirectory();
	bool IsBusy();
	bool STATIC_IsAutoSaveSlot(int iSlotIndex);
	void GetSaveHeaderList(TArray<struct FAriseSaveHeader>* OutHeaderList);
	struct FAriseSaveResultToDo GetResultToDo();
	EAriseSaveResult GetResult();
	int GetOverrideAppSaveDataVersion();
	int STATIC_GetMaxSystemSaveSize();
	int STATIC_GetMaxSaveSize();
	int STATIC_GetManualSaveSlotNum();
	void GetDebugSaveRootList(TArray<EAriseDebugSaveRoot>* OutRootList);
	bool GetDebugSaveFile(EAriseDebugSaveRoot iRoot, int iSlotIndex, struct FAriseDebugSaveFile* OutFile);
	int STATIC_GetAutoSaveSlotNum();
	int STATIC_GetAppSaveDataVersion();
	bool ExNewGameAsync(const struct FAriseLoadArgument& iArgument);
	bool ExNewGame(const struct FAriseLoadArgument& iArgument);
	void EnableDelayShowDialog();
	void DisableDelayShowDialog();
	bool DeleteUI();
	bool DeleteAsync(const struct FAriseDeleteArgument& iArgument);
	bool Delete(const struct FAriseDeleteArgument& iArgument);
	bool DebugSave(EAriseDebugSaveRoot iRoot, int iSlotIndex);
	bool DebugLoad(EAriseDebugSaveRoot iRoot, int iSlotIndex);
};


// Class Arise.AriseScenarioLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseScenarioLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScenarioLibrary");
		return ptr;
	}


	void STATIC_UnregisterScenarioFlagCallback(const struct FScriptDelegate& func);
	void STATIC_UnregisterScenarioCounterChangeCallback(const struct FScriptDelegate& func);
	void STATIC_SetupScenarioCondition(const struct FScenarioCondition& Scenario);
	void STATIC_SetupPartyCondition(const struct FPartyCondition& Party);
	void STATIC_SetScenarioFlagNoCallbackByName(const struct FString& FlagName, bool bValid);
	void STATIC_SetScenarioFlagNoCallback(int Flag, bool bValid);
	void STATIC_SetScenarioFlagByName(const struct FString& FlagName, bool bValid);
	void STATIC_SetScenarioFlag(int Flag, bool bValid);
	void STATIC_SetScenarioCounterNoCallback(int counter);
	void STATIC_SetScenarioCounter(int counter);
	void STATIC_RegisterUniqueScenarioFlagCallback(int uniqueFlag, const struct FScriptDelegate& getter, const struct FScenarioFlagUniqueSetterEvent& setter);
	void STATIC_RegisterScenarioFlagCallback(const struct FScriptDelegate& func);
	void STATIC_RegisterScenarioCounterChangeCallback(const struct FScriptDelegate& func);
	int STATIC_MakeScenarioEndCounter(const struct FScenarioCondition& counter);
	int STATIC_MakeScenarioCounter(int Chapter, int Section);
	int STATIC_MakeScenarioBeginCounter(const struct FScenarioCondition& counter);
	void STATIC_K2_SetScenarioFlagByName(const struct FAriseScenarioFlag_DatabaseLabel& FlagName, bool bValid);
	bool STATIC_K2_GetScenarioFlagByName(const struct FAriseScenarioFlag_DatabaseLabel& FlagName);
	bool STATIC_IsSatisfyScenarioCounter(int beginCounter, int endCounter);
	bool STATIC_IsSatisfyScenarioConditionNamed(const struct FScenarioConditionNamed& ScenarioCondition);
	bool STATIC_IsSatisfyScenarioCondition(const struct FScenarioCondition& Scenario);
	bool STATIC_IsPastScenarioCondition(const struct FScenarioCondition& Scenario);
	bool STATIC_IsOldLNG();
	bool STATIC_IsMatchScenarioCounter(const struct FScenarioCondition& Scenario, int counter);
	bool STATIC_GetScenarioFlagByName(const struct FString& FlagName);
	bool STATIC_GetScenarioFlagById(int flagId);
	void STATIC_GetScenarioFlagByCategory(EScenarioBitFlagCategory Category, TArray<struct FString>* OutFlagNames);
	struct FString STATIC_GetScenarioCounterString();
	int STATIC_GetScenarioCounter();
	int STATIC_GetScenarioChapter();
	struct FString STATIC_GetScenarioBitFlagCategoryNameByValue(EScenarioBitFlagCategory InCategory);
	int STATIC_ExtractScenarioCounterSection(int counter);
	int STATIC_ExtractScenarioCounterChapter(int counter);
	void STATIC_ExtractScenarioCounter(int counter, int* oChapter, int* oSection);
	struct FScenarioConditionNamed STATIC_ConvertScenarioIdToScenarioNamed(const struct FScenarioCondition& InCondition);
	struct FString STATIC_ConvertScenarioFlagNumToName(int InFlagNum);
	int STATIC_ConvertScenarioFlagNameToId(const struct FString& FlagName);
	struct FString STATIC_ConvertScenarioFlagIdToName(int flagId);
	void STATIC_ConvertScenarioConditionNamed(const struct FScenarioConditionNamed& ScenarioConditionNamed, struct FScenarioCondition* outScenarioCondition);
	void STATIC_ClearScenarioCondtion();
	bool STATIC_CheckScriptCondition(const struct FScriptCondition& Script);
	bool STATIC_CheckPartyCondition(const struct FPartyCondition& Party);
};


// Class Arise.AriseScenarioVariable
// 0x0070 (0x0098 - 0x0028)
class UAriseScenarioVariable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FString                                     Name;                                                     // 0x0030(0x0010) (Edit, ZeroConstructor)
	uint32_t                                           version;                                                  // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumWork;                                                  // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumSlot;                                                  // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4C];                                      // 0x004C(0x004C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScenarioVariable");
		return ptr;
	}


	bool SerializeVariable(int Slot, int SerializeVariable, int* DeserializeVariable);
	void OnReceiveTerminate();
	void OnReceiveSetDefault();
	void OnReceiveSerializeSaveData(TEnumAsByte<EAriseScenarioVariableSerialize> ScerializeType);
	void OnReceiveInitialize();
};


// Class Arise.AriseScriptComponent
// 0x0030 (0x0128 - 0x00F8)
class UAriseScriptComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00F8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Arise.AriseScriptComponent.ScriptAssetPath
	bool                                               bScriptCompleted;                                         // 0x0120(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bScriptCancel;                                            // 0x0121(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bScriptLoaded;                                            // 0x0122(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0123(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScriptComponent");
		return ptr;
	}


	void UnloadScript();
	void ReceiveUnloadScript();
	void ReceiveLoadScriptAsync();
	void ReceiveEndScript();
	void ReceiveDamage();
	void ReceiveBreak();
	void ReceiveBeginScript();
	void OnEndScript();
	void OnDamage();
	void OnBreak();
	void OnBeginScript();
	void LoadScriptAsync(int Priority);
	bool IsValidScript();
	bool IsLoadScriptCompleted();
};


// Class Arise.AriseScriptSaveData
// 0x00E8 (0x0110 - 0x0028)
class UAriseScriptSaveData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnNewGameEvent;                                           // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnExNewGameEvent;                                         // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSaveEvent;                                              // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLoadEvent;                                              // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FAriseScriptSaveDataInfo>            Info;                                                     // 0x0070(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TMap<struct FString, struct FScriptDelegate>       InheritEvent;                                             // 0x0080(0x0050) (ZeroConstructor)
	TArray<class UAriseScriptSaveDataChunk*>           ChunkArray;                                               // 0x00D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x30];                                      // 0x00E0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScriptSaveData");
		return ptr;
	}


	void RegisterParameter();
	void RegisterInheritEvent(const struct FString& ParamName, const struct FScriptDelegate& Event);
	bool K2_FindChunk(const struct FString& ParamName, class UAriseScriptSaveDataChunk** Chunk);
	bool FindChunk_INT64(const struct FString& ParamName, class UAriseScriptSaveDataChunk_INT64** Chunk);
	bool FindChunk_INT32(const struct FString& ParamName, class UAriseScriptSaveDataChunk_INT32** Chunk);
	bool FindChunk_FLOAT(const struct FString& ParamName, class UAriseScriptSaveDataChunk_FLOAT** Chunk);
	bool FindChunk_BOOL(const struct FString& ParamName, class UAriseScriptSaveDataChunk_BOOL** Chunk);
};


// Class Arise.AriseScriptSaveDataLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseScriptSaveDataLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScriptSaveDataLibrary");
		return ptr;
	}


	class UAriseScriptSaveData* STATIC_FindScriptSaveObject(const struct FString& ScriptName);
	class UAriseScriptSaveData* STATIC_CreateScriptSaveObject(const struct FString& ScriptName, class UClass* SaveGameClass);
};


// Class Arise.AriseScriptSaveDataChunk
// 0x0020 (0x0048 - 0x0028)
class UAriseScriptSaveDataChunk : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScriptSaveDataChunk");
		return ptr;
	}


	EAriseScriptSaveDataType K2_GetType();
	struct FAriseScriptSaveDataInfo K2_GetInfo();
	void K2_Clear();
};


// Class Arise.AriseScriptSaveDataChunk_BOOL
// 0x0010 (0x0058 - 0x0048)
class UAriseScriptSaveDataChunk_BOOL : public UAriseScriptSaveDataChunk
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScriptSaveDataChunk_BOOL");
		return ptr;
	}


	void SetValue(int Index, bool Value);
	bool GetValue(int Index);
};


// Class Arise.AriseScriptSaveDataChunk_FLOAT
// 0x0010 (0x0058 - 0x0048)
class UAriseScriptSaveDataChunk_FLOAT : public UAriseScriptSaveDataChunk
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScriptSaveDataChunk_FLOAT");
		return ptr;
	}


	void SetValue(int Index, float Value);
	float GetValue(int Index);
};


// Class Arise.AriseScriptSaveDataChunk_INT32
// 0x0010 (0x0058 - 0x0048)
class UAriseScriptSaveDataChunk_INT32 : public UAriseScriptSaveDataChunk
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScriptSaveDataChunk_INT32");
		return ptr;
	}


	void SetValue(int Index, int Value);
	int GetValue(int Index);
};


// Class Arise.AriseScriptSaveDataChunk_INT64
// 0x0010 (0x0058 - 0x0048)
class UAriseScriptSaveDataChunk_INT64 : public UAriseScriptSaveDataChunk
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScriptSaveDataChunk_INT64");
		return ptr;
	}

};


// Class Arise.AriseScrollBar
// 0x0510 (0x0610 - 0x0100)
class UAriseScrollBar : public UWidget
{
public:
	struct FScrollBarStyle                             WidgetStyle;                                              // 0x0100(0x04D0) (Edit, BlueprintVisible)
	class USlateWidgetStyleAsset*                      Style;                                                    // 0x05D0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bAlwaysShowScrollbar;                                     // 0x05D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOrientation>                          Orientation;                                              // 0x05D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x05DA(0x0002) MISSED OFFSET
	struct FVector2D                                   Thickness;                                                // 0x05DC(0x0008) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05E4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUserScrolled;                                           // 0x05E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x18];                                      // 0x05F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseScrollBar");
		return ptr;
	}


	void SetState(float InOffsetFraction, float InThumbSizeFraction);
};


// Class Arise.AriseShareControlManager
// 0x0008 (0x0030 - 0x0028)
class UAriseShareControlManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseShareControlManager");
		return ptr;
	}

};


// Class Arise.AriseSlider
// 0x02D8 (0x03D8 - 0x0100)
class UAriseSlider : public UWidget
{
public:
	float                                              Value;                                                    // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	struct FScriptDelegate                             ValueDelegate;                                            // 0x0108(0x0014) (ZeroConstructor, InstancedReference)
	struct FSliderStyle                                WidgetStyle;                                              // 0x0118(0x0230) (Edit, BlueprintVisible)
	TEnumAsByte<EOrientation>                          Orientation;                                              // 0x0348(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	struct FLinearColor                                SliderBarColor;                                           // 0x034C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                SliderHandleColor;                                        // 0x035C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               IndentHandle;                                             // 0x036C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               Locked;                                                   // 0x036D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x036E(0x0002) MISSED OFFSET
	float                                              StepSize;                                                 // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsFocusable;                                              // 0x0374(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0375(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMouseCaptureBegin;                                      // 0x0378(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMouseCaptureEnd;                                        // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnControllerCaptureBegin;                                 // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnControllerCaptureEnd;                                   // 0x03A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnValueChanged;                                           // 0x03B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x03C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseSlider");
		return ptr;
	}


	void SetValue(float InValue);
	void SetStepSize(float InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetLocked(bool InValue);
	void SetIndentHandle(bool InValue);
	float GetValue();
};


// Class Arise.AriseSoundSystem
// 0x00F0 (0x0418 - 0x0328)
class AAriseSoundSystem : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0328(0x0008) MISSED OFFSET
	class AAriseSoundBGM*                              PfBGMActor;                                               // 0x0330(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class AAriseSoundBGM*                              BtlBGMActor;                                              // 0x0338(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TMap<struct FString, struct FMapBGMData>           MapBGMDataMap;                                            // 0x0340(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<struct FString>                             ChangeBattleBgmList;                                      // 0x0390(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	class AAriseSpatialAudioActor*                     SpatialAudioActor;                                        // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x70];                                      // 0x03A8(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseSoundSystem");
		return ptr;
	}


	void OnScenarioCounterChanged(int counter, int Prev);
};


// Class Arise.AriseSpatialAudioActor
// 0x0008 (0x0330 - 0x0328)
class AAriseSpatialAudioActor : public AActor
{
public:
	class UAriseListenerComponent*                     SpatialAudioComponent;                                    // 0x0328(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseSpatialAudioActor");
		return ptr;
	}


	void SetWallDistanceLimit(float InLimit);
	void SetRTPCInterpTime(float InTime);
	void SetReverbeTestVolume(float InVolume);
	void SetRayRadius(float Radius);
	void SetRayAngle(float Angle);
	void SetIsProcessing(bool Flag);
	void SetIsDebugDraw(bool Flag);
	void SetDensityRayRadius(float InRadius);
	void SetDensityRayNoHitDepthRate(float InRate);
	void SetAriseListnerComponent(class UAriseListenerComponent* InSpatialAudioComponent);
	bool IsProcessing();
	bool IsDebugDraw();
	float GetWallDistanceLimit();
	float GetRTPCInterpTime();
	float GetReverbeTestVolume();
	float GetRayRadius();
	float GetRayAngle();
	float GetDensityRayRadius();
	float GetDensityRayNoHitDepthRate();
};


// Class Arise.AriseSplineMeshActor
// 0x0000 (0x0328 - 0x0328)
class AAriseSplineMeshActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseSplineMeshActor");
		return ptr;
	}

};


// Class Arise.AriseStaffrollName
// 0x0000 (0x0208 - 0x0208)
class UAriseStaffrollName : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseStaffrollName");
		return ptr;
	}


	void STATIC_SetStaffName(class UAriseTextWidget* TextBlock, const struct FSlateColor& SlateColor, bool IsStrFlag, const struct FString& StrId, const struct FString& StrDebug, bool* IsSuccess);
	bool STATIC_SetDictionaryStaffName(class UAriseTextWidget* TextBlock, const struct FSlateColor& SlateColor, const struct FString& StrId, const struct FString& StrDebug);
	void STATIC_PartsScreenMovePos(TArray<class UUserWidget*> PartsArray, float MovePosY, float ScreenRemovePosY, TArray<class UUserWidget*>* RemovePartsArray);
	void STATIC_DeleteEmptyNameArray(TArray<struct FString> InNameArray, TArray<bool> InStrFlagArray, TArray<struct FString>* OutInNameArray, TArray<bool>* OutStrFlagArray);
};


// Class Arise.AriseBlueprintAssetObject
// 0x0000 (0x0028 - 0x0028)
class UAriseBlueprintAssetObject : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseBlueprintAssetObject");
		return ptr;
	}


	void NotifyInstantiate();
};


// Class Arise.AriseStatusContainer
// 0x0080 (0x00A8 - 0x0028)
class UAriseStatusContainer : public UAriseBlueprintAssetObject
{
public:
	TMap<struct FName, class UDataTable*>              TableContainer;                                           // 0x0028(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAriseStatusHandle*>                  StatusHandles;                                            // 0x0078(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0088(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseStatusContainer");
		return ptr;
	}


	void OnGoBackTitle();
	void OnEndLoad(EAriseSaveResult Result);
	TArray<class UAriseStatusHandle*> STATIC_GetStatusHandles(class UObject* WorldContextObject);
	class UAriseStatusHandle* STATIC_GetStatusHandle(class UObject* WorldContextObject, EArisePartyID OwnerId);
};


// Class Arise.AriseParameterObserver
// 0x0018 (0x0040 - 0x0028)
class UAriseParameterObserver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnParameterChanged;                                       // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseParameterObserver");
		return ptr;
	}

};


// Class Arise.AriseStatusHandle
// 0x00D8 (0x0100 - 0x0028)
class UAriseStatusHandle : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnParameterChanged;                                       // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       OwnerId;                                                  // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	EArisePartyID                                      PartyId;                                                  // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x17];                                      // 0x0049(0x0017) MISSED OFFSET
	TArray<class UAriseParameterObserver*>             ParameterObservers;                                       // 0x0060(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0070(0x0010) MISSED OFFSET
	TArray<struct FName>                               ArtsSkillLabels;                                          // 0x0080(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               BasicSkillLabels;                                         // 0x0090(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               PassiveSkillLabels;                                       // 0x00A0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               EquipmentSkillLabels;                                     // 0x00B0(0x0010) (ZeroConstructor, Transient)
	TArray<class UBtlCommonSkillScriptBase*>           SkillHandles;                                             // 0x00C0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	class ABtlManager*                                 BattleManager;                                            // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ABtlCharacterBase*                           BattleUnit;                                               // 0x00D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x20];                                      // 0x00E0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseStatusHandle");
		return ptr;
	}


	void SetParameterValueByIndex(int Index, float Value);
	void SetParameterValue(const struct FName& Label, float Value);
	void OnEquipmentChanged(EArisePartyID PartyId);
	void OnEndBattle();
	void OnCookEnableChanged(int SkillID, bool bEnable, bool bAfter);
	void OnBeginBattle();
	void OnArtifactChanged(const struct FName& SkillLabel, bool Enabled);
	void OnAliasChanged(EArisePartyID PartyId, const struct FName& SkillLabel, bool Enabled);
	float GetParameterValueByIndex(int Index);
	float GetParameterValue(const struct FName& Label, float DefaultValue);
	class UAriseParameterObserver* GetParameterObserver(const struct FName& Label);
	struct FString GetParameterDetail(int Index);
	int GetParameterCount();
	struct FName GetOwnerId();
};


// Class Arise.StatusImageDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UStatusImageDatabase : public UXmlDatabaseBase
{
public:
	struct FStatusImageDataList                        Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.StatusImageDatabase");
		return ptr;
	}

};


// Class Arise.AriseSystemSaveDataFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseSystemSaveDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseSystemSaveDataFunctionLibrary");
		return ptr;
	}


	bool STATIC_SetSavedVoiceLanguage(ESavedVoiceLanguage Value);
	bool STATIC_SetSavedPPAgreement(ESavedPPAgreement Value);
	bool STATIC_SetSavedEULAAgreement(ESavedEulaAgreement Value);
	bool STATIC_SetSavedCEBankAgreement(ESavedCEBankAgreement Value);
	bool STATIC_SetPreviewNewIcon_ZGU(int Index, ESavedDlcCheckIcon Value);
	bool STATIC_SetPreviewNewIcon_YRA(int Index, ESavedDlcCheckIcon Value);
	bool STATIC_SetPreviewNewIcon_SIO(int Index, ESavedDlcCheckIcon Value);
	bool STATIC_SetPreviewNewIcon_NNA(int Index, ESavedDlcCheckIcon Value);
	bool STATIC_SetPreviewNewIcon_MNK(int Index, ESavedDlcCheckIcon Value);
	bool STATIC_SetPreviewNewIcon_ARI(int Index, ESavedDlcCheckIcon Value);
	bool STATIC_SetNoticeNewIcon(int Index, ESavedDlcCheckIcon Value);
	bool STATIC_SetNewsLastUpdateDate(int NewDate);
	bool STATIC_SetIsVisitDlcShop(bool Value);
	void STATIC_ResetAllDlcShopNewIcon();
	bool STATIC_IsNeedPPAgreement();
	bool STATIC_IsNeedEULAAgreement();
	bool STATIC_IsNeedCEBankAgreement();
	ESavedVoiceLanguage STATIC_GetSavedVoiceLanguage();
	ESavedPPAgreement STATIC_GetSavedPPAgreement();
	ESavedEulaAgreement STATIC_GetSavedEULAAgreement();
	ESavedCEBankAgreement STATIC_GetSavedCEBankAgreement();
	ESavedDlcCheckIcon STATIC_GetPreviewNewIcon_ZGU(int Index);
	ESavedDlcCheckIcon STATIC_GetPreviewNewIcon_YRA(int Index);
	ESavedDlcCheckIcon STATIC_GetPreviewNewIcon_SIO(int Index);
	ESavedDlcCheckIcon STATIC_GetPreviewNewIcon_NNA(int Index);
	ESavedDlcCheckIcon STATIC_GetPreviewNewIcon_MNK(int Index);
	ESavedDlcCheckIcon STATIC_GetPreviewNewIcon_ARI(int Index);
	ESavedDlcCheckIcon STATIC_GetNoticeNewIcon(int Index);
	int STATIC_GetNewsLastUpdateDate();
	bool STATIC_GetIsVisitDlcShop();
	ESavedDlcCheckIcon STATIC_GetDlcShopDisplayNewIcon(int NewsUpdateDate);
	void STATIC_DBM_EditSystemSaveData();
};


// Class Arise.AriseTactics
// 0x0000 (0x0028 - 0x0028)
class UAriseTactics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseTactics");
		return ptr;
	}


	bool STATIC_GetTacticsSet(ETacticsIndex Index, struct FAriseTacticsSet* OutData);
};


// Class Arise.AriseUIViewport
// 0x0000 (0x0028 - 0x0028)
class UAriseUIViewport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseUIViewport");
		return ptr;
	}


	int STATIC_GetZOrderValue(EAriseUIOrder Order, int Offset);
	void STATIC_AddToViewport(class UUserWidget* Widget, EAriseUIOrder ZOrder, int Offset);
};


// Class Arise.AriseUserSettings
// 0x0110 (0x0138 - 0x0028)
class UAriseUserSettings : public UObject
{
public:
	int                                                ScreenMode;                                               // 0x0028(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               IniFileExist;                                             // 0x002C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	int                                                Resolution;                                               // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                ResolutionX;                                              // 0x0034(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                ResolutionY;                                              // 0x0038(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               VerticalSync;                                             // 0x003C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	int                                                FramLimit;                                                // 0x0040(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               Bloom;                                                    // 0x0044(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	int                                                MotionBlur;                                               // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                DrawScale;                                                // 0x004C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                DrawDistanceNPC;                                          // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                DrawDistanceObject;                                       // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                DrawDistanceGrass;                                        // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                AntiAliasing;                                             // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                ShadowQuality;                                            // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                TextureQuality;                                           // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                EffectQuality;                                            // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PostProcessQuality;                                       // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               ScreenSpaceReflection;                                    // 0x0070(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               OcclusionCulling;                                         // 0x0071(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0072(0x0002) MISSED OFFSET
	int                                                AnisotropyFiltering;                                      // 0x0074(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                FontSize;                                                 // 0x0078(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               AmbientOcclusion;                                         // 0x007C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               VolumetricLighting;                                       // 0x007D(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               ScreenSpaceShadow;                                        // 0x007E(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               GlobalIllumination;                                       // 0x007F(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               DepthOfField;                                             // 0x0080(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               HighResolution;                                           // 0x0081(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0082(0x0002) MISSED OFFSET
	int                                                ToggleScreenMode;                                         // 0x0084(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowedResolutionX;                                      // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowedResolutionY;                                      // 0x008C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                FullScreenResolutionX;                                    // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                FullScreenResolutionY;                                    // 0x0094(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TMap<struct FName, int>                            KeyboardKeyAssignList;                                    // 0x0098(0x0050) (ZeroConstructor, Config)
	TMap<struct FName, int>                            MouseKeyAssignList;                                       // 0x00E8(0x0050) (ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseUserSettings");
		return ptr;
	}

};


// Class Arise.AriseUserWidget
// 0x0008 (0x0210 - 0x0208)
class UAriseUserWidget : public UUserWidget
{
public:
	bool                                               bTickEvenWhenPaused;                                      // 0x0208(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0209(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseUserWidget");
		return ptr;
	}


	void SetTickableWhenPaused(bool bTickableWhenPaused);
	bool GetTickableWhenPaused();
};


// Class Arise.AriseUtilityConsoleCommands
// 0x0000 (0x0028 - 0x0028)
class UAriseUtilityConsoleCommands : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseUtilityConsoleCommands");
		return ptr;
	}

};


// Class Arise.AriseWaypointComponent
// 0x0080 (0x0600 - 0x0580)
class UAriseWaypointComponent : public UPrimitiveComponent
{
public:
	struct FAriseWaypointTree                          Tree;                                                     // 0x0580(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	bool                                               bDrawDebug;                                               // 0x05A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x57];                                      // 0x05A9(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseWaypointComponent");
		return ptr;
	}


	void UpdateWaypoint();
};


// Class Arise.AriseWaypointFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAriseWaypointFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseWaypointFunctionLibrary");
		return ptr;
	}


	void STATIC_MakeWaypointTree(struct FAriseWaypointTree* Tree, struct FAriseWaypointNode* RootNode);
	void STATIC_InsertWaypointNode(const struct FAriseWaypointTree& Tree, int Index, struct FAriseWaypointNode* InsertedNode, bool* bSuccess);
	void STATIC_GetNodeFollowingList(const struct FAriseWaypointTree& Tree, int StartIndex, int EndIndex, TArray<int>* FollowingIndexList);
	void STATIC_GetLeafNodeIndexList(const struct FAriseWaypointTree& Tree, TArray<int>* IndexList);
	void STATIC_GetDataFromNode(const struct FAriseWaypointTree& Tree, const struct FAriseWaypointNode& Node, struct FAriseWaypointData* Data, bool* bSuccess);
	void STATIC_GetDataFromIndex(const struct FAriseWaypointTree& Tree, int Index, struct FAriseWaypointData* Data, bool* bSuccess);
	void STATIC_DeleteWaypointNode(const struct FAriseWaypointTree& Tree, int Index, struct FAriseWaypointNode* DeletedNode, bool* bSuccess);
	void STATIC_AddWaypointNode(const struct FAriseWaypointTree& Tree, int Index, struct FAriseWaypointNode* InsertedNode, bool* bSuccess);
};


// Class Arise.AriseWidgetInteractionComponent
// 0x0010 (0x0450 - 0x0440)
class UAriseWidgetInteractionComponent : public UWidgetInteractionComponent
{
public:
	bool                                               bConsider2DWidget;                                        // 0x0440(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0441(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseWidgetInteractionComponent");
		return ptr;
	}

};


// Class Arise.AriseWorldSettings
// 0x00F8 (0x0618 - 0x0520)
class AAriseWorldSettings : public AWorldSettings
{
public:
	bool                                               bBtlAgingMode;                                            // 0x0520(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bBtlPresetOverride;                                       // 0x0521(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0522(0x0006) MISSED OFFSET
	struct FName                                       BtlPresetLabel;                                           // 0x0528(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bBtlProfileOverride;                                      // 0x0530(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0531(0x0003) MISSED OFFSET
	struct FBtlDebugParameter                          BtlProfile;                                               // 0x0534(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, Config, GlobalConfig)
	int                                                BtlScenarioCounter;                                       // 0x0574(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	TArray<struct FAriseScenarioFlag_DatabaseLabel>    BtlScenarioFlagArray;                                     // 0x0578(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig)
	TArray<struct FBattleSandboxPartyParam>            BtlPartyList;                                             // 0x0588(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Config, GlobalConfig)
	TArray<struct FBattleSandboxGuestParam>            BtlGuestList;                                             // 0x0598(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig)
	TArray<struct FPFEncountSymbolGroupID>             BtlEncountGroup;                                          // 0x05A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig)
	int                                                BtlArenaID;                                               // 0x05B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x05BC(0x0004) MISSED OFFSET
	struct FPFEncountSymbolBattleID                    BtlMapID;                                                 // 0x05C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, Config, GlobalConfig)
	bool                                               IsForceRareUnit;                                          // 0x05D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bBtlTacticsPresetOverride;                                // 0x05D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x05D2(0x0006) MISSED OFFSET
	struct FBattleSandboxTacticsPreset                 TacticsPreset;                                            // 0x05D8(0x0010) (Edit, BlueprintVisible, Config, GlobalConfig)
	bool                                               bRetryBattleOverride;                                     // 0x05E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               IsRetryBattle;                                            // 0x05E9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bOverrideCostume;                                         // 0x05EA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData04[0x5];                                       // 0x05EB(0x0005) MISSED OFFSET
	TArray<struct FBattleSandboxCostumeV2>             OverrideCostumeParam2;                                    // 0x05F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Config, GlobalConfig)
	TArray<struct FString>                             BtlConsoleCommandArray;                                   // 0x0600(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig)
	bool                                               bEnSymEncountDisable;                                     // 0x0610(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bEnSymInvisible;                                          // 0x0611(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x0612(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseWorldSettings");
		return ptr;
	}


	void Save(const struct FString& Filename);
	void PartyList_InsertAriOnly();
	void PartyList_InsertAllMember();
	void PartyList_Default();
	void Load(const struct FString& Filename);
	void AriseWorldSettingsSignature__DelegateSignature(class AAriseWorldSettings* WorldSettings);
};


// Class Arise.ArtifactDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UArtifactDatabase : public UXmlDatabaseBase
{
public:
	struct FArtifactDataList                           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArtifactDatabase");
		return ptr;
	}


	bool IsEnableIndex_DataList(int Index);
};


// Class Arise.ArtifactSupport
// 0x0000 (0x0028 - 0x0028)
class UArtifactSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArtifactSupport");
		return ptr;
	}


	void STATIC_GetValidArtifactDataList(TArray<struct FArtifactData>* Datas);
	int STATIC_GetValidArtifactDataCount();
	TArray<struct FTriviaData> STATIC_GetTriviaDataList();
	struct FTriviaData STATIC_GetTriviaData(const struct FString& Label);
	void STATIC_GetHasArtifactDataList(TArray<struct FArtifactData>* Datas);
	int STATIC_GetHasArtifactDataCount();
	TArray<struct FArtifactData> STATIC_GetArtifactDataList();
	void STATIC_CheckArtifactLongchatFlag();
};


// Class Arise.ArtifactTriviaDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UArtifactTriviaDatabase : public UXmlDatabaseBase
{
public:
	struct FTriviaDataCollection                       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ArtifactTriviaDatabase");
		return ptr;
	}

};


// Class Arise.AsdlAsset
// 0x0008 (0x0030 - 0x0028)
class UAsdlAsset : public UObject
{
public:
	class UASAnimationSet*                             AnimationSetAsset;                                        // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AsdlAsset");
		return ptr;
	}

};


// Class Arise.AssortedLibrary
// 0x0000 (0x0028 - 0x0028)
class UAssortedLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AssortedLibrary");
		return ptr;
	}


	void STATIC_SetLabelName(const struct FString& Name, class AActor* Actor);
	int STATIC_Rsh(int A, int B);
	int STATIC_Lsh(int A, int B);
	int STATIC_K2_Digit(int Value, int Digit);
	bool STATIC_IsForceVisibleCamp();
	void STATIC_DrawTargetLocation(class AActor* Actor, const struct FVector& TargetLocation, bool bSuccess, float LifeTime);
	class APawn* STATIC_AriseSpawnAIFromClass(class UObject* WorldContextObject, class UClass* PawnClass, class UBehaviorTree* BehaviorTree, const struct FVector& Location, const struct FRotator& Rotation, bool bNoCollisionFail, class AActor* Owner);
	class UNavigationPath* STATIC_AriseFindPathToLocationSynchronously(class UObject* WorldContextObject, const struct FVector& PathStart, const struct FVector& PathEnd, bool bUsePathFinding, class AActor* PathfindingContext, class UClass* FilterClass);
};


// Class Arise.BattleDamageUIInterface
// 0x0000 (0x0028 - 0x0028)
class UBattleDamageUIInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleDamageUIInterface");
		return ptr;
	}


	void OpenPoisonDamage(int Number, bool IsEnemy, const struct FVector& Position);
	void OpenHeal(int Number, const struct FVector& Position);
	void OpenDamage(int Number, bool IsEnemy, bool IsCritical, bool IsWeak, bool IsResist, bool IsCore, bool IsCoreBreak, bool IsBoostBreak, const struct FVector& Position);
	bool IsUse();
};


// Class Arise.BattleDamageUIHostInterface
// 0x0000 (0x0028 - 0x0028)
class UBattleDamageUIHostInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleDamageUIHostInterface");
		return ptr;
	}


	TArray<class UUserWidget*> GetDamageWidgetList();
};


// Class Arise.BtlUserWidgetBase
// 0x0008 (0x0210 - 0x0208)
class UBtlUserWidgetBase : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0208(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUserWidgetBase");
		return ptr;
	}


	void ReceiveBattleTick(float Delta);
};


// Class Arise.BtlUserWidget
// 0x0028 (0x0238 - 0x0210)
class UBtlUserWidget : public UBtlUserWidgetBase
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0210(0x0020) MISSED OFFSET
	bool                                               bBattlePauseAtStopWidget;                                 // 0x0230(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBattlePause;                                             // 0x0231(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0232(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUserWidget");
		return ptr;
	}


	void BattleResume();
	void BattlePause();
};


// Class Arise.BtlCommonViewBase
// 0x0008 (0x0240 - 0x0238)
class UBtlCommonViewBase : public UBtlUserWidget
{
public:
	class UBtlCommonViewModelBase*                     ViewModel;                                                // 0x0238(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCommonViewBase");
		return ptr;
	}


	void UnBindEvent();
	void SetViewModel(class UBtlCommonViewModelBase* NewViewModel);
	bool IsAsyncConstructComplated();
	void BindEvent();
	void AsyncConstruct();
	void ApplyBattleUIOption(const struct FBattleHudOption& Option);
};


// Class Arise.BtlDynamicSpaceWidgetBase
// 0x0020 (0x0260 - 0x0240)
class UBtlDynamicSpaceWidgetBase : public UBtlCommonViewBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0240(0x0008) MISSED OFFSET
	bool                                               PlayerViewportRelative;                                   // 0x0248(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               RemoveDPIScale;                                           // 0x0249(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ScreenClamp;                                              // 0x024A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x024B(0x0001) MISSED OFFSET
	struct FVector2D                                   ScreenClampOffset;                                        // 0x024C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	int                                                ZOrder;                                                   // 0x0254(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                bInViewport;                                              // 0x0258(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x025C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDynamicSpaceWidgetBase");
		return ptr;
	}


	void SetScreenClamp(bool bNewClamp);
	struct FVector GetTargetWorldPosition();
	class UCanvasPanelSlot* GetTargetSlot();
	class APlayerController* GetTargetController();
};


// Class Arise.BtlCommonViewSpaceWidgetBase
// 0x0000 (0x0260 - 0x0260)
class UBtlCommonViewSpaceWidgetBase : public UBtlDynamicSpaceWidgetBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCommonViewSpaceWidgetBase");
		return ptr;
	}

};


// Class Arise.BtlStatusViewBase
// 0x0010 (0x0248 - 0x0238)
class UBtlStatusViewBase : public UBtlUserWidget
{
public:
	class UBtlStatusViewModelBase*                     ViewModel;                                                // 0x0238(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBtlStatusViewModelBase*                     NewChangeViewModel;                                       // 0x0240(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatusViewBase");
		return ptr;
	}


	void UnBindEvent();
	void SetViewModel(class UBtlStatusViewModelBase* NewViewModel);
	void Received_ChangeViewModelRequest();
	void ChangeViewModelRequest(class UBtlStatusViewModelBase* NewViewModel);
	void BindEvent();
};


// Class Arise.BtlStatusViewSpaceWidgetBase
// 0x0020 (0x0268 - 0x0248)
class UBtlStatusViewSpaceWidgetBase : public UBtlStatusViewBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0248(0x0008) MISSED OFFSET
	bool                                               PlayerViewportRelative;                                   // 0x0250(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               RemoveDPIScale;                                           // 0x0251(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ScreenClamp;                                              // 0x0252(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0253(0x0001) MISSED OFFSET
	struct FVector2D                                   ScreenClampOffset;                                        // 0x0254(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	int                                                ZOrder;                                                   // 0x025C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                bInViewport;                                              // 0x0260(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0264(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatusViewSpaceWidgetBase");
		return ptr;
	}


	void SetScreenClamp(bool bNewClamp);
	struct FVector GetTargetWorldPosition();
	class UCanvasPanelSlot* GetTargetSlot();
	class APlayerController* GetTargetController();
};


// Class Arise.BtlFadeWidgetBase
// 0x0040 (0x0250 - 0x0210)
class UBtlFadeWidgetBase : public UBtlUserWidgetBase
{
public:
	struct FScriptMulticastDelegate                    OnFadeOutStarted;                                         // 0x0210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadeOutFinished;                                        // 0x0220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadeInStarted;                                          // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadeInFinished;                                         // 0x0240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlFadeWidgetBase");
		return ptr;
	}


	void PlayFadeOut();
	void PlayFadeLoop();
	void PlayFadeIn();
	bool IsFadeLoop();
	void InternalOnFadeOutStarted();
	void InternalOnFadeOutFinished();
	void InternalOnFadeInStarted();
	void InternalOnFadeInFinished();
	class UWidgetAnimation* GetFadeOutAnimation();
	class UWidgetAnimation* GetFadeLoopAnimation();
	class UWidgetAnimation* GetFadeInAnimation();
};


// Class Arise.BattleGaugeViewBase
// 0x00C0 (0x02F8 - 0x0238)
class UBattleGaugeViewBase : public UBtlUserWidget
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0238(0x0028) MISSED OFFSET
	bool                                               bIsAnimation;                                             // 0x0260(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0261(0x0007) MISSED OFFSET
	class UProgressBar*                                CacheProgressBar;                                         // 0x0268(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UMaterialInstanceDynamic*                    CacheBarMaterial;                                         // 0x0270(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       ApplyLineColorParameterName;                              // 0x0278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ApplyLineParameterName;                                   // 0x0280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ApplyBaseColorParameterName;                              // 0x0288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bColorAnimation;                                          // 0x0290(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bPinchAnimationZeroValueStop;                             // 0x0291(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0292(0x0002) MISSED OFFSET
	float                                              PinchPercent;                                             // 0x0294(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                PinchColor;                                               // 0x0298(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                BaseColor;                                                // 0x02A8(0x0010) (Edit, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBeginWorkPinch;                                         // 0x02B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndWorkPinch;                                           // 0x02C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGaugeAnimationStart;                                    // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGaugeAnimationFinish;                                   // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleGaugeViewBase");
		return ptr;
	}


	bool TickNormal(float InDelta);
	bool TickColor(float InDelta);
	void TickAnimation(float InDeltaTime);
	void SetMaxValue(int NewMaxValue);
	void SetGauge(int Value);
	void RefreshPinch(bool bIsPrevPinch);
	void Received_OnGaugeAnimationFinish();
	void Received_OnEndWorkPinch();
	void Received_OnBeginWorkPinch();
	void PreviewPrePreConstruct();
	void PlayGaugeColorAnimation(int NewValue, const struct FLinearColor& NewColor, float AnimationWait);
	void PlayGaugeAnimation(int NewValue);
	void InitializeGaugeAnimation(int NewValue, int NewMaxValue, const struct FLinearColor& NewColor, float AnimationWait, bool bIsColorAnim);
	void InitializeGauge(int NewValue, int NewMaxValue);
	int GetWorkValue();
	float GetWorkPercent();
	int GetValue();
	void GetNativeUiParts(class UProgressBar** OutProgressBar, class UMaterialInstanceDynamic** OutBarMaterial);
	int GetMaxValue();
	float GetCurrentPercent();
	void ApplyPercent(float Percent);
	void ApplyLineColor(const struct FLinearColor& LineColor);
	void ApplyLine(float Value);
	void ApplyBaseColor(const struct FLinearColor& NewBaseColor);
};


// Class Arise.BattleSingleGaugeViewBase
// 0x0000 (0x02F8 - 0x02F8)
class UBattleSingleGaugeViewBase : public UBattleGaugeViewBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleSingleGaugeViewBase");
		return ptr;
	}

};


// Class Arise.BattleMultiGaugeViewBase
// 0x0010 (0x0308 - 0x02F8)
class UBattleMultiGaugeViewBase : public UBattleGaugeViewBase
{
public:
	TArray<class UProgressBar*>                        ProgressBarArray;                                         // 0x02F8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleMultiGaugeViewBase");
		return ptr;
	}


	void Received_PassThroughSection(int GaugeNumber, bool IsPlus);
	void Received_ApplyPercentMulti(int Index, float NewValue);
	void Received_ApplyLineMulti(int Index, float NewValue);
	int GetGaugeNum();
	void ApplyVectorEx(const struct FLinearColor& NewColor, const struct FName& ParameterValue);
	void ApplyScolarEx(float NewValue, const struct FName& ParameterValue);
	void ApplyPercentMulti(float NewValue);
	void ApplyPercentEx(float NewValue);
	void ApplyLineMulti(float NewValue);
	void ApplyLineEx(float NewValue, const struct FName& ParameterValue);
};


// Class Arise.BattleHudHelperLibrary
// 0x0000 (0x0028 - 0x0028)
class UBattleHudHelperLibrary : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleHudHelperLibrary");
		return ptr;
	}


	struct FBattleHudNotifyText STATIC_MakeReplaceNotifyText(int ReplaceID, const struct FScriptDelegate& GetReplaceNotifyText);
	struct FBattleHudNotifyText STATIC_MakeDictionaryNotifyText(const struct FDictionaryText& Text);
	struct FText STATIC_GetNotifyText(const struct FBattleHudNotifyText& Text);
};


// Class Arise.BtlBasicManagerBase
// 0x0008 (0x0330 - 0x0328)
class ABtlBasicManagerBase : public AInfo
{
public:
	class UBtlEventDispatcher*                         EventDispatcher;                                          // 0x0328(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlBasicManagerBase");
		return ptr;
	}

};


// Class Arise.BattleUIManager
// 0x0218 (0x0548 - 0x0330)
class ABattleUIManager : public ABtlBasicManagerBase
{
public:
	TArray<class UBtlCommonViewBase*>                  CommonViewList;                                           // 0x0330(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UBtlCommonViewSpaceWidgetBase*>       BattleSpaceWidgets;                                       // 0x0340(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<TScriptInterface<class UBtlWorldWidgetInterface>> WorldWidget;                                              // 0x0350(0x0010) (ZeroConstructor, Transient)
	TArray<class UUserWidget*>                         DamageWidget;                                             // 0x0360(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UUserWidget*>                         SpellCastWidget;                                          // 0x0370(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UBtlUserWidgetBase*>                  BattleTickWidget;                                         // 0x0380(0x0010) (ExportObject, ZeroConstructor, Transient)
	TScriptInterface<class UBattleDamageUIInterface>   DamageHostWidget;                                         // 0x0390(0x0030) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBtlCommonViewModelBase*                     CommonViewModel;                                          // 0x03A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UBtlStatusViewModelBase*>             StatusViewModelArray;                                     // 0x03A8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	int                                                TickCounter;                                              // 0x03B8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	TArray<struct FBattleDelayDamge>                   DelayDamageArray;                                         // 0x03C0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x50];                                      // 0x03D0(0x0050) UNKNOWN PROPERTY: MapProperty Arise.BattleUIManager.CommonViewWidgetAssets
	unsigned char                                      UnknownData02[0x28];                                      // 0x0420(0x0028) UNKNOWN PROPERTY: SoftClassProperty Arise.BattleUIManager.NewDamageWidgetAsset
	EAriseUIOrder                                      DamageOrder;                                              // 0x0448(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0449(0x0003) MISSED OFFSET
	int                                                DamageOrderOffset;                                        // 0x044C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DamageWidgetGenerateNum;                                  // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData05[0x28];                                      // 0x0454(0x0028) UNKNOWN PROPERTY: SoftClassProperty Arise.BattleUIManager.SpellCastWidgetAsset
	int                                                SpellCastWidgetGenerateNum;                               // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	class UClass*                                      CommonViewModelClass;                                     // 0x0488(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      StatusViewModelClass;                                     // 0x0490(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBtlHudVisible_DatatableLabel               HudVisiblePresetLabel;                                    // 0x0498(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	struct FBtlHudVisible_DatatableLabel               DefaultHudVisiblePresetLabel;                             // 0x04A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBtlHudVisible_DatatableLabel               DebugHudAllHiddenVisiblePresetLabel;                      // 0x04A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                               bForceDebugHudAllHiddenVisiblePresetLabel;                // 0x04B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x04B1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPreOpen;                                                // 0x04B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOpen;                                                   // 0x04C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClose;                                                  // 0x04D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeVisiblePreset;                                    // 0x04E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginArtsMystic;                                        // 0x04F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArtsMystic;                                          // 0x0508(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginArtsStrikeSmash;                                   // 0x0518(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArtsStrikeSmash;                                     // 0x0528(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHeal;                                                   // 0x0538(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleUIManager");
		return ptr;
	}


	void ViewStart();
	void ViewFinish();
	void UpdateWorldWidgetPosition();
	void ShowLockon();
	void SetVisiblePresetDefault();
	void SetVisiblePreset(const struct FBtlHudVisible_DatatableLabel& Preset);
	void SetLookOn(bool bEnable);
	void SetHitDamageData(int TotalHit, int TotalDamage);
	void SetForceDebugHudAllHiddenVisiblePresetLabel(bool NewFlag);
	void STATIC_SetBattleHudVisiblePresetDefault();
	void STATIC_SetBattleHudVisiblePreset(const struct FBtlHudVisible_DatatableLabel& Preset);
	void RemoveWorldWidget(const TScriptInterface<class UBtlWorldWidgetInterface>& SpaceWidget);
	void PlayBattleShortChat(class UMessageData* MessageData, const struct FName& OverrideIconLabel);
	void OnEndChangeTarget();
	void OnDebugChangeProfile(const struct FString& ParameterName);
	void OnBeginChangeTarget();
	void MinInitialize();
	bool IsFinishAnimation();
	void Initialize();
	void InfoNotifyMysticDirectoryText(const struct FDictionaryText& Text, EBtlUnitGroup Group);
	void InfoNotifyMysticArtsText(const struct FBtlArts_XmlDatatableLabel& Text, EBtlUnitGroup Group);
	void InfoNotifyDirectoryText(const struct FDictionaryText& Text, EBtlUnitGroup Group, EBattleHudNotifyTextPriority Priority);
	void InfoNotifyArtsText(const struct FBtlArts_XmlDatatableLabel& Text, EBtlUnitGroup Group);
	void InfoModifyText(const struct FModifiedText& Text, EBtlUnitGroup Group, EBattleHudNotifyTextPriority Priority);
	void HideLockon();
	class UUserWidget* GetUsableSpellCastWidget();
	class APlayerController* GetActiveController();
	void Finalize();
	void EndInfoNotifyArtsText();
	void EndArtsStrikeSmash();
	void EndArtsMystic();
	void CreatePostStatusViewModel(class UBtlStatusViewModelBase* ViewModel);
	void CreatePlaceWidgets();
	class UBtlCommonViewBase* CreateDamageWidgets();
	class UBtlCommonViewBase* CreateCommonViewByWidget(class UClass* WidgetClass);
	class UBtlCommonViewBase* CreateCommonView(const struct FName& Label);
	void CloseBattleShortChat(bool bImmediate);
	void BeginArtsStrikeSmash();
	void BeginArtsMystic();
	void STATIC_BattleUISphereDistToLine(const struct FVector& SphereOrigin, float SphereRadius, const struct FVector& LineOrigin, const struct FVector& LineDir, struct FVector* OutClosestPoint);
	void AddWorldWidget(const TScriptInterface<class UBtlWorldWidgetInterface>& SpaceWidget);
	void AddDelayDamageWidget(int Number, bool IsEnemy, bool IsCritical, bool IsWeak, bool IsResist, bool IsCore, bool IsCoreBreak, bool IsBoostBreak, bool IsPoison, const struct FVector& Position);
};


// Class Arise.BattleHudNativeFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBattleHudNativeFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleHudNativeFunctionLibrary");
		return ptr;
	}


	void STATIC_BattleNative_SetHpInternal(TArray<class UProgressBar*> ProgressBars, float Rate, int SPMax);
};


// Class Arise.BtlResultViewModelBase
// 0x0050 (0x0078 - 0x0028)
class UBtlResultViewModelBase : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnClose;                                                  // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCloseAnimationFinish;                                   // 0x0038(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnLevelupAnimationFinish;                                 // 0x0048(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnPlayShortChat;                                          // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayContinuousBonus;                                    // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlResultViewModelBase");
		return ptr;
	}


	float GetTime();
	float GetRpBonus();
	int GetRpBase();
	int GetRp();
	int GetRecoveryTp();
	int GetPrevTp();
	int GetPrevMaxTp();
	int GetPartyRecoveryHp(EArisePartyID PartyId);
	TArray<EArisePartyID> GetPartyList();
	int GetPartyLevel(EArisePartyID PartyId);
	int GetPartyHp(EArisePartyID PartyId);
	int GetPartyExp(EArisePartyID PartyId);
	int GetMaxTp();
	float GetExpBonus();
	int GetExpBase();
	int GetExp();
	TArray<struct FBtlResultDropItem> GetDropItems();
	float GetAddBattleBonusRate();
	float GetAddBattleBonusBase();
	float GetAddBattleBonus();
};


// Class Arise.BtlResultViewBase
// 0x0018 (0x0220 - 0x0208)
class UBtlResultViewBase : public UUserWidget
{
public:
	class UBtlResultViewModelBase*                     ViewModel;                                                // 0x0208(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPlayShortCat;                                           // 0x0210(0x0010) (ZeroConstructor, InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlResultViewBase");
		return ptr;
	}


	void UnBindEvent();
	void SetViewModel(class UBtlResultViewModelBase* NewViewModel);
	void SetChildViewModel(TArray<class UBtlResultViewBase*> ChildView);
	void OnPlayShortCatSignature__DelegateSignature();
	void BindEvent();
};


// Class Arise.BtlResultViewModel
// 0x00A8 (0x0120 - 0x0078)
class UBtlResultViewModel : public UBtlResultViewModelBase
{
public:
	struct FBattleResultHudInfomation                  ResultHudInfomation;                                      // 0x0078(0x00A8) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlResultViewModel");
		return ptr;
	}

};


// Class Arise.BtlStatusViewModelBase
// 0x0320 (0x0348 - 0x0028)
class UBtlStatusViewModelBase : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnPreOpen;                                                // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOpen;                                                   // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClose;                                                  // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeArtsAir;                                          // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeArtsIndex;                                        // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeVisiblePreset;                                    // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDead;                                                   // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReiseDead;                                              // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRecoveryHp;                                             // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDamageHp;                                               // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeHp;                                               // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeSp;                                               // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeSpInternal;                                       // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeOverlimitTime;                                    // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginOverlimit;                                         // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndOverlimit;                                           // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotUseArts;                                             // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeAbnormal;                                         // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginAbnormal;                                          // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndAbnormal;                                            // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeTimeAbnormal;                                     // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeAttribute;                                        // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeElementType;                                      // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginBuff;                                              // 0x0198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndBuff;                                                // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginUniqueSkill;                                       // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndUniqueSkill;                                         // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeUniqueSkillTime;                                  // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotUseUniqueSkill;                                      // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeUniqueSkillValue;                                 // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndUniqueAction;                                        // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeStrike;                                           // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMaxStrike;                                              // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOutMaxStrike;                                           // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUseStrike;                                              // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUseStrikeSmash;                                         // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginChangeMemberRequest;                               // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeStrikeSmash;                                      // 0x0278(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeStrikeSmashConditionRate;                         // 0x0288(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeMemberWaitRate;                                   // 0x0298(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndChangeMemberRequest;                                 // 0x02A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginSpecialStrike;                                     // 0x02B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndSpecialStrike;                                       // 0x02C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotUseStrike;                                           // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRecoilCharacter;                                        // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeSpellCastTimeRate;                                // 0x02F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPreBeginSpellCastDelegate;                              // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginSpellCastDelegate;                                 // 0x0318(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndSpellCastDelegate;                                   // 0x0328(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class ABtlCharacterBase>            WeakCharacter;                                            // 0x0338(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBtlEventDispatcher*                         EventDispatcher;                                          // 0x0340(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatusViewModelBase");
		return ptr;
	}


	void SetCharacter(class ABtlCharacterBase* NewCharacter);
	void PreOpen();
	void Open();
	void OnEndSpellCast();
	void OnBeginSpellCast();
	void K2_Initialize();
	void K2_Fainalize();
	bool IsUseableArts(const struct FName& ArtsLabel);
	bool IsUnknownHp();
	bool IsUniqueSkillActive();
	bool IsStrikeSmash();
	bool IsStrikeFull();
	bool IsStrikeAble();
	bool IsReceiveSmashCondition();
	bool IsPlayerOperation();
	bool IsOverlimit();
	bool IsMysticLearned();
	bool IsMomentaryRush();
	bool IsEnableSuperAvoid();
	bool IsEnableFlying();
	bool IsEnableArmor();
	bool IsDead();
	bool IsBreakSuperAvoid();
	bool IsBreakRush();
	bool IsBreakFlying();
	bool IsBreakArmor();
	bool IsAvailableStrikeAttack();
	bool IsAir();
	struct FVector GetWorldPosition();
	int GetUniqueSkillValueMax();
	int GetUniqueSkillValue();
	struct FVector GetTargetWorldPosition();
	int GetTargetCursorLayout();
	float GetStrikeRate();
	float GetSPInternal();
	float GetSpellCastRate();
	struct FVector GetSpellCastLocation();
	int GetSP();
	float GetSmashConditionRate();
	struct FVector GetPlayerWorldPosition();
	EPCOrder GetPcOrder();
	EArisePartyID GetPartyId();
	class ABtlCharacterBase* GetOwnerCharacter();
	float GetOverlimitRate();
	struct FText GetName();
	float GetMaxSPInternal();
	int GetMaxSP();
	int GetMaxHp();
	int GetLevel();
	int GetHp();
	EBtlElementType GetElementType();
	struct FDictionaryText GetDName();
	float GetAbnormalValue(EBattleHudAbnormalType AbnormalType);
	TArray<EBattleHudAbnormalType> GetAbnormalType();
	float GetAbnormalTimePercent(EBattleHudAbnormalType AbnormalType);
	void Fainalize();
	void Close();
};


// Class Arise.BtlCommonViewModelBase
// 0x0330 (0x0358 - 0x0028)
class UBtlCommonViewModelBase : public UObject
{
public:
	TArray<class UBtlStatusViewModelBase*>             FrontMemberViewModels;                                    // 0x0028(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	TArray<class UBtlStatusViewModelBase*>             PlayerSortFrontMemberViewModels;                          // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	TArray<class UBtlStatusViewModelBase*>             BackMemberViewModels;                                     // 0x0048(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	class UBtlStatusViewModelBase*                     MenuTemporaryTarget;                                      // 0x0058(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBtlEventDispatcher*                         EventDispatcher;                                          // 0x0060(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPreOpen;                                                // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOpen;                                                   // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClose;                                                  // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeVisiblePreset;                                    // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleMenuStart;                                        // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleMenuEnd;                                          // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangePlayer;                                           // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeMember;                                           // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStrikeSwitch;                                           // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeTp;                                               // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotUseArtsForTp;                                        // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHitCombo;                                               // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDictionaryText;                                         // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnModifyText;                                             // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnArtsText;                                               // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInspirationArts;                                        // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMysticDictionaryText;                                   // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMysticArtsText;                                         // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArtsText;                                            // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleShortChat;                                        // 0x0198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCloseBattleShortChat;                                   // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAbortBattleShortChat;                                   // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginArtsMystic;                                        // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginChangeTarget;                                      // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeTarget;                                           // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndChangeTarget;                                        // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeTargetLost;                                       // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLockon;                                                 // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnlockon;                                               // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeEscapeRate;                                       // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginEscape;                                            // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndEscape;                                              // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInterruptionEscape;                                     // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeItemIntervalRate;                                 // 0x0278(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginItemInterval;                                      // 0x0288(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndItemInterval;                                        // 0x0298(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginCrisis;                                            // 0x02A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCrisis;                                              // 0x02B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginTutorial;                                          // 0x02C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSuccessTutorial;                                        // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeTutorialCount;                                    // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartedTutorialStartAnimation;                          // 0x02F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedTutorialStartAnimation;                         // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartedTutorialSuccessAnimation;                        // 0x0318(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedTutorialSuccessAnimation;                       // 0x0328(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginSpecialStrike;                                     // 0x0338(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUsedSpecialStrike;                                      // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCommonViewModelBase");
		return ptr;
	}


	void UpdateViewModels();
	void PreOpen();
	void Open();
	bool IsPlayingTutorialSuccessAnimation();
	void Initialize();
	int GetTp();
	class UBtlStatusViewModelBase* GetTarget();
	class UBtlStatusViewModelBase* GetPlayer();
	int GetMaxTp();
	float GetItemIntervalRate();
	TArray<class UBtlStatusViewModelBase*> GetFrontMemberByPlayerOrder(bool IsIgnoreOperation);
	TArray<class UBtlStatusViewModelBase*> GetFrontMember(bool IsIgnoreOperation);
	float GetEscapeRate();
	TArray<class UBtlStatusViewModelBase*> GetBoss();
	TArray<class UBtlStatusViewModelBase*> GetBackMember();
	void Fainalize();
	void Close();
	bool BattleChangeCharacterTopPrev();
	bool BattleChangeCharacterTopNext();
};


// Class Arise.GameSceneController
// 0x0020 (0x0048 - 0x0028)
class UGameSceneController : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class AGameMode*                                   GameMode;                                                 // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ESceneControllerState                              SceneState;                                               // 0x0040(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	ESceneControllerState                              SceneNextState;                                           // 0x0041(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	ESceneControllerWorkState                          WorkState;                                                // 0x0042(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bExecuteLatentActionForTick;                              // 0x0043(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.GameSceneController");
		return ptr;
	}


	void ShiftNextState();
	void SetNewState(ESceneControllerState Current, ESceneControllerState Next, ESceneControllerWorkState work);
	bool IsPausePossibleState();
	bool IsEnableSystemPause();
	bool IsAssetLoaded();
	bool CanDestroy();
	void BPE_Wakeup(unsigned char PrevScene);
	void BPE_Tick(float DeltaTime);
	void BPE_Sleep(unsigned char nextScene);
	void BPE_Initialize(ESceneInitializeMode initMode);
	void BPE_Finalize(ESceneFinalizeReason finalizeReason);
};


// Class Arise.BattleSceneController
// 0x0038 (0x0080 - 0x0048)
class UBattleSceneController : public UGameSceneController
{
public:
	class ABtlManager*                                 BattleManager;                                            // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBattleSceneEnd;                                         // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      BattleEncountNameWidgetClass;                             // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UUserWidget*                                 BattleEncountNameWidget;                                  // 0x0068(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData)
	struct FString                                     BattleBehavirTreeAssetsRootDir;                           // 0x0070(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleSceneController");
		return ptr;
	}


	void DestoryEncountGroupWidget();
	void CreateEncountGroupWidget();
	void BattleSceneEndEvent__DelegateSignature();
};


// Class Arise.BtlIconWidget
// 0x0010 (0x0220 - 0x0210)
class UBtlIconWidget : public UBtlUserWidgetBase
{
public:
	class UMaterialInstanceDynamic*                    TargetMaterial;                                           // 0x0210(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       IconParameterName;                                        // 0x0218(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlIconWidget");
		return ptr;
	}


	void SetIconNo(float IconNo);
	class UImage* GetTargetImage();
};


// Class Arise.BtlWorldWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class UBtlWorldWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlWorldWidgetInterface");
		return ptr;
	}


	void UpdatePosition();
	struct FVector GetWorldPosition();
	class UCanvasPanelSlot* GetMoveSlot();
	class APlayerController* GetController();
	bool CalcScreenPosition(struct FVector2D* ResultPosition);
};


// Class Arise.BinaryConvertImage
// 0x0078 (0x0250 - 0x01D8)
class UBinaryConvertImage : public UImage
{
public:
	struct FString                                     BaseFilePath;                                             // 0x01D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     ParamName;                                                // 0x01E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               LoadingVisible;                                           // 0x01F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFixedToTextureSize;                                      // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1E];                                      // 0x01FA(0x001E) MISSED OFFSET
	class UTexture2D*                                  UseTexture;                                               // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0220(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BinaryConvertImage");
		return ptr;
	}


	void ReleaseImage();
	void LoadBinaryData();
	bool IsLoading();
	bool ConvertBinaryToImage(TArray<unsigned char> srcBuffer);
	void ChangeImage(const struct FString& Filename);
};


// Class Arise.BootSceneController
// 0x0000 (0x0048 - 0x0048)
class UBootSceneController : public UGameSceneController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BootSceneController");
		return ptr;
	}


	void StartLogo();
	void StartLogin();
	void Start();
	void STATIC_SetStartupLogo(bool bStartupLogo);
	void STATIC_SetStartupAutoSaveDisplay(bool B);
	void STATIC_SetCurrentVoiceFromSystemSaveData();
	void STATIC_SetCurrentVoice(const struct FString& Culture);
	bool STATIC_IsStartupLogo();
	bool STATIC_IsStartupAutoSaveDisplay();
	bool STATIC_IsSetVoiceLanguage();
	bool STATIC_IsNeedCESAHeadsup();
	void EndLogo();
};


// Class Arise.BootSceneControllerEvent
// 0x0008 (0x0330 - 0x0328)
class ABootSceneControllerEvent : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0328(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BootSceneControllerEvent");
		return ptr;
	}


	void StartFirstLogin();
	void StartDLCCheck();
	void Start();
	void ShowFirstLogin(int ControllerId);
	void SetupCurrentUser();
	bool IsEnded();
	void EndLogin();
	bool EndDLCCheck();
	void End();
};


// Class Arise.BoxPrimitiveComponent
// 0x0040 (0x05C0 - 0x0580)
class UBoxPrimitiveComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      DrawColor;                                                // 0x0580(0x0004) (Edit, IsPlainOldData)
	struct FVector                                     BoxExtent;                                                // 0x0584(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  Transform;                                                // 0x0590(0x0030) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BoxPrimitiveComponent");
		return ptr;
	}

};


// Class Arise.BsdlAsset
// 0x0008 (0x0030 - 0x0028)
class UBsdlAsset : public UObject
{
public:
	class UBlendSpaceBase*                             BlendSpaceAsset;                                          // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BsdlAsset");
		return ptr;
	}

};


// Class Arise.BTD_BtlBPBase
// 0x0010 (0x00B0 - 0x00A0)
class UBTD_BtlBPBase : public UBTDecorator_BlueprintBase
{
public:
	struct FString                                     Describe;                                                 // 0x00A0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BTD_BtlBPBase");
		return ptr;
	}


	bool IsDebugInput(const struct FKey& Key);
	bool IsDebugExecute();
	int GetExecutionNumber();
	struct FString GetExecuteBehavior(class AAIController* AIController, const struct FString& AssetName);
};


// Class Arise.BtlAliasDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UBtlAliasDatabase : public UXmlDatabaseBase
{
public:
	struct FBtlAliasDatabaseRow                        Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAliasDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.BtlArenaDatabase
// 0x0020 (0x01D8 - 0x01B8)
class UBtlArenaDatabase : public UXmlDatabaseBase
{
public:
	struct FBtlArenaDatabaseRow                        Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlArenaDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.BtlStatusBuffBase
// 0x0020 (0x0048 - 0x0028)
class UBtlStatusBuffBase : public UObject
{
public:
	TWeakObjectPtr<class UBtlStatusComponent>          Owner;                                                    // 0x0028(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FString                                     Label;                                                    // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	bool                                               bNearBuff;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatusBuffBase");
		return ptr;
	}


	void Tick(float DeltaTime);
	bool IsEnable();
	class UBtlUnitScript* GetOwnerUnitScript();
	struct FName GetOwnerUnitID();
	class ABtlCharacterBase* GetOwnerUnit();
	void EndPlay();
	void BeginPlay();
};


// Class Arise.BtlStatusBuffSimple
// 0x0010 (0x0058 - 0x0048)
class UBtlStatusBuffSimple : public UBtlStatusBuffBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatusBuffSimple");
		return ptr;
	}

};


// Class Arise.BtlSkillDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UBtlSkillDatabase : public UXmlDatabaseBase
{
public:
	struct FBtlSkillDatabaseRow                        Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSkillDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.BtlActionProcessor
// 0x0338 (0x0430 - 0x00F8)
class UBtlActionProcessor : public UActorComponent
{
public:
	float                                              JumpVelocity;                                             // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReactVelocity;                                            // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnStateChange;                                            // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAirArtsChange;                                          // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginCancelRange;                                       // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCancelRange;                                         // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnArtsRequest;                                            // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArts;                                                // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0xD8];                                      // 0x0160(0x00D8) MISSED OFFSET
	struct FName                                       NowMagic;                                                 // 0x0238(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                NowItem;                                                  // 0x0240(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                NormalAttackCombo;                                        // 0x0244(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                NormalAirAttackCombo;                                     // 0x0248(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x024C(0x0004) MISSED OFFSET
	class ABtlCharacterBase*                           Owner;                                                    // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0258(0x0008) MISSED OFFSET
	class UASAnimationSet*                             BattleArtsRoot;                                           // 0x0260(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UBtlActionQuery*>                     ReserveQueryList;                                         // 0x0268(0x0010) (ZeroConstructor)
	class UBtlActionQuery*                             StateBeginAcceptQuery;                                    // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UBtlActionQuery*>                     ProcessingQueryList;                                      // 0x0280(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x58];                                      // 0x0290(0x0058) MISSED OFFSET
	struct FBtlArtsHandle                              NowArtsHandle;                                            // 0x02E8(0x0020) (Edit, DisableEditOnTemplate, EditConst)
	TArray<struct FBtlArtsHandle>                      PlayedArts;                                               // 0x0308(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TArray<struct FBtlArtsHandle>                      ComboArts;                                                // 0x0318(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TMap<struct FName, struct FUsedArtsInfo>           UsedArts;                                                 // 0x0328(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TMap<int, int>                                     UsedItem;                                                 // 0x0378(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TArray<struct FActionHittedUnit>                   Hitted;                                                   // 0x03C8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TMap<struct FBtlArtsHandle, struct FActionArtsTurnTargetInfo> ArtsTurnTargetSvaed;                                      // 0x03D8(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0428(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlActionProcessor");
		return ptr;
	}


	struct FString ToString();
	void SetUseAirStep(bool bEnable);
	void SetUseAirJump(bool bEnable);
	void SetRootMotionSequence_SelectArts(bool bOverride, bool bEnableRootMotion, const struct FName& SequenceName);
	void SetRootMotionSequence_Arts(bool bEnable);
	bool SetRootMotionSequence(const struct FName& KeyName, bool bEnable);
	void SetNowMagic(const struct FName& Label);
	void SetNowItem(int ItemID);
	void SetNowArts(const struct FBtlArtsHandle& Label);
	void SetEnableFlashRaid(bool bEnable, float TrueSec);
	void SetAirArtsChange_KeepArts(bool on);
	struct FActionCancelParam SetActionCancelParam(const struct FActionCancelParam& Param, bool NotifyChanged);
	void ResetNormalAttack();
	void ResetNormalAirAttack();
	void ResetFacial(float InBlendTime);
	class UBtlActionQuery* RequestArtsByInput(int ArtsIndex, int ArtsSlotIndex, struct FBtlArtsHandle* NewArtsHandle);
	class UBtlActionQuery* PlayWalk(const struct FVector& WorldDirection, bool DirectionLock);
	class UBtlActionQuery* PlayTurnToLocation(const struct FVector& WorldLocation);
	class UBtlActionQuery* PlayTurn(float Yaw);
	class UBtlActionQuery* PlayStep(const struct FVector& WorldDirection, bool bBackStep);
	class UBtlActionQuery* PlayRun(const struct FVector& WorldDirection, bool DirectionLock);
	class UBtlActionQuery* PlayReact();
	class UBtlActionQuery* PlayMove(const struct FVector& WorldDirection, float Scale, bool DirectionLock, bool GuardEnd, bool DamageEnd);
	class UBtlActionQuery* PlayMagic(const struct FName& Label, bool IgnoreArtsCost, bool IgnoreSharingCost, struct FBtlArtsHandle* NewArtsHandle);
	class UBtlActionQuery* PlayJump();
	class UBtlActionQuery* PlayItem(int ItemID);
	class UBtlActionQuery* PlayIdle(bool bForce);
	class UBtlActionQuery* PlayGuardStart();
	class UBtlActionQuery* PlayGuardEnd();
	class UBtlActionQuery* PlayFall(float FallVelocity);
	class UBtlActionQuery* PlayDown(bool IsUnique, bool IsForward, bool IsDownSecOverride, float DownSec);
	class UBtlActionQuery* PlayDead();
	class UBtlActionQuery* PlayDamage(class ABtlCharacterBase* Attacker, const struct FVector& ReceiveDirection, float RecoilTime, bool GuardBreak);
	class UBtlActionQuery* PlayBrake(const struct FName& ArtsLabel);
	class UBtlActionQuery* PlayBlow(class ABtlCharacterBase* Attacker, const struct FVector& WorldDirection, float Power, bool IsMighty, bool IsDownSecOverride, float DownSec);
	class UBtlActionQuery* PlayArtsMagic(const struct FName& Label, struct FBtlArtsHandle* NewArtsHandle);
	class UBtlActionQuery* PlayArts(const struct FName& Label, bool IgnoreArtsCost, bool IgnoreSharingCost, struct FBtlArtsHandle* NewArtsHandle);
	class UBtlActionQuery* PlayArise();
	class UBtlActionQuery* PlayAdvent();
	void OnEndSubBattle();
	void OnAnimStateEnd(const struct FString& StateName);
	void OnAirArtsChangeRaw(bool IsAir);
	bool IsUsableTpCheck(const struct FName& Label);
	bool IsUsableSpMaxCheck(const struct FName& Label);
	bool IsUsableSpCheck(const struct FName& Label);
	bool IsUsableMysticSecond();
	bool IsReserveQueryClass(class UClass* QueryClass);
	bool IsReserveMagic();
	bool IsReserveGuardEnd();
	bool IsReservedCancelAction();
	bool IsReserveAttack();
	bool IsReserveArtsLabel(const struct FName& ArtsLabel);
	bool IsPlayStrikeAttack();
	bool IsPlayingArtsQueryState(const struct FBtlArtsHandle& ArtsHandle, bool bIsCheckInlucdeReserve);
	bool IsPlayingArts(const struct FBtlArtsHandle& ArtsHandle, bool bIsCheckInlucdeReserve);
	bool IsPlayFlashRaid();
	bool IsOnGround();
	bool IsNormalAttackComboCheck(const struct FName& NormalAttackLabel);
	bool IsMove();
	bool IsIdle();
	bool IsHittedUnit(const struct FBtlArtsHandle& ArtsHandle, class ABtlCharacterBase* Unit);
	bool IsHittedAny(const struct FBtlArtsHandle& ArtsHandle);
	bool IsAttack();
	bool IsArtsMagicGetSomeEffectAny(const struct FName& Label, bool bCheckVanguardOnly);
	bool IsArtsMagicGetSomeEffect(const struct FName& Label, class ABtlCharacterBase* Target);
	bool IsActiveMagic(const struct FName& Label);
	int GetUnuseLackCost(const struct FName& Label);
	int GetSavedPlayArtsMax();
	struct FName GetPlayedArts(int PrevDepth);
	class ABtlCharacterBase* GetOwnerUnit();
	struct FVector GetOnNavLocation();
	struct FVector GetOnFloorLocation();
	float GetOnFloorDistance();
	EBattleActionState GetNowState();
	struct FName GetNowMagic();
	int GetNowItem();
	struct FBtlArtsHandle GetNowArtsHandle();
	struct FName GetNowArts();
	int GetNormalAttackCombo(bool IsAir);
	struct FVector GetFootLocation();
	bool GetCurrentAnimTime(float* CurrentTime, float* TotalTime);
	EActionCriticalStatus GetCriticalStatus(const struct FBtlArtsHandle& ArtsHandle, class ABtlCharacterBase* DmgUnit);
	TArray<struct FName> GetComboArtsOnlyAttackExcludeNormal();
	int GetComboArtsOnlyAttackCount();
	TArray<struct FName> GetComboArtsOnlyAttack();
	struct FActionCancelParam GetActionCancelParam();
	struct FBtlArtsHandle GenerateArtsHandle(const struct FName& ArtsLabel);
	void EnableFacialFlags(bool on);
	bool EnableAirStepHeight();
	bool EnableAirArtsHeight();
	void ClearSavedArts();
	void ClearQueryAll();
	void ClearQuery(class UClass* QueryClass);
	void ClearPlayedArts();
	void ClearHittedUnit();
	void ClearComboArts();
	void ClearActionCancelParam(bool NotifyChanged);
	void ChangeStateForce(EBattleActionState State);
	void ChangeFacialType(EBtlFacialType InFacialType, float InBlendTime, float InWeight);
	void ChangeFacial(const struct FString& InPresetName, float InBlendTime, float InWeight);
	bool CanTransitionState(EBattleActionState State);
	bool CanPlayFlashRaid();
	bool CanPlayArtsMagicHud(const struct FName& Label);
	bool CanPlayArtsMagic(const struct FName& Label);
	void CancelAttack();
	void AddHittedUnit(const struct FBtlArtsHandle& ArtsHandle, class ABtlCharacterBase* Unit);
};


// Class Arise.BtlActionQuery
// 0x0070 (0x0098 - 0x0028)
class UBtlActionQuery : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnReserve;                                                // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAccept;                                                 // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotAccept;                                              // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComplete;                                               // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInterrupt;                                              // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0078(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlActionQuery");
		return ptr;
	}


	float SetReserveSec(float Sec);
	int SetPriority(int Priority);
	bool SetForce(bool bForce);
	bool SetFallCheck(bool bFallCheck);
	void SetBlendType(EBtlAnimationBlendType Type);
	bool SetAlwaysInterruption(bool bForce);
	bool IsReserved();
	bool IsQueryEnd();
	bool IsProcessing();
	bool IsNotAccepted();
	bool IsJustAccept();
	bool IsInterrupted();
	bool IsFailedEnd();
	bool IsCompleted();
	float GetReserveSec();
	int GetPriority();
	bool GetForce();
	bool GetFallCheck();
	EBtlAnimationBlendType GetBlendType();
	bool GetAlwaysInterruption();
	void CancelReserve();
	void BtlActionQuerySignature__DelegateSignature(class UBtlActionQuery* ActionQuery);
};


// Class Arise.BtlMoveQuery
// 0x0010 (0x00A8 - 0x0098)
class UBtlMoveQuery : public UBtlActionQuery
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0098(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMoveQuery");
		return ptr;
	}

};


// Class Arise.BtlJumpQuery
// 0x0008 (0x00A0 - 0x0098)
class UBtlJumpQuery : public UBtlActionQuery
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlJumpQuery");
		return ptr;
	}

};


// Class Arise.BtlStepQuery
// 0x0010 (0x00A8 - 0x0098)
class UBtlStepQuery : public UBtlActionQuery
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0098(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStepQuery");
		return ptr;
	}

};


// Class Arise.BtlTurnQuery
// 0x0008 (0x00A0 - 0x0098)
class UBtlTurnQuery : public UBtlActionQuery
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTurnQuery");
		return ptr;
	}

};


// Class Arise.BtlGuardStartQuery
// 0x0000 (0x0098 - 0x0098)
class UBtlGuardStartQuery : public UBtlActionQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlGuardStartQuery");
		return ptr;
	}

};


// Class Arise.BtlGuardEndQuery
// 0x0000 (0x0098 - 0x0098)
class UBtlGuardEndQuery : public UBtlActionQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlGuardEndQuery");
		return ptr;
	}

};


// Class Arise.BtlDamageQuery
// 0x0020 (0x00B8 - 0x0098)
class UBtlDamageQuery : public UBtlActionQuery
{
public:
	class ABtlCharacterBase*                           Attacker;                                                 // 0x0098(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x00A0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDamageQuery");
		return ptr;
	}

};


// Class Arise.BtlBlowQuery
// 0x0020 (0x00B8 - 0x0098)
class UBtlBlowQuery : public UBtlActionQuery
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0098(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlBlowQuery");
		return ptr;
	}

};


// Class Arise.BtlDownQuery
// 0x0008 (0x00A0 - 0x0098)
class UBtlDownQuery : public UBtlActionQuery
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDownQuery");
		return ptr;
	}

};


// Class Arise.BtlReactQuery
// 0x0008 (0x00A0 - 0x0098)
class UBtlReactQuery : public UBtlActionQuery
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlReactQuery");
		return ptr;
	}

};


// Class Arise.BtlDeadQuery
// 0x0000 (0x0098 - 0x0098)
class UBtlDeadQuery : public UBtlActionQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDeadQuery");
		return ptr;
	}

};


// Class Arise.BtlArtsQuery
// 0x0028 (0x00C0 - 0x0098)
class UBtlArtsQuery : public UBtlActionQuery
{
public:
	struct FBtlArtsHandle                              ArtsHandle;                                               // 0x0098(0x0020) (BlueprintVisible, BlueprintReadOnly)
	bool                                               IsIgnoreArtsCost;                                         // 0x00B8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsIgnoreSharingCost;                                      // 0x00B9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00BA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlArtsQuery");
		return ptr;
	}

};


// Class Arise.BtlMagicQuery
// 0x0000 (0x00C0 - 0x00C0)
class UBtlMagicQuery : public UBtlArtsQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicQuery");
		return ptr;
	}

};


// Class Arise.BtlAttackQuery
// 0x0000 (0x00C0 - 0x00C0)
class UBtlAttackQuery : public UBtlArtsQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAttackQuery");
		return ptr;
	}

};


// Class Arise.BtlBrakeQuery
// 0x0000 (0x00C0 - 0x00C0)
class UBtlBrakeQuery : public UBtlAttackQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlBrakeQuery");
		return ptr;
	}

};


// Class Arise.BtlMysticQuery
// 0x0020 (0x00B8 - 0x0098)
class UBtlMysticQuery : public UBtlActionQuery
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0098(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMysticQuery");
		return ptr;
	}

};


// Class Arise.BtlAdventQuery
// 0x0000 (0x0098 - 0x0098)
class UBtlAdventQuery : public UBtlActionQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAdventQuery");
		return ptr;
	}

};


// Class Arise.BtlItemQuery
// 0x0008 (0x00A0 - 0x0098)
class UBtlItemQuery : public UBtlActionQuery
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlItemQuery");
		return ptr;
	}

};


// Class Arise.BtlAriseQuery
// 0x0000 (0x0098 - 0x0098)
class UBtlAriseQuery : public UBtlActionQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAriseQuery");
		return ptr;
	}

};


// Class Arise.BtlActorComponent
// 0x0000 (0x00F8 - 0x00F8)
class UBtlActorComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlActorComponent");
		return ptr;
	}


	class ABtlCharacterBase* GetOwnerUnit();
};


// Class Arise.BtlAIBlackboardNotifyData
// 0x0050 (0x0078 - 0x0028)
class UBtlAIBlackboardNotifyData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0028(0x0050) UNKNOWN PROPERTY: SetProperty Arise.BtlAIBlackboardNotifyData.Signals

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAIBlackboardNotifyData");
		return ptr;
	}


	bool IsSignal(const struct FName& Signal);
	void DestroySignal(const struct FName& Signal);
	void CreateSignalName(const struct FName& Signal);
	int CreateSignal(const struct FBtlAISignalData& Signal);
	void Clear();
};


// Class Arise.Btl_AIControllerBase
// 0x0208 (0x0640 - 0x0438)
class ABtl_AIControllerBase : public AAIController
{
public:
	struct FBtlTacticsRequestAI                        TacticsRequest;                                           // 0x0438(0x00B8) (BlueprintVisible, BlueprintReadOnly, Transient)
	class UBtlEventDispatcher*                         BattleEventDispatcher;                                    // 0x04F0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x04F8(0x0010) MISSED OFFSET
	float                                              Timer;                                                    // 0x0508(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaitTimer;                                                // 0x050C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInitialize;                                             // 0x0510(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0511(0x0007) MISSED OFFSET
	struct FBtlAIParameter                             AIParameter;                                              // 0x0518(0x0088) (Transient)
	bool                                               PauseIfPossible;                                          // 0x05A0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               AIMoving;                                                 // 0x05A1(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               AIMoveEnd;                                                // 0x05A2(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x05A3(0x0005) MISSED OFFSET
	TMap<struct FName, class UBehaviorTree*>           AIBehaviorAsset;                                          // 0x05A8(0x0050) (ZeroConstructor, Transient)
	bool                                               AIBehaviorAssetInitialized;                               // 0x05F8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x47];                                      // 0x05F9(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_AIControllerBase");
		return ptr;
	}


	void SetVariableArray(int Index, int Value);
	void SetTimerArray(int Index, float Time);
	void SetTargetGoal(const struct FVector& Value);
	void SetTargetDetect(class ABtlCharacterBase* Value);
	void SetTargetArts(class ABtlCharacterBase* Value);
	void SetRequestArts(const struct FName& Value);
	void SetRandom(int Value);
	void SetQueryTurn(class UBtlActionQuery* Value);
	void SetQueryStep(class UBtlActionQuery* Value);
	void SetQueryMove(class UBtlActionQuery* Value);
	void SetQueryItem(class UBtlActionQuery* Value);
	void SetQueryGuardStart(class UBtlActionQuery* Value);
	void SetQueryGuardEnd(class UBtlActionQuery* Value);
	void SetQueryArts(class UBtlActionQuery* Value);
	void SetPhase(int Value);
	void SetPauseIfPossible(bool on);
	void SetMovePointEqs(TEnumAsByte<EEnvQueryStatus> Value);
	void SetMovePoint(const struct FVector& Value);
	void SetIdlePoint(const struct FVector& Value);
	void SetFollowingPlayer(bool on);
	void SetBehaviorAsset(const struct FName& InjectionTag, class UBehaviorTree* BehaviorAsset);
	void SetAIMoving(bool on);
	void RequestAIMoveEnd();
	bool IsTacticsRequest_NoAction();
	bool IsTacticsRequest_Any();
	bool IsBehaviorAssetEmpty();
	bool IsAIMoveEnd();
	bool IsAcceptedTacticsAction(int TacticsActionId);
	bool InitializeBehavior();
	int GetVariableArray(int Index);
	float GetTimerArray(int Index);
	struct FVector GetTargetGoal();
	class ABtlCharacterBase* GetTargetDetect();
	class ABtlCharacterBase* GetTargetArts();
	TArray<EBtlArtsAction> GetTacticsArtsAction();
	struct FName GetRequestArts();
	int GetRandom();
	class UBtlActionQuery* GetQueryTurn();
	class UBtlActionQuery* GetQueryStep();
	class UBtlActionQuery* GetQueryMove();
	class UBtlActionQuery* GetQueryItem();
	class UBtlActionQuery* GetQueryGuardStart();
	class UBtlActionQuery* GetQueryGuardEnd();
	class UBtlActionQuery* GetQueryArts();
	int GetPhase();
	bool GetPauseIfPossible();
	TEnumAsByte<EEnvQueryStatus> GetMovePointEqs();
	struct FVector GetMovePoint();
	struct FVector GetIdlePoint();
	bool GetFollowingPlayer();
	class UBehaviorTree* GetBehaviorAsset(const struct FName& InjectionTag);
	bool GetAIMoving();
	void ClearRequestAIMoveEnd();
	void ClearParameter();
	void ClearAcceptedTacticsActionList();
	void AcceptTacticsAction(int TacticsActionId);
};


// Class Arise.BtlAIManager
// 0x0008 (0x0030 - 0x0028)
class UBtlAIManager : public UObject
{
public:
	class UBtlAIBlackboardNotifyData*                  NotifyData;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAIManager");
		return ptr;
	}

};


// Class Arise.BtlAILibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlAILibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAILibrary");
		return ptr;
	}


	void STATIC_StopLogicAllUnit();
	void STATIC_SetupFirstTargetParty();
	void STATIC_SetupFirstTargetEnemy(class ABtlCharacterBase* EnemyUnit);
	void STATIC_SetFollowingPlayerAll(class UObject* WorldContextObject, bool bEnable);
	void STATIC_RestartLogicAllUnit();
	class UBtlAIBlackboardNotifyData* STATIC_GetNotifyData();
	TArray<struct FBtlActiveArts> STATIC_GetDetectArts(class ABtlCharacterBase* Target, float MinDistance, float MaxDistance);
};


// Class Arise.BtlAliasLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlAliasLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAliasLibrary");
		return ptr;
	}


	void STATIC_UnloadDatabase_Alias();
	void STATIC_SetItemCollectRatio(float InPercent);
	void STATIC_SetCounterJustBeforeLearn();
	void STATIC_ResetCounter();
	bool STATIC_PreCheckLearnAliasByLabel(const struct FString& InLabel);
	void STATIC_LoadDatabase_Alias();
	void STATIC_LearnAlias(int InID);
	bool STATIC_K2_GetSkillDataByID(int SkillID, struct FBtlSkillData* Data);
	bool STATIC_K2_GetSkillData(const struct FString& ID, struct FBtlSkillData* Data);
	bool STATIC_IsValidDatabase_Alias();
	bool STATIC_IsSpecificSkillLearnedName(class ABtlCharacterBase* Unit, const struct FString& SkillName);
	bool STATIC_IsSpecificSkillLearned(class ABtlCharacterBase* Unit, int SkillID);
	bool STATIC_IsSkillMystic(class ABtlCharacterBase* Unit);
	bool STATIC_IsLearnedLowAlias(const struct FBtlAliasData& Data);
	bool STATIC_IsActiveSkillNameEnable(class ABtlCharacterBase* Unit, const struct FString& SkillName);
	bool STATIC_IsActiveSkillEnable(class ABtlCharacterBase* Unit, int SkillID);
	float STATIC_GetUnitConvertedSkillValue(const struct FBtlSkillData& Data);
	float STATIC_GetSkillValueById(int SkillID, bool bUnitConversion);
	float STATIC_GetSkillValue(const struct FString& SkillLabel, bool bUnitConversion);
	int STATIC_GetSkillParameter_Int(class ABtlCharacterBase* Unit, const struct FString& SkillID);
	float STATIC_GetSkillParameter(class ABtlCharacterBase* Unit, const struct FString& SkillID);
	int STATIC_GetSkillIdFromArtsLabel(const struct FName& ArtsLabel);
	int STATIC_GetSkillIdByLabel(const struct FString& Label);
	void STATIC_GetSkillDataString(const struct FBtlSkillData& Data, struct FSkillDataString* Dictionary);
	bool STATIC_GetSkillData(const struct FString& ID, struct FBtlSkillData* Data);
	void STATIC_GetRandomSkillRealityList(int Reality, TArray<struct FBtlSkillData>* List);
	void STATIC_GetRandomSkillList(TArray<struct FBtlSkillData>* List);
	void STATIC_GetPassiveSkillParameterByID(class ABtlCharacterBase* Unit, int SkillID, float* Value, bool* Valid);
	void STATIC_GetPassiveSkillParameter(class ABtlCharacterBase* Unit, const struct FString& SkillID, float* Value, bool* Valid);
	void STATIC_GetLearnAlias(TArray<int>* OutIDs);
	void STATIC_GetAliasIdCharacter(EArisePartyID PartyId, TArray<int>* AliasIDs);
	int STATIC_GetAliasIDByLabel(const struct FString& InLabel);
	void STATIC_GetAliasDataString(const struct FBtlAliasData& Data, struct FAliasDataString* Dictionary);
	int STATIC_GetAliasDataSkillValue(int ID, int SkillNo);
	bool STATIC_GetAliasDataFromDLCName(const struct FString& DlcName, TArray<struct FBtlAliasData>* outList);
	bool STATIC_GetAliasDataByLabel(const struct FString& Label, struct FBtlAliasData* Data);
	bool STATIC_GetAliasData(int ID, struct FBtlAliasData* Data);
	void STATIC_GetAliasCharacter(EArisePartyID PartyId, TArray<struct FBtlAliasData>* Data);
	void STATIC_GetActiveSkillParameterByID(class ABtlCharacterBase* Unit, int SkillID, float* Value, bool* Valid);
	void STATIC_GetActiveSkillParameter(class ABtlCharacterBase* Unit, const struct FString& SkillID, float* Value, bool* Valid);
	void STATIC_GetActiveSkillID(EArisePartyID PartyId, TArray<int>* SkillIDs);
	bool STATIC_FindMenuSkillDataByID(int SkillID, struct FBtlSkillData* Data);
	bool STATIC_FindMenuSkillData(const struct FString& ID, struct FBtlSkillData* Data);
	int STATIC_ConvertSkillArtsID(int LearnArtsID);
	int STATIC_ConvertLearnArtsID(int SkillID);
};


// Class Arise.BtlAliasConsoleCommands
// 0x0000 (0x0028 - 0x0028)
class UBtlAliasConsoleCommands : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAliasConsoleCommands");
		return ptr;
	}


	void Alias_SetItemCollectRatio(float InPercent);
	void Alias_SetCounterJustBeforeLearn();
	void Alias_ResetCounter();
};


// Class Arise.BtlAnimCameraActor
// 0x0000 (0x1050 - 0x1050)
class ABtlAnimCameraActor : public AAriseAnimCameraActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimCameraActor");
		return ptr;
	}

};


// Class Arise.BtlAnimInstance
// 0x0140 (0x06A0 - 0x0560)
class UBtlAnimInstance : public UAriseAnimInstance
{
public:
	float                                              DamagePowerWeight;                                        // 0x0560(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DamageDirectionWeight;                                    // 0x0564(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TurnWeight;                                               // 0x0568(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BlowWeight;                                               // 0x056C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                AttackStateIndex;                                         // 0x0570(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               TransitionDBufferFlag;                                    // 0x0574(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsFaceUp;                                                 // 0x0575(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsDownUnique;                                             // 0x0576(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsMightyBlow;                                             // 0x0577(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ShotMagic;                                                // 0x0578(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bBackStep;                                                // 0x0579(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EBtlAnimationBlendType                             BlendType_Move;                                           // 0x057A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EBtlAnimationBlendType                             BlendType_Attack;                                         // 0x057B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EBtlAnimationBlendType                             BlendType_ActionQuery;                                    // 0x057C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x057D(0x0003) MISSED OFFSET
	class UCameraShake*                                CameraShakeInstanceTemporary;                             // 0x0580(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0588(0x0001) MISSED OFFSET
	EBattleActionState                                 NextAnimState;                                            // 0x0589(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x16];                                      // 0x058A(0x0016) MISSED OFFSET
	TMap<struct FString, class UActorComponent*>       AttachComponents;                                         // 0x05A0(0x0050) (ExportObject, ZeroConstructor, Transient)
	TMap<struct FString, class UObject*>               NotifyUserData;                                           // 0x05F0(0x0050) (ZeroConstructor, Transient)
	class UASAnimationSet*                             BattleCharacterAnimationSet;                              // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UASAnimationSet*                             RootAnimationSet;                                         // 0x0648(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TMap<class UObject*, struct FBtlAnimSpecialNodeMemory> SpecialMemoryArray;                                       // 0x0650(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimInstance");
		return ptr;
	}


	void OnAnimStateEndTick(const struct FString& StateName, TArray<struct FName> Tags);
	void OnAirArtsChange(bool IsAir);
};


// Class Arise.BtlAnimNotifyState_SectionAttachComponentBase
// 0x0040 (0x0070 - 0x0030)
class UBtlAnimNotifyState_SectionAttachComponentBase : public UAnimNotifyState
{
public:
	class UClass*                                      ComponentClass;                                           // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FTransform                                  Transform;                                                // 0x0040(0x0030) (Edit, BlueprintReadOnly, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_SectionAttachComponentBase");
		return ptr;
	}


	void Received_AttachComponent(class UActorComponent* NewComponent);
};


// Class Arise.BtlAnimNotifyState_AttackCapsuleCollision
// 0x0020 (0x0050 - 0x0030)
class UBtlAnimNotifyState_AttackCapsuleCollision : public UAnimNotifyState
{
public:
	struct FName                                       SocketName;                                               // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FBtlSphereCollisionInfo>             CollisionInfos;                                           // 0x0038(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      CollisionClass;                                           // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_AttackCapsuleCollision");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_CameraAnimation
// 0x0050 (0x0088 - 0x0038)
class UBtlAnimNotify_CameraAnimation : public UAnimNotify
{
public:
	class UCameraAnim*                                 CameraAnim;                                               // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Rate;                                                     // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Scale;                                                    // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BlendInTime;                                              // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x004C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLoop;                                                    // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRandomStartTime;                                         // 0x0051(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0052(0x0002) MISSED OFFSET
	float                                              Duration;                                                 // 0x0054(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	struct FViewTargetTransitionParams                 CameraBlendParameter;                                     // 0x005C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBtlCameraAnimStartParameter                StartParameter;                                           // 0x006C(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_CameraAnimation");
		return ptr;
	}


	struct FTransform GetRelativeTransform(class AActor* Target);
};


// Class Arise.BtlAnimNotifyState_CameraShake
// 0x0028 (0x0058 - 0x0030)
class UBtlAnimNotifyState_CameraShake : public UAnimNotifyState
{
public:
	class UClass*                                      ShakeClass;                                               // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Scale;                                                    // 0x0038(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x003C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FRotator                                    UserPlaySpaceRot;                                         // 0x0040(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               EnableDistanceAttenuation;                                // 0x004C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              FarthestDistance;                                         // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              NearestRate;                                              // 0x0054(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_CameraShake");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_DefaultAttack
// 0x0068 (0x0098 - 0x0030)
class UBtlAnimNotifyState_DefaultAttack : public UAnimNotifyState
{
public:
	struct FAttackSphereParam                          ActualAttackParam;                                        // 0x0030(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              CollisionScale;                                           // 0x0080(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DefaultAttackID;                                          // 0x0084(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      SphereCollisionClass;                                     // 0x0088(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CapsuleCollisionClass;                                    // 0x0090(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_DefaultAttack");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_FlexibleNotify
// 0x0028 (0x0058 - 0x0030)
class UBtlAnimNotifyState_FlexibleNotify : public UAnimNotifyState
{
public:
	int                                                UserInteger;                                              // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              UserFloat;                                                // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     UserString;                                               // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FLinearColor                                UserColor;                                                // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_FlexibleNotify");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_GuardStart
// 0x0000 (0x0030 - 0x0030)
class UBtlAnimNotifyState_GuardStart : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_GuardStart");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_MetaFlexibleNotify
// 0x0028 (0x0058 - 0x0030)
class UBtlAnimNotifyState_MetaFlexibleNotify : public UAnimNotifyState
{
public:
	int                                                UserInteger;                                              // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              UserFloat;                                                // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     UserString;                                               // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FLinearColor                                UserColor;                                                // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_MetaFlexibleNotify");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_MomentaryFlying
// 0x0000 (0x0030 - 0x0030)
class UBtlAnimNotifyState_MomentaryFlying : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_MomentaryFlying");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_MomentaryRush
// 0x0000 (0x0030 - 0x0030)
class UBtlAnimNotifyState_MomentaryRush : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_MomentaryRush");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_MomentarySuperAvoid
// 0x0000 (0x0030 - 0x0030)
class UBtlAnimNotifyState_MomentarySuperAvoid : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_MomentarySuperAvoid");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_SphereBase
// 0x0050 (0x0080 - 0x0030)
class UBtlAnimNotifyState_SphereBase : public UAnimNotifyState
{
public:
	struct FAttackSphereParam                          ActualAttackParam;                                        // 0x0030(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_SphereBase");
		return ptr;
	}


	void Received_InitializeCreateComponent(class USphereComponent* SphereComponent);
	class USphereComponent* CreateSphereComponent(class USkeletalMeshComponent* MeshComp, class UClass* SphereClass, const struct FBtlSphereCollisionInfo& SphereInfo);
};


// Class Arise.BtlAnimNotifyState_SphereCollision
// 0x0020 (0x00A0 - 0x0080)
class UBtlAnimNotifyState_SphereCollision : public UBtlAnimNotifyState_SphereBase
{
public:
	struct FName                                       SocketName;                                               // 0x0080(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FBtlSphereCollisionInfo>             CollisionInfos;                                           // 0x0088(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      CollisionClass;                                           // 0x0098(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_SphereCollision");
		return ptr;
	}


	TArray<class USphereComponent*> GetCreatedCollisionComponents(class USkeletalMeshComponent* MeshComp);
};


// Class Arise.BtlAnimNotifyState_AttackSphereCollision
// 0x0000 (0x00A0 - 0x00A0)
class UBtlAnimNotifyState_AttackSphereCollision : public UBtlAnimNotifyState_SphereCollision
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_AttackSphereCollision");
		return ptr;
	}

};


// Class Arise.Btl_AnimNotifyState_TimedParticleEffect
// 0x0028 (0x0098 - 0x0070)
class UBtl_AnimNotifyState_TimedParticleEffect : public UAnimNotifyState_TimedParticleEffect
{
public:
	bool                                               bReferenceSurface;                                        // 0x0070(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FName                                       ReferenceSurfaceSocket;                                   // 0x0078(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EBtlSurfaceParticleSize                            SurfaceParticleSize;                                      // 0x0080(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	struct FName                                       SurfaceName;                                              // 0x0088(0x0008) (BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FColor                                      SurfaceColor;                                             // 0x0090(0x0004) (BlueprintReadOnly, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_AnimNotifyState_TimedParticleEffect");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_UserDataBase
// 0x0000 (0x0030 - 0x0030)
class UBtlAnimNotifyState_UserDataBase : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_UserDataBase");
		return ptr;
	}


	class UObject* GetUserData(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	class UObject* GenerateUserData(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
};


// Class Arise.BtlAnimNotify_ChangeFacial
// 0x0018 (0x0050 - 0x0038)
class UBtlAnimNotify_ChangeFacial : public UAnimNotify
{
public:
	struct FString                                     InPresetName;                                             // 0x0038(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	float                                              InBlendTime;                                              // 0x0048(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InWeight;                                                 // 0x004C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_ChangeFacial");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_ClothCheckTeleport
// 0x0008 (0x0040 - 0x0038)
class UBtlAnimNotify_ClothCheckTeleport : public UAnimNotify
{
public:
	bool                                               EnableTeleportCheck;                                      // 0x0038(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_ClothCheckTeleport");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_CreateMagicAssetBase
// 0x0078 (0x00B0 - 0x0038)
class UBtlAnimNotify_CreateMagicAssetBase : public UAnimNotify
{
public:
	struct FBtl_MagicSpawnParam                        SpawnOverrideParam;                                       // 0x0038(0x0038) (BlueprintReadOnly, Deprecated)
	struct FBtl_MagicSpawnLocationParam                SpawnOverrideLocationParam;                               // 0x0070(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBtl_MagicSpawnRotationParam                SpawnOverrideRotationParam;                               // 0x0090(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               bOverrideParam;                                           // 0x00A8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_CreateMagicAssetBase");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_CreateMagicAssetBase
// 0x0040 (0x0070 - 0x0030)
class UBtlAnimNotifyState_CreateMagicAssetBase : public UAnimNotifyState
{
public:
	struct FBtl_MagicSpawnLocationParam                SpawnOverrideLocationParam;                               // 0x0030(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBtl_MagicSpawnRotationParam                SpawnOverrideRotationParam;                               // 0x0050(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               bOverrideParam;                                           // 0x0068(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_CreateMagicAssetBase");
		return ptr;
	}


	void AddTask(class ABtlMagicActor* MagicActor, class UBtlMagicTask* NewTask, float StartTime, float Duration, bool IsAlwaysTask);
	void AddComplateTask(class ABtlMagicActor* MagicActor);
};


// Class Arise.BtlAnimNotify_PlayParticleEffect
// 0x0000 (0x00A0 - 0x00A0)
class UBtlAnimNotify_PlayParticleEffect : public UAnimNotify_PlayParticleEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_PlayParticleEffect");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_PlayVisualTask
// 0x0008 (0x0040 - 0x0038)
class UBtlAnimNotify_PlayVisualTask : public UAnimNotify
{
public:
	class UClass*                                      RunTask;                                                  // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_PlayVisualTask");
		return ptr;
	}

};


// Class Arise.BtlAnimNotifyState_PlayVisualTaskRange
// 0x0008 (0x0038 - 0x0030)
class UBtlAnimNotifyState_PlayVisualTaskRange : public UAnimNotifyState
{
public:
	class UClass*                                      RunTask;                                                  // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotifyState_PlayVisualTaskRange");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_SceneDarknessBegin
// 0x0008 (0x0040 - 0x0038)
class UBtlAnimNotify_SceneDarknessBegin : public UAnimNotify
{
public:
	float                                              DarknessIntensity;                                        // 0x0038(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DarknessInterval;                                         // 0x003C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_SceneDarknessBegin");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_SceneDarknessEnd
// 0x0008 (0x0040 - 0x0038)
class UBtlAnimNotify_SceneDarknessEnd : public UAnimNotify
{
public:
	float                                              Interval;                                                 // 0x0038(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_SceneDarknessEnd");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_VoiceBase
// 0x0000 (0x0038 - 0x0038)
class UBtlAnimNotify_VoiceBase : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_VoiceBase");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_AttackVoiceBase
// 0x0008 (0x0040 - 0x0038)
class UBtlAnimNotify_AttackVoiceBase : public UBtlAnimNotify_VoiceBase
{
public:
	struct FBtlArts_XmlDatatableLabel                  ArtsLabel;                                                // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_AttackVoiceBase");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_EventVoiceBase
// 0x0010 (0x0048 - 0x0038)
class UBtlAnimNotify_EventVoiceBase : public UBtlAnimNotify_VoiceBase
{
public:
	struct FBtlVoice_DatabaseLabel                     VoiceLabel;                                               // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_EventVoiceBase");
		return ptr;
	}

};


// Class Arise.BtlAnimNotify_NormalAttackVoiceBase
// 0x0000 (0x0038 - 0x0038)
class UBtlAnimNotify_NormalAttackVoiceBase : public UBtlAnimNotify_VoiceBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAnimNotify_NormalAttackVoiceBase");
		return ptr;
	}

};


// Class Arise.BtlAreaSpawner
// 0x0030 (0x0358 - 0x0328)
class ABtlAreaSpawner : public AActor
{
public:
	class ABtl_Location*                               Loc;                                                      // 0x0328(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TArray<class ALandscapeWallBase*>                  Walls;                                                    // 0x0330(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FBtlAreaSpawnEnemy>                  Enemies;                                                  // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	bool                                               bOverlapped;                                              // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0351(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAreaSpawner");
		return ptr;
	}

};


// Class Arise.BtlArtsManager
// 0x0000 (0x0028 - 0x0028)
class UBtlArtsManager : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlArtsManager");
		return ptr;
	}

};


// Class Arise.BtlArtsLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlArtsLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlArtsLibrary");
		return ptr;
	}


	int STATIC_NormalArtsToComboCount(const struct FName& ArtsLabel);
	bool STATIC_IsOtherAction(const struct FName& ArtsLabel);
	bool STATIC_IsNormalAttackTypeAny(EBtlArtsType ArtsType);
	bool STATIC_IsNormalAttackType(EBtlArtsType ArtsType);
	bool STATIC_IsNormalAttackAny(const struct FName& ArtsLabel);
	bool STATIC_IsNormalAttack(const struct FName& ArtsLabel);
	bool STATIC_IsNormalAirAttackType(EBtlArtsType ArtsType);
	bool STATIC_IsNormalAirAttack(const struct FName& ArtsLabel);
	bool STATIC_IsMysticByType(EBtlArtsType Type);
	bool STATIC_IsMystic(const struct FName& ArtsLabel);
	bool STATIC_IsMagicByType(EBtlArtsType Type);
	bool STATIC_IsMagic(const struct FName& ArtsLabel);
	bool STATIC_IsJumpAction(const struct FName& ArtsLabel);
	bool STATIC_IsItemAffectPartyAll(int ItemID);
	bool STATIC_IsGroundArtsType(EBtlArtsType ArtsType);
	bool STATIC_IsGroundArts(const struct FName& ArtsLabel);
	bool STATIC_IsFlashRaidByType(EBtlArtsType Type);
	bool STATIC_IsExecArtsRangeTarget(class ABtlCharacterBase* Owner, const struct FName& ArtsLabel, class ABtlCharacterBase* Other, bool EnableHeight, struct FBtlResultArtsRange* Result);
	bool STATIC_IsExecArtsAngle(class ABtlCharacterBase* Unit, const struct FName& ArtsLabel, class ABtlCharacterBase* Other);
	bool STATIC_IsBoostSmashByType(EBtlArtsType Type);
	bool STATIC_IsBoostSmash(const struct FName& ArtsLabel);
	bool STATIC_IsBoostAttackByType(EBtlArtsType Type);
	bool STATIC_IsBoostAttack(const struct FName& ArtsLabel);
	bool STATIC_IsAttackOnGuard(const struct FName& ArtsLabel);
	bool STATIC_IsArtsActionItem(int ItemID, EBtlArtsAction Action);
	bool STATIC_IsAirArtsType(EBtlArtsType ArtsType);
	bool STATIC_IsAirArts(const struct FName& ArtsLabel);
	float STATIC_GetPowerRateByUseCount_PartyID(EArisePartyID PartyId, const struct FName& ArtsLabel);
	float STATIC_GetPowerRateByUseCount(class ABtlCharacterBase* Unit, const struct FName& ArtsLabel);
	struct FString STATIC_GetJumpActionLabel(class ABtlCharacterBase* Owner);
	TArray<EBtlArtsAction> STATIC_GetItemToArtsAction(int ItemID);
	TArray<struct FName> STATIC_GetArtsLabel(const struct FName& UnitFilter, bool bIncludeMagic);
	bool STATIC_GetArtsData(const struct FName& ArtsLabel, struct FBtlArtsData* OutData);
	TArray<EAbnormalType> STATIC_GetArtsAbnormalType(const struct FName& ArtsLabel);
	bool STATIC_FindNormalAttack(const struct FName& UnitID, int Count, struct FBtlArtsData* OutData);
	bool STATIC_FindNormalAirAttack(const struct FName& UnitID, int Count, struct FBtlArtsData* OutData);
	bool STATIC_FindArtsDataFromType(const struct FName& UnitID, EBtlArtsType ArtsType, struct FBtlArtsData* OutData);
	TArray<struct FBtlArtsData> STATIC_FilterArtsDataFromType(const struct FName& UnitID, EBtlArtsType ArtsType);
};


// Class Arise.BtlSimulatorUserData
// 0x0008 (0x0030 - 0x0028)
class UBtlSimulatorUserData : public UAssetUserData
{
public:
	bool                                               IsMagicDevMode;                                           // 0x0028(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSimulatorUserData");
		return ptr;
	}

};


// Class Arise.BtlArtsSimulatorBase
// 0x0010 (0x0338 - 0x0328)
class ABtlArtsSimulatorBase : public AActor
{
public:
	class UTextRenderComponent*                        TextRender;                                               // 0x0328(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               bEnableTextRenderLookCamera;                              // 0x0330(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsMagicDevMode;                                           // 0x0331(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0332(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlArtsSimulatorBase");
		return ptr;
	}


	void SetUserData(class ABtlCharacterBase* Target);
	void SetSimulatorName(const struct FString& Name);
	struct FString Received_GetOpenAsset();
	void OpenArtsAsset();
	void OnBeginBattle_Simulator();
	bool GetBuildParam(class ABtlCharacterBase* Target, struct FAchCharacterBuildParameters* Params);
	void BtlSpawnPreComplate__DelegateSignature(class ABtlCharacterBase* SpawnCharacter);
};


// Class Arise.BtlArtsDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlArtsDataClass : public UXmlDatabaseBase
{
public:
	struct FBtlArtsDataList                            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlArtsDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BtlAssetMagicHandle
// 0x0000 (0x0080 - 0x0080)
class UBtlAssetMagicHandle : public UBtlAssetHandle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetMagicHandle");
		return ptr;
	}

};


// Class Arise.BtlAssetStrikeMainCutHandle
// 0x0000 (0x0080 - 0x0080)
class UBtlAssetStrikeMainCutHandle : public UBtlAssetHandle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetStrikeMainCutHandle");
		return ptr;
	}

};


// Class Arise.BtlAssetMysticHandle
// 0x0000 (0x0080 - 0x0080)
class UBtlAssetMysticHandle : public UBtlAssetHandle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetMysticHandle");
		return ptr;
	}

};


// Class Arise.BtlAssetUnitBundle
// 0x0018 (0x0088 - 0x0070)
class UBtlAssetUnitBundle : public UBtlAssetBundleBase
{
public:
	int                                                UnitDataIndex;                                            // 0x0070(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<int>                                        ArtsDataIndex;                                            // 0x0078(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetUnitBundle");
		return ptr;
	}


	void OnDatabaseKeyUpdated(const struct FString& DlcKey);
};


// Class Arise.BtlAssetEncountBundle
// 0x0000 (0x0070 - 0x0070)
class UBtlAssetEncountBundle : public UBtlAssetBundleBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetEncountBundle");
		return ptr;
	}

};


// Class Arise.BtlAssetRequiredBundle
// 0x0000 (0x0070 - 0x0070)
class UBtlAssetRequiredBundle : public UBtlAssetBundleBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetRequiredBundle");
		return ptr;
	}

};


// Class Arise.BtlAssetHudBundle
// 0x0000 (0x0070 - 0x0070)
class UBtlAssetHudBundle : public UBtlAssetBundleBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetHudBundle");
		return ptr;
	}

};


// Class Arise.BtlAssetSystemManagerBundle
// 0x0000 (0x0070 - 0x0070)
class UBtlAssetSystemManagerBundle : public UBtlAssetBundleBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetSystemManagerBundle");
		return ptr;
	}

};


// Class Arise.BtlAssetManager
// 0x0070 (0x04F8 - 0x0488)
class ABtlAssetManager : public ABtlAssetManagerBase
{
public:
	int                                                EncountEffectLoadPriority;                                // 0x0488(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x048C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDatabaseKeyUpdated;                                     // 0x0490(0x0010) (ZeroConstructor, InstancedReference)
	bool                                               IsEncountLoadable;                                        // 0x04A0(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET
	int64_t                                            AssetRequestID;                                           // 0x04A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FBattleWarAssetHandle>               LoadBlockWarAssetHandleArray;                             // 0x04B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<struct FBattleWarAssetHandle>               WarAssetHandleArray;                                      // 0x04C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	struct FTimerHandle                                DelayLoadHandle;                                          // 0x04D0(0x0008) (BlueprintVisible, Transient)
	int                                                PartyLoadCount;                                           // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               IsLoadRequestResident;                                    // 0x04DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               IsBindPartyOrder;                                         // 0x04DD(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x04DE(0x0002) MISSED OFFSET
	TArray<struct FAchCharacterBuildLoadRequestHandle> BuildParameters;                                          // 0x04E0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      UnknownData03[0x8];                                       // 0x04F0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetManager");
		return ptr;
	}


	void UnloadResidentRequiredAssets();
	void UnloadPartyUnit(bool bForce);
	void UnloadBattleWarBuildComponetns();
	void UnloadBattleMapCore(const struct FName& BattleMap);
	void UnloadAllNotValidRequestActorBattleWarAssetHandle(const struct FName& BattleContextFilter);
	void UnloadAllBattleWarAssetHandle(const struct FName& BattleContextFilter);
	void Received_UnloadAll(bool bForce);
	void OnReplaceGuestUnitId(EAriseGuestID GuestId, const struct FName& NewGuestUnitID, const struct FName& PrevGuestUnitID);
	void OnPartyOut(EArisePartyID OutPartyID);
	void OnPartyOrderLoadComplated();
	void OnPartyOrderInitializeCompleted();
	void OnPartyIn(EArisePartyID InPartyID);
	void OnGuestOut(TArray<EAriseGuestID> OutGuestID);
	void OnGuestIn(EAriseGuestID InGuestID);
	void OnDatabaseKeyUpdatedSignature__DelegateSignature(const struct FString& DatabaseKey);
	void LoadResidentRequiredAssets();
	void LoadBattleWarBuildComponets();
	void LoadBattleMapCore(const struct FName& BattleMap);
	void LoadAsyncPartyUnit();
	bool IsSortWarHandle(const struct FBattleWarAssetHandle& Lhs, const struct FBattleWarAssetHandle& Rhs);
	bool IsLoadComplatedBattleWarBuildComponets();
	TArray<struct FString> GetWarAssetHandlesDisplay();
	TArray<struct FBattleWarAssetHandle> GetWarAssetHandles();
	TArray<struct FBtlAssetLoadingInfo> GetAssetLoadInfo();
	void DelayWarHandleLoadCheck();
};


// Class Arise.BtlAssetLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlAssetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAssetLibrary");
		return ptr;
	}


	void STATIC_UnloadUnitAll(class UObject* WorldContextObject, bool bForce);
	void STATIC_UnloadUnit_ByID(class UObject* WorldContextObject, const struct FBtlUnitID& UnitID, bool bForce);
	void STATIC_UnloadUnit(class UObject* WorldContextObject, const struct FName& UnitID, bool bForce);
	void STATIC_UnloadStrikeMainCut(class UObject* WorldContextObject, const struct FName& StrikeLabel, bool bForce);
	void STATIC_UnloadResidentRequiredAssets(class UObject* WorldContextObject);
	void STATIC_UnloadPartyUnit(class UObject* WorldContextObject, bool bForce);
	void STATIC_UnloadMystic(class UObject* WorldContextObject, const struct FName& ArtsLabel, bool bForce);
	void STATIC_UnloadMagicAll(class UObject* WorldContextObject, bool bForce);
	void STATIC_UnloadMagic(class UObject* WorldContextObject, const struct FName& MagicId, bool bForce);
	void STATIC_UnloadEvent(class UObject* WorldContextObject);
	void STATIC_UnLoadBattleTemporaryAsset(class UObject* WorldContextObject);
	void STATIC_UnloadBattleSystemManager(class UObject* WorldContextObject, bool Force);
	void STATIC_UnloadBattleRequiredAll(class UObject* WorldContextObject, bool Force);
	void STATIC_UnloadBattle_HUD(class UObject* WorldContextObject, bool Force);
	void STATIC_UnloadAll(class UObject* WorldContextObject, bool bForce);
	void STATIC_Unload_EncountGroup(class UObject* WorldContextObject, const struct FName& EncountGroup, bool Force);
	void STATIC_SetDevelopmentRequiredAssetsResident(class UObject* WorldContextObject, bool Enable);
	void STATIC_LoadAsyncUnit_ByID(class UObject* WorldContextObject, const struct FBtlUnitID& UnitID);
	void STATIC_LoadAsyncUnit(class UObject* WorldContextObject, const struct FName& UnitID);
	void STATIC_LoadAsyncStrikeMainCut(class UObject* WorldContextObject, const struct FName& StrikeLabel);
	void STATIC_LoadAsyncPartyUnit(class UObject* WorldContextObject);
	void STATIC_LoadAsyncMystic(class UObject* WorldContextObject, const struct FName& ArtsLabel);
	void STATIC_LoadAsyncMagic(class UObject* WorldContextObject, const struct FName& MagicId);
	void STATIC_LoadAsyncEvent(class UObject* WorldContextObject);
	void STATIC_LoadAsyncBattleSystemManager(class UObject* WorldContextObject);
	void STATIC_LoadAsyncBattleRequiredAll(class UObject* WorldContextObject);
	void STATIC_LoadAsyncBattle_HUD(class UObject* WorldContextObject);
	void STATIC_LoadAsync_EncountGroup(class UObject* WorldContextObject, const struct FName& EncountGroup);
	void STATIC_K2_UnloadRequestBattle(class UObject* WorldContextObject, struct FBattleWarAssetHandle* Handle);
	void STATIC_K2_LoadRequestSkillScript(class UObject* WorldContextObject);
	struct FBattleWarAssetHandle STATIC_K2_LoadRequestBattleGroupParam(class UObject* WorldContextObject, const struct FName& BattleContenxt, const struct FName& BattleMap, TArray<struct FBtlEncountGroupParam> EncountGroupList, class AActor* RequestActor);
	struct FBattleWarAssetHandle STATIC_K2_LoadRequestBattle(class UObject* WorldContextObject, const struct FName& BattleContenxt, const struct FName& BattleMap, TArray<struct FName> EncountGroupList, class AActor* RequestActor);
	bool STATIC_K2_IsValidBattleWarHandle(class UObject* WorldContextObject, const struct FBattleWarAssetHandle& Handle);
	void STATIC_K2_AwaitLoadUnitComplated(class UObject* WorldContextObject, const struct FBtlUnitID& UnitID, const struct FLatentActionInfo& LatentInfo);
	void STATIC_K2_AwaitLoadComplatedSkillScript(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_IsLoadCompleteUnitAll(class UObject* WorldContextObject);
	bool STATIC_IsLoadCompleteUnit_ByID(class UObject* WorldContextObject, const struct FBtlUnitID& UnitID);
	bool STATIC_IsLoadCompleteUnit(class UObject* WorldContextObject, const struct FName& UnitID);
	bool STATIC_IsLoadCompleteSystemEffectAll(class UObject* WorldContextObject);
	bool STATIC_IsLoadCompleteSystemEffect(class UObject* WorldContextObject, const struct FName& EffectLabel);
	bool STATIC_IsLoadCompleteStrikeMainCut(class UObject* WorldContextObject, const struct FName& StrikeLabel);
	bool STATIC_IsLoadCompleteStrikeFirstCutAll(class UObject* WorldContextObject);
	bool STATIC_IsLoadCompleteMystic(class UObject* WorldContextObject, const struct FName& ArtsLabel);
	bool STATIC_IsLoadCompleteMetaScript(class UObject* WorldContextObject);
	bool STATIC_IsLoadCompleteMagicAll(class UObject* WorldContextObject);
	bool STATIC_IsLoadCompleteMagic(class UObject* WorldContextObject, const struct FName& MagicId);
	bool STATIC_IsLoadCompleteEvent(class UObject* WorldContextObject);
	bool STATIC_IsLoadComplete_SystemManager(class UObject* WorldContextObject);
	bool STATIC_IsLoadComplete_Required(class UObject* WorldContextObject);
	bool STATIC_IsLoadComplete_PartyGroup(class UObject* WorldContextObject);
	bool STATIC_IsLoadComplete_HUD(class UObject* WorldContextObject);
	bool STATIC_IsLoadComplete_EncountGroupAll(class UObject* WorldContextObject);
	bool STATIC_IsLoadComplete_EncountGroup(class UObject* WorldContextObject, const struct FName& EncountGroup);
	class UClass* STATIC_GetUnitClass(class UObject* WorldContextObject, const struct FName& UnitID);
	class UParticleSystem* STATIC_GetSystemEffect(class UObject* WorldContextObject, const struct FName& SystemEffectLabel);
	class ULevelSequence* STATIC_GetMystic(class UObject* WorldContextObject, const struct FName& ArtsLabel);
	class UClass* STATIC_GetMetaScript(class UObject* WorldContextObject, const struct FName& EncountGroupName);
	class ULevelSequence* STATIC_GetMainStrikeCut(class UObject* WorldContextObject, const struct FName& StrikeLabel);
	class UBtlMagicAsset* STATIC_GetMagicAsset(class UObject* WorldContextObject, const struct FName& MagicId);
	TArray<struct FString> STATIC_GetLoadingAssets(class UObject* WorldContextObject);
	class ULevelSequence* STATIC_GetFirstStrikeCut(class UObject* WorldContextObject, const struct FName& StrikeLabel);
	class ULevelSequence* STATIC_GetEvent(class UObject* WorldContextObject);
	class UClass* STATIC_GetEncountEffect(class UObject* WorldContextObject, const struct FName& EncountGroup);
	class UClass* STATIC_GetBattleHudWidget(class UObject* WorldContextObject, const struct FName& WidgetLabel);
	class UASStateMachine* STATIC_GetArts(class UObject* WorldContextObject, const struct FName& ID);
	void STATIC_BtlExportAssetLog(class UObject* WorldContextObject);
	void STATIC_BattleAssetLock(class UObject* WorldContextObject, bool bLock);
};


// Class Arise.BtlUserData_StringData
// 0x0010 (0x0038 - 0x0028)
class UBtlUserData_StringData : public UAssetUserData
{
public:
	struct FString                                     Name;                                                     // 0x0028(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUserData_StringData");
		return ptr;
	}

};


// Class Arise.BtlRuntimeObjectBase
// 0x0000 (0x0028 - 0x0028)
class UBtlRuntimeObjectBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlRuntimeObjectBase");
		return ptr;
	}

};


// Class Arise.BtlAsyncTaskProxyBase
// 0x0010 (0x0038 - 0x0028)
class UBtlAsyncTaskProxyBase : public UBtlRuntimeObjectBase
{
public:
	bool                                               bTickEvenWhenPaused;                                      // 0x0028(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ABtlTaskManagerBase>          OwnerManager;                                             // 0x002C(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bTaskTickable;                                            // 0x0034(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAsyncTaskProxyBase");
		return ptr;
	}


	void TaskComplated();
	void Received_Tick(float FrameDeltaTime);
	bool Received_IsComplate();
	void Received_End();
	void Received_Begin();
};


// Class Arise.BtlCommonTaskProxy
// 0x0010 (0x0048 - 0x0038)
class UBtlCommonTaskProxy : public UBtlAsyncTaskProxyBase
{
public:
	struct FScriptMulticastDelegate                    OnComplete;                                               // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCommonTaskProxy");
		return ptr;
	}

};


// Class Arise.BtlAsyncLabelTaskProxy
// 0x0020 (0x0058 - 0x0038)
class UBtlAsyncLabelTaskProxy : public UBtlAsyncTaskProxyBase
{
public:
	struct FString                                     TargetLabel;                                              // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnComplete;                                               // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAsyncLabelTaskProxy");
		return ptr;
	}

};


// Class Arise.BtlCapsuleComponent
// 0x0010 (0x05C0 - 0x05B0)
class UBtlCapsuleComponent : public UCapsuleComponent
{
public:
	bool                                               Enable;                                                   // 0x05B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05B1(0x0003) MISSED OFFSET
	float                                              DrawThickness;                                            // 0x05B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      DepthPriority;                                            // 0x05B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x05B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCapsuleComponent");
		return ptr;
	}


	class AActor* GetAttachmentRootActor();
};


// Class Arise.BtlAttackCapsuleComponent
// 0x00B0 (0x0670 - 0x05C0)
class UBtlAttackCapsuleComponent : public UBtlCapsuleComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x05C0(0x0008) MISSED OFFSET
	struct FAttackSphereParam                          Param;                                                    // 0x05C8(0x0050) (Edit, BlueprintVisible)
	struct FBtlArtsHandle                              ArtsHandle;                                               // 0x0618(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	bool                                               bInitialize;                                              // 0x0638(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIsStockMagic;                                            // 0x0639(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x063A(0x0006) MISSED OFFSET
	TArray<class UBtlStatusBuffBase*>                  ArtsUniqueBuff;                                           // 0x0640(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class UBtlStatusBuffBase*>                  UseArtsUniqueBuff;                                        // 0x0650(0x0010) (ZeroConstructor, Transient)
	TWeakObjectPtr<class UObject>                      DefaultAttackNotify;                                      // 0x0660(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0668(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAttackCapsuleComponent");
		return ptr;
	}


	void SetArtsHandle(const struct FBtlArtsHandle& NewArtsHandle);
	void Received_DoDamageHit(class ABtlCharacterBase* DmgActor, class UBtlDamageSphereComponent* DmgCollision);
	bool Received_CalculationImpactPoint(class AActor* DestructibleActor, struct FVector* ResultImpactPoint);
	void OnBattleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnBattleBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class Arise.BtlAttackCollisionHostInterface
// 0x0000 (0x0028 - 0x0028)
class UBtlAttackCollisionHostInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAttackCollisionHostInterface");
		return ptr;
	}


	class UBtlHitObjectMemoryBase* GetCollisionHostHitObjectMemory();
	class ABtlCharacterBase* GetCollisionHostCharacter();
	struct FBtlArtsHandle GetCollisionHostArtsHandle();
};


// Class Arise.BtlAttackCollisionInterface
// 0x0000 (0x0028 - 0x0028)
class UBtlAttackCollisionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAttackCollisionInterface");
		return ptr;
	}


	void SetStockMagic(bool bNewStockMagic);
	void PreBattleAttackHit_DamagePhase();
	void PostBattleAttackHit_DamagePhase();
	struct FAttackSphereParam K2_GetAttackArtsParam();
	bool IsStockMagic();
	struct FName GetUnitID();
	EBtlUnitGroup GetUnitGroup();
	struct FName GetAttackHitStatusLabel();
	struct FName GetAttackHitEffectLabel();
	struct FName GetAttackHitDirectionLabel();
	int GetAttackCollisionGroupID();
	struct FBtlArtsHandle GetAttackArtsHandle();
	struct FBtlArtsData GetAttackArtsData();
	void DoDamageHit(class ABtlCharacterBase* DmgActor, class UBtlDamageSphereComponent* DmgCollision);
	bool CalculationImpactPoint(class AActor* DestructibleActor, struct FVector* ResultImpactPoint);
};


// Class Arise.BtlSphereComponent
// 0x0010 (0x05C0 - 0x05B0)
class UBtlSphereComponent : public USphereComponent
{
public:
	unsigned char                                      DepthPriority;                                            // 0x05B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x05B1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSphereComponent");
		return ptr;
	}


	class AActor* GetAttachmentRootActor();
};


// Class Arise.BtlAttackSphereComponent
// 0x00B0 (0x0670 - 0x05C0)
class UBtlAttackSphereComponent : public UBtlSphereComponent
{
public:
	struct FAttackSphereParam                          Param;                                                    // 0x05C0(0x0050) (Edit, BlueprintVisible)
	bool                                               bIsStockMagic;                                            // 0x0610(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0611(0x0007) MISSED OFFSET
	struct FBtlArtsHandle                              ArtsHandle;                                               // 0x0618(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	bool                                               bInitialize;                                              // 0x0638(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0639(0x0007) MISSED OFFSET
	TArray<class UBtlStatusBuffBase*>                  ArtsUniqueBuff;                                           // 0x0640(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class UBtlStatusBuffBase*>                  UseArtsUniqueBuff;                                        // 0x0650(0x0010) (ZeroConstructor, Transient)
	TWeakObjectPtr<class UObject>                      DefaultAttackNotify;                                      // 0x0660(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0668(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlAttackSphereComponent");
		return ptr;
	}


	void SetOverrideElement(bool bOverride, EBtlElementType Type);
	void SetDamageWeight(float Value);
	void SetArtsHandle(const struct FBtlArtsHandle& NewArtsHandle);
	void Received_DoDamageHit(class ABtlCharacterBase* DmgActor, class UBtlDamageSphereComponent* DmgCollision);
	bool Received_CalculationImpactPoint(class AActor* DestructibleActor, struct FVector* ResultImpactPoint);
	void OnBattleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnBattleBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	int GetCollisionGroupID();
	struct FBtlArts_XmlDatatableLabel GetArtsName();
	class UBtlAttackSphereComponent* STATIC_AddAttackCollision(class UClass* Class, class AActor* Owner, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FVector& SpawnScale, class UBtlCollisionScript* OverrideScript, const struct FAttackSphereParam& NewParam);
};


// Class Arise.BtlStatusBuff_SkillBase
// 0x0008 (0x0050 - 0x0048)
class UBtlStatusBuff_SkillBase : public UBtlStatusBuffBase
{
public:
	float                                              SkillParameterCache;                                      // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatusBuff_SkillBase");
		return ptr;
	}


	void UnapplySkill();
	void SetEnabled(bool Enabled);
	void Received_UnapplySkill(float SkillValue);
	void Received_OnApplySkill();
	bool Received_IsCalculateDamageDecreaseCondition(class ABtlCharacterBase* AttackerActor, const TScriptInterface<class UBtlAttackCollisionInterface>& AttackCollision, class ABtlCharacterBase* DmgActor, class UBtlDamageSphereComponent* DmgCollision, const struct FBtlArtsHandle& ArtsHandle, const struct FBtlArtsData& ArtsData, bool IsGuard, bool IsCritical, bool IsWeakness, bool IsResistance);
	bool Received_IsCalculateDamageAddCondition(class ABtlCharacterBase* AttackerActor, const TScriptInterface<class UBtlAttackCollisionInterface>& AttackCollision, class ABtlCharacterBase* DmgActor, class UBtlDamageSphereComponent* DmgCollision, const struct FBtlArtsHandle& ArtsHandle, const struct FBtlArtsData& ArtsData, bool IsGuard, bool IsCritical, bool IsWeakness, bool IsResistanc);
	void Received_ApplySkill(float SkillValue);
	float GetSkillParameter();
	bool GetSkillData(struct FBtlSkillData* OutSkillData);
	bool CanApplySkill();
	void ApplySkill();
};


// Class Arise.Btl_Camera
// 0x0F50 (0x1F80 - 0x1030)
class ABtl_Camera : public ACameraActor
{
public:
	float                                              AimJumpHeightRate_Native;                                 // 0x1030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Distance_Native;                                          // 0x1034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Height_Native;                                            // 0x1038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Yaw_Native;                                               // 0x103C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpolateValue_Native;                                  // 0x1040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LimitHeightDown_Native;                                   // 0x1044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LimitHeightUp_Native;                                     // 0x1048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                DistanceTableScore_Native;                                // 0x104C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class ABtlCharacterBase*                           BoostAttackUnit_Native;                                   // 0x1050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BoostAttackTimer_Native;                                  // 0x1058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BoostAttackInTime_Native;                                 // 0x105C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BoostAttackSoundBoostEnd2Timer_Native;                    // 0x1060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bExternalAimOffsetOverride_Native;                        // 0x1064(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1065(0x0003) MISSED OFFSET
	float                                              ExternalAimOffset_Native;                                 // 0x1068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ExternalYawOffset_Native;                                 // 0x106C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ExternalPitchOffset_Native;                               // 0x1070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bExternalYawOverride_Native;                              // 0x1074(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x1075(0x0003) MISSED OFFSET
	float                                              ExternalYawOverride_Native;                               // 0x1078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bExternalPitchOverride_Native;                            // 0x107C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x107D(0x0003) MISSED OFFSET
	float                                              ExternalPitchOverride_Native;                             // 0x1080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bExternalDistanceOverride_Native;                         // 0x1084(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x1085(0x0003) MISSED OFFSET
	float                                              ExternalDistanceOverride_Native;                          // 0x1088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bExternalInputLimitHeight_Native;                         // 0x108C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x108D(0x0003) MISSED OFFSET
	float                                              ExternalInputLimitHeightDown_Native;                      // 0x1090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ExternalInputLimitHeightUp_Native;                        // 0x1094(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bExternalInputLimitYaw_Native;                            // 0x1098(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x1099(0x0003) MISSED OFFSET
	float                                              ExternalInputLimitYawMin_Native;                          // 0x109C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ExternalInputLimitYawMax_Native;                          // 0x10A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bExternalInputLimitPitch_Native;                          // 0x10A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x10A5(0x0003) MISSED OFFSET
	float                                              ExternalInputLimitPitchMin_Native;                        // 0x10A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ExternalInputLimitPitchMax_Native;                        // 0x10AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FocusUnitTimer_Native;                                    // 0x10B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FocusUnitDistance_Native;                                 // 0x10B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FocusUnitInTime_Native;                                   // 0x10B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     FocusUnitDirection_Native;                                // 0x10BC(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     AimPointBeforeFocus_Native;                               // 0x10C8(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     CamPointBeforeFocus_Native;                               // 0x10D4(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	float                                              ReturnBeforeFocusUnitTimer_Native;                        // 0x10E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpolateCoefficient_Native;                            // 0x10E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpolateCoefficientTimer_Native;                       // 0x10E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpolateCoefficientStart_Native;                       // 0x10EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpolateCoefficientEnd_Native;                         // 0x10F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpolateCoefficientTime_Native;                        // 0x10F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpolateCoefficientCamPoint_Native;                    // 0x10F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpolateCoefficientIgnoreTimer_Native;                 // 0x10FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CutsceneToTimer_Native;                                   // 0x1100(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DebugCreateCameraTime_Native;                             // 0x1104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     PrevSetAimPoint_Native;                                   // 0x1108(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     PrevSetCamPoint_Native;                                   // 0x1114(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	TArray<class AActor*>                              IgnoreBlockingActors_Native;                              // 0x1120(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	struct FMinimalViewInfo                            SavedCutsceneCamera_Native;                               // 0x1130(0x0D20) (Edit, BlueprintVisible, Transient)
	bool                                               bShowDebug_Native;                                        // 0x1E50(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bMouseControl_Native;                                     // 0x1E51(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x1E52(0x0002) MISSED OFFSET
	float                                              DistanceStart_Native;                                     // 0x1E54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistanceTarget_Native;                                    // 0x1E58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistanceElapsedTime_Native;                               // 0x1E5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistanceInterpolateCoefficient_Native;                    // 0x1E60(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEnableInputYaw_Native;                                   // 0x1E64(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEnableInputHeight_Native;                                // 0x1E65(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x1E66(0x0002) MISSED OFFSET
	float                                              IdleTimer_Native;                                         // 0x1E68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bInputAnyControl_Native;                                  // 0x1E6C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x1E6D(0x0003) MISSED OFFSET
	float                                              IgnoreRewindTimer_Native;                                 // 0x1E70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bResetCameraCutsceneEndFlag_Native;                       // 0x1E74(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x1E75(0x0003) MISSED OFFSET
	float                                              IgnoreAutoResetTimer_Native;                              // 0x1E78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FocusLocationTimer_Native;                                // 0x1E7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     FocusLocationDirection_Native;                            // 0x1E80(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     FocusLocationStartInAimPoint_Native;                      // 0x1E8C(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     FocusLocationStartInCamPoint_Native;                      // 0x1E98(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     FocusLocationBackInAimPoint_Native;                       // 0x1EA4(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     FocusLocationBackInCamPoint_Native;                       // 0x1EB0(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	float                                              NormalBattleEndTimer_Native;                              // 0x1EBC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EasingActionTimer_Native;                                 // 0x1EC0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     EasingActionStartAimPoint_Native;                         // 0x1EC4(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     EasingActionStartCamPoint_Native;                         // 0x1ED0(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	bool                                               bOldProcess_Native;                                       // 0x1EDC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x1EDD(0x0003) MISSED OFFSET
	TArray<EBtlCameraMode>                             ModeList;                                                 // 0x1EE0(0x0010) (ZeroConstructor, Transient)
	EBtlCameraMode                                     Mode;                                                     // 0x1EF0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	EBtlCameraMode                                     Prev;                                                     // 0x1EF1(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x1EF2(0x0002) MISSED OFFSET
	struct FRotator                                    OffsetRotation;                                           // 0x1EF4(0x000C) (Edit, BlueprintVisible, Transient, EditConst, IsPlainOldData)
	struct FVector                                     OffsetLocation;                                           // 0x1F00(0x000C) (Edit, BlueprintVisible, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x1F0C(0x0004) MISSED OFFSET
	class ABtlCharacterBase*                           FocusUnit;                                                // 0x1F10(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class USceneComponent*                             FocusPart;                                                // 0x1F18(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	EBtlCameraFocusLocationState                       FocusLocationState;                                       // 0x1F20(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x1F21(0x0003) MISSED OFFSET
	struct FVector                                     FocusLocation;                                            // 0x1F24(0x000C) (Transient, IsPlainOldData)
	float                                              FocusDistance;                                            // 0x1F30(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              FocusInTime;                                              // 0x1F34(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              FocusKeepTime;                                            // 0x1F38(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              FocusOutTime;                                             // 0x1F3C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              DefaultFOV;                                               // 0x1F40(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              DefaultAimOffsetHeight;                                   // 0x1F44(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FBtlBitAnyOfFlags                           ActiveFlag;                                               // 0x1F48(0x0004) (Edit, DisableEditOnTemplate, Transient)
	bool                                               UseCutsceneToNormalInterpolate;                           // 0x1F4C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x1F4D(0x0003) MISSED OFFSET
	class ABtlCharacterBase*                           OverlimitUnit;                                            // 0x1F50(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ABtlCharacterBase*                           InspirationUnit;                                          // 0x1F58(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               RewindFlag;                                               // 0x1F60(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ResetCameraFlag;                                          // 0x1F61(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x2];                                       // 0x1F62(0x0002) MISSED OFFSET
	float                                              ResetCameraInterpolateTime;                               // 0x1F64(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ResetCameraProcessTimer;                                  // 0x1F68(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               InterpolateIgnoreFlag;                                    // 0x1F6C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               UseAutoReset_TargetAngleRange;                            // 0x1F6D(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ETraceTypeQuery>                       DetectBlockTraceChannel;                                  // 0x1F6E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x1];                                       // 0x1F6F(0x0001) MISSED OFFSET
	class UBtlEventDispatcher*                         EventDispatcher;                                          // 0x1F70(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData18[0x8];                                       // 0x1F78(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_Camera");
		return ptr;
	}


	void UseAutoResetTargetAngleRange(bool on);
	void UpdateRewindToYawHeightNative(float DeltaSeconds);
	void UpdateResetToYawNative(float DeltaSeconds);
	void UpdateInterpolateCoefficientNative(float DeltaSeconds);
	void UpdateExternalNative2(const struct FVector& AimPoint, const struct FVector& CamPoint, struct FVector* oAimPoint, struct FVector* oCamPoint);
	void UpdateExternalNative(struct FVector* AimPoint, struct FVector* CamPoint);
	void UpdateDistanceTableNative(float DeltaSeconds);
	void UpdateCameraModeActionNative(float DeltaSeconds);
	void TickNative(float DeltaSeconds);
	void SoundPostEvent_BoostEndNative(float DeltaSeconds);
	void SetUseCutsceneToNormalInterpolate(bool Enable);
	void SetRewindFlag(bool on);
	void SetResetCameraProcessTime(float Time);
	void SetResetCameraInterpolateTime(float Time);
	void SetResetCameraFlag(bool on);
	void SetResetCameraCutsceneEndFlag(bool on);
	void SetOverlimitUnitCameraNative(class ABtlCharacterBase* Unit);
	void SetOverlimitUnitCamera(class ABtlCharacterBase* Unit);
	void SetOverlimitUnit(class ABtlCharacterBase* Unit);
	void SetOffsetRotation(const struct FRotator& Rotator);
	void SetOffsetLocation(const struct FVector& Location);
	void SetNormalCameraNative(const struct FVector& Aim, float Yaw, float Height, float Distance);
	void SetNormalBtlWinCameraNative();
	void SetNormalBtlWinCamera();
	void SetMouseControlNative(bool MouseControl, bool GamepadControl);
	void SetMode(EBtlCameraMode CameraMode);
	void SetInterpolateIgnoreFlag(bool on);
	void SetInterpolateCoefficientNative(float Coefficient, float Time);
	void SetInterpolateCoefficientIgnoreTimer(float Time);
	void SetInterpolateCoefficientCamPointNative(float CoefficientCamPoint);
	void SetInspirationUnitCameraNative(class ABtlCharacterBase* Unit);
	void SetInspirationUnitCamera(class ABtlCharacterBase* Unit);
	void SetInspirationUnit(class ABtlCharacterBase* Unit);
	void SetInputYawAddNative(float Value);
	void SetInputLimitYawNative(bool Enable, float YawMin, float YawMax);
	void SetInputLimitPitchNative(bool Enable, float PitchMin, float PitchMax);
	void SetInputLimitHeightNative(bool Enable, float Low, float High);
	void SetInputHeightAddNative(float Value);
	void SetInputAnyControlNative(bool New);
	void SetFocusUnitCameraNative(bool Enable, class ABtlCharacterBase* Unit, class USceneComponent* Part);
	void SetFocusUnitCamera(bool Enable, class ABtlCharacterBase* Unit, class USceneComponent* Part);
	void SetFocusUnit(class ABtlCharacterBase* Unit);
	void SetFocusTime(float In, float Keep, float Out);
	void SetFocusPart(class USceneComponent* Part);
	void SetFocusLocationState(EBtlCameraFocusLocationState State);
	void SetFocusLocationCameraNative(bool Enable, const struct FVector& Location, float Distance, float InTime, float keepTime, float EndTime);
	void SetFocusLocationCamera(bool Enable, const struct FVector& Location, float Distance, float InTime, float keepTime, float EndTime);
	void SetFocusLocation(const struct FVector& Location);
	void SetFocusDistance(float Distance);
	void SetExternalYawOverrideNative(bool UseOverride, float OverrideYaw);
	void SetExternalYawOffsetNative(float YawOffset);
	void SetExternalPitchOverrideNative(bool UseOverride, float OverridePitch);
	void SetExternalPitchOffsetNative(float PitchOffset);
	void SetExternalDistanceOverrideNative(bool UseOverride, float OverrideDistance);
	void SetExternalAimOffsetNative(bool UseOverride, float AimOffset);
	void SetEnableInputYawNative(bool Enable);
	void SetEnableInputHeightNative(bool Enable);
	void SetDistanceInterpolateValueNative(float Value);
	void SetDefaultFOV(float FOV);
	void SetDefaultAimOffsetHeight(float Height);
	void SetCameraYaw(float Value);
	void SetCameraHeight(float Value);
	void SetBoostAttackUnit(class ABtlCharacterBase* Unit);
	void SetBoostAttackTimer(float Time);
	void SetActiveFlag(bool Enable, EBtlBitFlagCategory Category);
	void SavedPrevPointsNative(const struct FVector& AimPoint, const struct FVector& CamPoint);
	void ReturnBeforeFocusUnitNative();
	void ReturnBeforeFocusUnit();
	void ResetCameraNative();
	void ResetCameraInstantNative();
	void PushMode(EBtlCameraMode CameraMode);
	void PopMode();
	void LookupNormalNative2(const struct FVector& AimPoint, const struct FVector& CamPoint, struct FVector* oAimPoint, struct FVector* oCamPoint);
	void LookupNormalNative(struct FVector* AimPoint, struct FVector* CamPoint);
	bool IsUseCutsceneToNormalInterpolate();
	bool IsUseAutoResetTargetAngleRange();
	bool IsActiveFlag();
	bool GetRewindFlag();
	float GetResetCameraProcessTime();
	float GetResetCameraInterpolateTime();
	bool GetResetCameraFlag();
	bool GetResetCameraCutsceneEndFlag();
	class ABtlCharacterBase* GetOverlimitUnit();
	struct FRotator GetOffsetRotation();
	struct FVector GetOffsetLocation();
	EBtlCameraMode GetMode();
	bool GetInterpolateIgnoreFlag();
	class ABtlCharacterBase* GetInspirationUnit();
	TArray<class AActor*> GetIgnoreBlockingActors();
	class ABtlCharacterBase* GetFocusUnit();
	class USceneComponent* GetFocusPart();
	float GetFocusOutTime();
	EBtlCameraFocusLocationState GetFocusLocationState();
	struct FVector GetFocusLocation();
	float GetFocusKeepTime();
	float GetFocusInTime();
	float GetFocusDistance();
	EBtlCameraEasingState GetEasingStateNative(float Time, float InTime, float keepTime, float outTime);
	float GetDistanceFromDistanceTable(int DistanceTableScore);
	float GetDefaultFOV();
	float GetDefaultAimOffsetHeight();
	struct FVector GetCamPointNormalNative2(const struct FVector& AimPoint, const struct FVector& CamDirectionXY);
	struct FVector GetCamPointNormalNative(const struct FVector& AimPoint, const struct FVector& CamDirectionXY);
	struct FVector GetCamDirectionNormalNative(float Yaw);
	struct FVector GetAimPointNormalNative();
	struct FVector GetAimOffsetFromDistanceTable(int DistanceTableScore);
	void ExecutePreBoostStrikeNative(float DeltaSeconds);
	void ExecuteNormalNative(float DeltaSeconds);
	void ExecuteNormalBattleEndNative(float DeltaSeconds);
	void ExecuteInitializeNative();
	void ExecuteFocusUnitNative(float DeltaSeconds);
	void ExecuteFocusLocationNative(float DeltaSeconds);
	void ExecuteEasingOverlimitNative(float DeltaSeconds);
	void ExecuteEasingInspirationNative(float DeltaSeconds);
	void ExecuteCutsceneToNative(float DeltaSeconds);
	void ExecuteCounterRaidNative(float DeltaSeconds);
	void ExecuteBoostAttackNative(float DeltaSeconds);
	void ExecuteAutoCameraResetNative(float DeltaSeconds);
	void DetectBlockingNative2(const struct FVector& AimPoint, const struct FVector& CamPoint, struct FVector* EscapePoint);
	void DetectBlockingNative(struct FVector* AimPoint, struct FVector* CamPoint);
	void ClearOffsetValue();
	void CalculateNormalCameraNative(float DeltaSeconds, struct FVector* NewLocation, struct FRotator* NewRotation, struct FVector* NewAimPoint, struct FVector* NewCamPoint);
	int CalculateDistanceTableIndex();
};


// Class Arise.BtlCameraManager
// 0x0018 (0x0040 - 0x0028)
class UBtlCameraManager : public UObject
{
public:
	class ACameraActor*                                ActiveCamera;                                             // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class ACameraActor*>                        CameraList;                                               // 0x0030(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCameraManager");
		return ptr;
	}

};


// Class Arise.BtlCameraLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlCameraLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCameraLibrary");
		return ptr;
	}


	class ACameraActor* STATIC_SetActiveCamera(class ACameraActor* Camera);
	class ACameraActor* STATIC_GetActiveCamera();
};


// Class Arise.BtlCharacterBase
// 0x0580 (0x0E20 - 0x08A0)
class ABtlCharacterBase : public AAriseCharacterBase
{
public:
	struct FName                                       ComboNextArts;                                            // 0x08A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    AttackBeginEvent;                                         // 0x08A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AttackEndEvent;                                           // 0x08B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginAttackVoice;                                       // 0x08C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndAttackVoice;                                         // 0x08D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBtlActionProcessor*                         BattleActionProcessor;                                    // 0x08E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBtlUnitScriptComponent*                     BattleUnitScriptComponent;                                // 0x08F0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAriseCharacterBuildComponent*               CharacterBuildComponent;                                  // 0x08F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UBtlHateComponent*                           BattleHateComponent;                                      // 0x0900(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBtlUnitSizeComponent*                       BattleUnitSizeComponent;                                  // 0x0908(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UBtlTargetCursorComponent*>           CacheSelfTargetComponents;                                // 0x0910(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UBtlTargetCursorComponent*                   TargetComponent;                                          // 0x0920(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData)
	class UClass*                                      TargetSwitcherComponentClass;                             // 0x0928(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlTargetSwitcherComponent*                 TargetSwitcherComponent;                                  // 0x0930(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBtlVisualTaskComponent*                     VisualTaskComponent;                                      // 0x0938(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBtlUnitDebugViewer*                         BattleDebugViewer;                                        // 0x0940(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              DirectionInterpValue;                                     // 0x0948(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectionBackThreshold;                                   // 0x094C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Mass;                                                     // 0x0950(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0954(0x0004) MISSED OFFSET
	struct FAchCharacterBuildParameters                PreviewBuildParameter;                                    // 0x0958(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                               bBuildBlock;                                              // 0x09B8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x09B9(0x0003) MISSED OFFSET
	struct FAchCharacterBuildOptions                   BuildOption;                                              // 0x09BC(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x4];                                       // 0x09CC(0x0004) MISSED OFFSET
	class UClass*                                      AnimClass;                                                // 0x09D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UASAnimationSet*                             RootAnimationSet;                                         // 0x09D8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UBehaviorTree*                               BehaviorTree;                                             // 0x09E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      UnitScript;                                               // 0x09E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PushedCoefficient;                                        // 0x09F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x09F4(0x0004) MISSED OFFSET
	class UDataTable*                                  BattleVisibleDataTable;                                   // 0x09F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  BattleDefaultAttackCollisionDataTable;                    // 0x0A00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBtlDefaultAttackCollision_DatatableLabel> DefaultAttackCollisions;                                  // 0x0A08(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       CurrentBattleVisibleFlag;                                 // 0x0A18(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               IsCurrentBattleVisibleFlag;                               // 0x0A20(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0A21(0x0007) MISSED OFFSET
	TArray<struct FName>                               IsBattleVisibleFlags;                                     // 0x0A28(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient)
	struct FBtlBitAnyOfFlags                           IsMovementComponentFlag;                                  // 0x0A38(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAnyOfFlags                           IsNotDieFlag;                                             // 0x0A3C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAllOfFlags                           IsAIRunningFlag;                                          // 0x0A40(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAllOfFlags                           IsCapsuleCollisionFlag;                                   // 0x0A44(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAllOfFlags                           IsAttackCollisionFlag;                                    // 0x0A48(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAllOfFlags                           IsDamageCollisionFlag;                                    // 0x0A4C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAnyOfFlags                           IsDownFlag;                                               // 0x0A50(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAllOfFlags                           IsCameraFadeFlag;                                         // 0x0A54(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAnyOfFlags                           IsInvincibleFlag;                                         // 0x0A58(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAnyOfFlags                           IsSuperArmorFlag;                                         // 0x0A5C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAnyOfFlags                           IsIgnoreSPFlag;                                           // 0x0A60(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FBtlBitAnyOfFlags                           IsIgnoreTPFlag;                                           // 0x0A64(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	bool                                               IsRareUnit;                                               // 0x0A68(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	EBtlInOutState                                     BtlInOutState;                                            // 0x0A69(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               IsChangeUnit;                                             // 0x0A6A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x5];                                       // 0x0A6B(0x0005) MISSED OFFSET
	class ABtlCharacterBase*                           ChangeUnit;                                               // 0x0A70(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x78];                                      // 0x0A78(0x0078) MISSED OFFSET
	class UBtlStatusComponent*                         BattleStatusComponent;                                    // 0x0AF0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData)
	class ABtl_AIControllerBase*                       BtlAIController;                                          // 0x0AF8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x6C];                                      // 0x0B00(0x006C) MISSED OFFSET
	int                                                HitCount;                                                 // 0x0B6C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	int                                                TotalDamage;                                              // 0x0B70(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              ComboSeconds;                                             // 0x0B74(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x0B78(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDeathAvoidance;                                         // 0x0B88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0B98(0x0004) MISSED OFFSET
	struct FBtlDamageRate                              DamageRate;                                               // 0x0B9C(0x0010) (BlueprintVisible, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0BAC(0x0004) MISSED OFFSET
	class UBtlStatusViewModelBase*                     ViewModel;                                                // 0x0BB0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLaunchXYOverride;                                        // 0x0BB8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLaunchZOverride;                                         // 0x0BB9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x6];                                       // 0x0BBA(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReceiveSmashCondition;                                  // 0x0BC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReceiveSmashNotCondition;                               // 0x0BD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UMaterialInstanceDynamic*>            MaterialInstanceDynamics;                                 // 0x0BE0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnChangeTarget;                                           // 0x0BF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTargetedChanged;                                        // 0x0C00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginOverlimitCharacter;                                // 0x0C10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndOverlimitCharacter;                                  // 0x0C20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHealCharacter;                                          // 0x0C30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDeadCharacter;                                          // 0x0C40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeFlyingBreak;                                      // 0x0C50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeRushBreak;                                        // 0x0C60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeArmor;                                            // 0x0C70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeSuperAvoid;                                       // 0x0C80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFirstCriticalAttack;                                    // 0x0C90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAIBegin;                                                // 0x0CA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAIEnd;                                                  // 0x0CB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAIMoveBegin;                                            // 0x0CC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAIMoveEnd;                                              // 0x0CD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeElementType;                                      // 0x0CE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EBtlInOutState                                     InOutState;                                               // 0x0CF0(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x0CF1(0x0007) MISSED OFFSET
	class UBtlEventDispatcher*                         BattleEventDispatcher;                                    // 0x0CF8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ABtlCharacterBase*                           TemporaryTargetCharacter;                                 // 0x0D00(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsAnimHomingMove;                                         // 0x0D08(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0D09(0x0003) MISSED OFFSET
	struct FVector                                     AnimHomingVelocity;                                       // 0x0D0C(0x000C) (BlueprintVisible, Transient, IsPlainOldData)
	bool                                               AnimMoving;                                               // 0x0D18(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsAnimMovingToArtsTarget;                                 // 0x0D19(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsAnimMovingRotationToDirection;                          // 0x0D1A(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x0D1B(0x0001) MISSED OFFSET
	struct FVector                                     AnimMovingLocation;                                       // 0x0D1C(0x000C) (BlueprintVisible, Transient, IsPlainOldData)
	float                                              AnimMovingSpeed;                                          // 0x0D28(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               AnimRotation;                                             // 0x0D2C(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0D2D(0x0003) MISSED OFFSET
	float                                              AnimRotationYaw;                                          // 0x0D30(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AnimRotationSpeed;                                        // 0x0D34(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AimWeaponBlendSpeed;                                      // 0x0D38(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimWeaponBlendWeight;                                     // 0x0D3C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsAimWeapon;                                              // 0x0D40(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsTurnTarget;                                             // 0x0D41(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x2];                                       // 0x0D42(0x0002) MISSED OFFSET
	float                                              InterpTurnSpeed;                                          // 0x0D44(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpTurnAngleRange;                                     // 0x0D48(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InterpTurnTime;                                           // 0x0D4C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FlashRaidTimer;                                           // 0x0D50(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     FlashRaidStart;                                           // 0x0D54(0x000C) (BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     FlashRaidEnd;                                             // 0x0D60(0x000C) (BlueprintVisible, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x0D6C(0x0004) MISSED OFFSET
	struct FName                                       RequestFlashRaid;                                         // 0x0D70(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               FlashRaidFadeout;                                         // 0x0D78(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData18[0x7];                                       // 0x0D79(0x0007) MISSED OFFSET
	struct FBtlTime_DatatableLabel                     FlashRaidSlowLabel;                                       // 0x0D80(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              FlashRaidReserveSec;                                      // 0x0D88(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                FlashRaidPriority;                                        // 0x0D8C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FlashRaidFadeVisualTask;                                  // 0x0D90(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StrikeAttackTimer;                                        // 0x0D98(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              StrikeAttackFadeTime;                                     // 0x0D9C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseKeyFrameAnim_Default;                                 // 0x0DA0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x0DA1(0x0003) MISSED OFFSET
	float                                              DynamicsWeight_Default;                                   // 0x0DA4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GravityPower_Default;                                     // 0x0DA8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DampingPower_Default;                                     // 0x0DAC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EAnimPhysSimSpaceType                              SimulationSpace_Default;                                  // 0x0DB0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUpperParts_Default;                                      // 0x0DB1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLowerParts_Default;                                      // 0x0DB2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHairParts_Default;                                       // 0x0DB3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bGroudCollision_Default;                                  // 0x0DB4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bExtraParts_Default;                                      // 0x0DB5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x2];                                       // 0x0DB6(0x0002) MISSED OFFSET
	float                                              ClothBlendWeight_Default;                                 // 0x0DB8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bChangeGroundCollisionInAir;                              // 0x0DBC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               RequestBrake;                                             // 0x0DBD(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData21[0x2];                                       // 0x0DBE(0x0002) MISSED OFFSET
	struct FVector                                     OffsetAnimLocation;                                       // 0x0DC0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               ReserveOverlimit;                                         // 0x0DCC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0DCD(0x0003) MISSED OFFSET
	float                                              WeaponScaling;                                            // 0x0DD0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	EBtlStrikeAttackState                              StrikeAttackState;                                        // 0x0DD4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x0DD5(0x0003) MISSED OFFSET
	struct FName                                       ReserveStrikeAttackArts;                                  // 0x0DD8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ABtlCharacterBase*                           StrikeAttackCaller;                                       // 0x0DE0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnMagicSpawned;                                           // 0x0DE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeHiddenInBattle;                                   // 0x0DF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EBtlFlashRaidState                                 FlashRaidState;                                           // 0x0E08(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData24[0x7];                                       // 0x0E09(0x0007) MISSED OFFSET
	struct FName                                       CancelTeleportMoveBoneName;                               // 0x0E10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData25[0x8];                                       // 0x0E18(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCharacterBase");
		return ptr;
	}


	bool UseItemProcess(int ItemID);
	void UpdateUnitScale(float Scale);
	void UpdateUnitOrderFlags();
	void UpdateStrikeSmashCondition();
	void UpdateAIRunning();
	bool TryRevival();
	bool TryDeathAvoidance(int HitPoint);
	void TargetDeadProcess(class ABtlCharacterBase* DmgActor, const struct FBtlArtsData& ArtsData);
	void ShowDamageLog(const struct FText& Log);
	void SetWeaponScaling(float Value);
	void SetWeaponMesh(const struct FName& MainWeaponBoneName, const struct FName& MountWeaponBoneName);
	void SetWallCollision(bool Enable);
	void SetWaitDeathStrokeOnGroundFlag(bool Enable);
	void SetWaitDeathStroke(EBtlWaitDeathStrokeState State);
	void SetVisibleInBattleSubToFront();
	void SetVisibleInBattleFrontToSub();
	void SetVisibleInBattleCategory(bool bEnable, const struct FBtlVisible_DatatableLabel& Category);
	void SetVectorDynamicMaterials(const struct FName& ParameterName, const struct FVector& Value);
	void SetUseKeyFrameAnim(bool Value);
	void SetUpperParts(bool Value);
	bool SetUntargetableForAI(bool Enable);
	void SetUntargetableFlags(bool Enable, EBtlBitFlagCategory Category);
	EBtlUnitGroup SetUnitGroup(EBtlUnitGroup Group);
	bool SetUnbreakableCore(bool Enable);
	bool SetTransitionSuperAvoid(bool Enable);
	void SetTemporaryTargetCharacter(class ABtlCharacterBase* Character);
	void SetTargetComponent(class UBtlTargetCursorComponent* Component);
	void SetTargetCharacter(class ABtlCharacterBase* Character);
	bool SetTacticsUpdated(bool on);
	void SetSuperArmorFlags(bool Enable, EBtlBitFlagCategory Category);
	bool SetSuperArmor(bool Enable);
	void SetStrikeAttackState(EBtlStrikeAttackState State);
	bool SetSpCheckSkip(bool Enable);
	void SetSpawnTransform(const struct FTransform& Transform);
	void SetSpawnLocation(const struct FVector& Location);
	void SetSimulationSpace(EAnimPhysSimSpaceType Value);
	void SetScalarDynamicMaterials(const struct FName& ParameterName, float Value);
	void SetRotationRateYaw(float RotationRateYaw);
	void SetResetOnTeleport(bool on);
	void SetReserveStrikeAttackArts(const struct FName& StrikeAttackArts);
	void SetReserveOverlimit(bool on);
	bool SetReserveBoostAttackDown(bool Enable);
	float SetRecoilTime(float NewTime, bool bForceOverride);
	bool SetReceiveDamage(bool Enable);
	void SetRareUnit(bool Enable);
	void SetRaiseDeadInvicibleTime(float Time);
	void SetPushedCoefficient(float Value);
	bool SetPlayerOperation(bool Enable);
	bool SetOverLimit(bool Enable);
	void SetNotDieFlags(bool Enable, EBtlBitFlagCategory Category);
	bool SetNotConsumeSp(bool Enable);
	bool SetNeverPushed(bool Enable);
	void SetMoveVelocity(const struct FVector& Velocity);
	void SetMovementComponentFlags(bool Enable, EBtlBitFlagCategory Category);
	bool SetMoveBeforeAttack(bool Enable);
	bool SetMomentaryRush(bool RushEnable);
	bool SetMomentaryFlying(bool FlyEnable);
	bool SetMomentaryDisableSuperAvoid(bool bDisableSuperAvoid);
	void SetMass(float Value);
	void SetLowerParts(bool Value);
	void SetJustGuardKeepTimer(float Time);
	bool SetJustGuard(bool Enable);
	bool SetJustAvoid(bool Enable);
	void SetInvincibleFlags(bool Enable, EBtlBitFlagCategory Category);
	bool SetInspirationPlay(bool bEnable);
	bool SetIgnoreTPCost(bool Enable);
	bool SetIgnoreTP(bool Enable, EBtlBitFlagCategory Category);
	bool SetIgnoreSP(bool Enable, EBtlBitFlagCategory Category);
	void SetHoldHeightTimer(float Timer);
	void SetHoldHeight(bool Enable);
	bool SetHitOnlyPlayerUnit(bool Enable);
	EBtlHitFilter SetHitFilter(EBtlHitFilter Filter);
	bool SetHideDamageUI(bool Enable);
	void SetHiddenMeshes(bool Hidden);
	void SetHiddenInBattleCategory(bool Hidden, EBtlBitFlagCategory Category);
	void SetHairParts(bool Value);
	bool SetGuardStart(bool Enable);
	void SetGroundCollision(bool Value);
	void SetGravityScale(float GravityScale);
	void SetGravityPower(float Value, float Time);
	bool SetForceTeleportFlag(bool Enable);
	void SetForceTeleport(bool on);
	bool SetForceSmashCondition(bool Enable);
	bool SetForceDown(bool Enable);
	bool SetForceCoreBreak(bool Enable);
	bool SetFlyFlag(bool Enable);
	void SetFlashRaid(EBtlFlashRaidState State);
	bool SetFixPosition(bool Enable);
	void SetFixLocation(const struct FVector& Location);
	void SetExtraParts(bool Value);
	bool SetEnableRestartAI(bool on);
	bool SetEnablePush(bool Enable);
	void SetElementType(bool Overwrite, EBtlElementType Element);
	void SetDynamicsWeight(float Value, float Time);
	void SetDownFlags(bool Enable, EBtlBitFlagCategory Category);
	void SetDirectionInterpValue(float Value);
	void SetDirectionBackThreshold(float Value);
	void SetDefaultPhysicsParam();
	bool SetDeadAir(bool Enable);
	void SetDampingPower(float Value, float Time);
	void SetDamageCollisionFlags(bool Enable, EBtlBitFlagCategory Category);
	bool SetDamageAction(bool Enable);
	void SetCoreHp(class UBtlDamageSphereComponent* CoreCollision, int HP);
	void SetCoreBreakedFlag(bool on, class UBtlDamageSphereComponent* CoreCollision);
	void SetComboArtsRange(float ArtsRange);
	void SetColorDynamicMaterials(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetClothTeleportCheck(bool Enable);
	void SetClothBlendWeight(float Value, float Time);
	bool SetCheckInField(bool bEnable);
	bool SetChantKeep(bool bEnable);
	bool SetChantComplete(bool bEnable);
	void SetChangeUnit(bool on);
	void SetCapsuleCollisionResponseOnAttack(bool Enable);
	void SetCapsuleCollisionResponseBtlUnits(bool Enable);
	void SetCapsuleCollisionFlags(bool Enable, EBtlBitFlagCategory Category);
	void SetCameraFadeFlags(bool Enable, EBtlBitFlagCategory Category);
	void SetBtlInOutState(EBtlInOutState State);
	void SetBtlAIController(class ABtl_AIControllerBase* AIController);
	bool SetBreakSuperAvoid(bool bBreak);
	bool SetBreakRush(bool bBreak);
	bool SetBreakFlying(bool bBreak);
	bool SetBreakEndurance(bool Enable);
	bool SetBreakArmor(bool bBreak);
	bool SetBoostAttackWarpUnitSizeComponent(bool on);
	void SetBoostAttackCaller(class ABtlCharacterBase* Caller);
	bool SetBoostAttackBreakExecuted(bool Enable);
	void SetBlendType_Move(EBtlAnimationBlendType BlendType);
	void SetBlendType_Attack(EBtlAnimationBlendType BlendType);
	void SetBehaviorTree(class UBehaviorTree* Behavior);
	void SetAttackCollisionFlags(bool Enable, EBtlBitFlagCategory Category);
	bool SetArmorFlag(bool Enable);
	bool SetAppearedMagic(bool bEnable);
	void SetAIFlag(bool Enable, EBtlBitFlagCategory Category);
	EBtlElementType SetActingElement(EBtlElementType Element);
	void SetAcceptionSmashConditionTime(float Time);
	void SendUnitMessage(const struct FString& Message, class UObject* UserData);
	void ReviveProcess(class ABtlCharacterBase* Healer, int HealValue);
	void RestartAI();
	void ResetWeaponMesh();
	void RequestOnSelfDead();
	void RebuildWeapon();
	void RaiseDead(class ABtlCharacterBase* Target, const struct FName& HitEffect, const struct FName& ArtsName, int* ResultHealValue);
	void PlayFlashRaidEnable();
	void OnSelfDead();
	void OnReceiveMessage(const struct FString& Message, class UObject* UserData);
	void OnReceiveFlexibleAnimNotifyEnd(int UserInteger, float UserFloat, const struct FString& UserString, const struct FLinearColor& UserColor);
	void OnReceiveFlexibleAnimNotifyBegin(int UserInteger, float UserFloat, const struct FString& UserString, const struct FLinearColor& UserColor);
	void OnReceiveDamage(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision, int Damage, bool IsCoreBreak, bool* IsReactionOverride);
	void OnRebuildWeaponComplated();
	void OnFlashRaidIn();
	void OnEndAttackVoiceEvent(int VoiceIndex);
	void OnChangeState(EBattleActionState NowState, EBattleActionState PreState);
	void OnBuildComplated();
	void OnBeginOverlimit(bool* RequestAccepted, class UBtlActionQuery** ActionQuery);
	void OnBeginAttackVoiceEvent(int VoiceIndex);
	void NativeUpdateTick(float DeltaSeconds);
	void LaunchBtlCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	bool K2_IsTargetStep(class ABtlCharacterBase* DmgActor, bool RunAutoStep);
	bool K2_IsSuperArmor(class ABtlCharacterBase* DmgActor, bool Endurance);
	bool K2_IsNotDieCheck(class ABtlCharacterBase* DmgActor, const TScriptInterface<class UBtlAttackCollisionInterface>& AtkCollision);
	bool K2_IsInvincible(class ABtlCharacterBase* DmgActor);
	bool K2_IsFriendlyFire(class ABtlCharacterBase* DmgActor, const TScriptInterface<class UBtlAttackCollisionInterface>& AtkCollision);
	bool K2_IsDamageProcess(class ABtlCharacterBase* DmgActor);
	bool K2_CalculateWeakness(class ABtlCharacterBase* DmgActor, const struct FBtlArtsData& ArtsData, const TScriptInterface<class UBtlAttackCollisionInterface>& AtkCollision);
	bool K2_CalculateResistance(class ABtlCharacterBase* DmgActor, const struct FBtlArtsData& ArtsData, const TScriptInterface<class UBtlAttackCollisionInterface>& AtkCollision);
	int K2_CalculateHealMagic(class ABtlCharacterBase* Target, const struct FName& ArtsName);
	float K2_CalculateEndurance(const TScriptInterface<class UBtlAttackCollisionInterface>& AtkCollision, class ABtlCharacterBase* DmgActor, const struct FBtlArtsData& NowArts, bool IsCritical, bool Backward);
	bool K2_CalculateCritical(class ABtlCharacterBase* DmgActor, const TScriptInterface<class UBtlAttackCollisionInterface>& AtkCollision);
	bool K2_CalculateBackward(class ABtlCharacterBase* DmgActor);
	bool IsValidTarget();
	bool IsUseOverlimitCamera();
	bool IsUseFacial();
	bool IsUsableComboStartCondition();
	bool IsUntargetableForAI();
	bool IsUntargetableFlags();
	bool IsTemporaryTargetCharacter();
	bool IsSuperArmorFlags();
	bool IsReceiveSmashCondition();
	bool IsPlayingCounterRaid();
	bool IsNotDieFlags();
	bool IsMoveBeforeAttack();
	bool IsMomentaryRush();
	bool IsMomentaryFlying();
	bool IsMomentaryDisableSuperAvoid();
	bool IsMagicUser();
	bool IsInvincibleFlagsByCategory(EBtlBitFlagCategory Category);
	bool IsInvincibleFlags();
	bool IsInstantDeathCheck(const TScriptInterface<class UBtlAttackCollisionInterface>& AtkCollision, class ABtlCharacterBase* DmgActor);
	bool IsInspirationPlay();
	bool IsInRecoil();
	bool IsIgnoreTP();
	bool IsIgnoreSP();
	bool IsHiddenInBattle();
	bool IsGuardStart();
	bool IsGigant();
	bool IsFly();
	bool IsEnableSuperAvoid();
	bool IsEnableOverlimit();
	bool IsEnableFlying();
	bool IsEnableArmor();
	bool IsDragon();
	bool IsDownFlags();
	bool IsDeadAndFallen();
	bool IsDeadAir();
	bool IsDead();
	bool IsDamageCollisionFlags();
	bool IsCorpseLeft();
	bool IsChantKeep();
	bool IsChantComplete();
	bool IsCapsuleCollisionFlags();
	bool IsCameraFadeFlags();
	bool IsBreakSuperAvoid();
	bool IsBreakRush();
	bool IsBreakFlying();
	bool IsBreakArmor();
	bool IsBoss();
	bool IsAutoOperation(bool bIgnorePlayer);
	bool IsAttackCollisionFlags();
	bool IsArtsSimulatorSpawnActor();
	bool IsAppearedMagic();
	bool IsAIRunning();
	void HealMagic(class ABtlCharacterBase* Target, const struct FName& HitEffect, const struct FName& ArtsName, int* ResultHealValue);
	bool HealBadStatus(class ABtlCharacterBase* Target, const struct FName& HitEffect, const struct FName& ArtsName);
	bool HasSuperAvoidFlag();
	bool HasFlyingFlag();
	bool HasArmorFlag();
	float GetWeaponScaling();
	bool GetWaitDeathStrokeOnGroundFlag();
	EBtlWaitDeathStrokeState GetWaitDeathStroke();
	class UBtlVisualTaskComponent* GetVisualTaskComponent();
	class UBtlUnitSizeComponent* GetUnitSizeComponent();
	class UBtlUnitScriptComponent* GetUnitScriptComponent();
	class UClass* GetUnitScriptClass();
	float GetUnitScale();
	struct FName GetUnitID();
	EBtlUnitGroup GetUnitGroup();
	void GetUnitData(struct FBtlUnitData* UnitDdata);
	bool GetUnbreakableCore();
	bool GetTransitionSuperAvoid();
	int GetTotalDamage();
	class ABtlCharacterBase* GetTemporaryTargetCharacter();
	struct FVector GetTargetComponentLocation(bool IgnoreTemporary);
	class UBtlTargetCursorComponent* GetTargetComponent(bool IgnoreTemporary);
	class ABtlCharacterBase* GetTargetCharacter(bool IgnoreTemporary);
	bool GetTacticsUpdated();
	bool GetSurfaceInfo(const struct FName& SocketName, struct FName* SurfaceName, struct FColor* SurfaceColor);
	bool GetSuperArmor();
	EBtlStrikeAttackState GetStrikeAttackState();
	struct FTransform GetStrikeAttackerTransform();
	class UAriseStatusHandle* GetStatusHandle();
	class UBtlStatusComponent* GetStatus();
	float GetSpellCastRate();
	bool GetSpCheckSkip();
	struct FTransform GetSpawnTransform();
	int GetSoundScale();
	class UBtlSemiautoComponent* GetSemiautoComponent();
	float GetRotationRateYaw();
	struct FName GetReserveStrikeAttackArts();
	bool GetReserveOverlimit();
	bool GetReserveBoostAttackDown();
	bool GetRequestOnSelfDead();
	float GetRecoilTime();
	bool GetReceiveDamage();
	bool GetRareUnit();
	float GetPushedCoefficient();
	struct FAchCharacterBuildParameters GetPreviewBuildParameter();
	bool GetPlayerOperation();
	bool GetOverLimit();
	bool GetNotConsumeSp();
	bool GetNeverPushed();
	struct FVector GetMoveVelocity();
	float GetMass();
	EBtlLaunchCharacterType GetLaunchCharacterType();
	float GetJustGuardKeepTimer();
	bool GetJustGuard();
	bool GetJustAvoid();
	bool GetIsJustGuardTime();
	bool GetIsJustAvoidTime();
	int GetInstantDeathDamageValue();
	bool GetIgnoreTPCost();
	void GetHoldHeight(bool* IsHoldHeight, float* Height);
	bool GetHitOnlyPlayerUnit();
	EBtlHitFilter GetHitFilter();
	float GetHitEffectScale();
	bool GetHideDamageUI();
	class UBtlHateComponent* GetHateComponent();
	float GetGravityScale();
	bool GetForceTeleportFlag();
	bool GetForceSmashCondition();
	bool GetForceDown();
	bool GetForceCoreBreak();
	float GetFlyHeight();
	bool GetFlyFlag();
	EBtlFlashRaidState GetFlashRaid();
	bool GetFixPosition();
	float GetEnduranceCorrection(const struct FName& ArtsLabel);
	bool GetEnableRestartAI();
	bool GetEnablePush();
	EBtlElementType GetElementType();
	EBtlEffectSizeType GetEffectSizeType();
	float GetEffectScale();
	int GetDownSuccessPercent();
	int GetDownCount();
	float GetDirectionInterpValue();
	float GetDirectionBackThreshold();
	bool GetDamageAction();
	int GetCoreHp(class UBtlDamageSphereComponent* CoreCollision);
	class UBtlDamageSphereComponent* GetCoreCollision(const struct FName& CoreCollisionLabel);
	struct FName GetComboStartArts(bool IgnoreDistance);
	struct FName GetComboNextArtsCheck(const struct FName& PrevArts);
	struct FName GetComboNextArts(const struct FName& PrevArts);
	float GetComboArtsRange();
	int GetCombo();
	class UAriseCharacterBuildComponent* GetCharacterBuildComponent();
	bool GetChangeUnit();
	EBtlInOutState GetBtlInOutState();
	TArray<class UBtlSelfCapsuleComponent*> GetBtlCapsuleComponents();
	class UBtlSelfCapsuleComponent* GetBtlCapsuleComponent();
	class ABtl_AIControllerBase* GetBtlAIController();
	bool GetBreakEndurance();
	bool GetBoostAttackWarpUnitSizeComponent();
	class ABtlCharacterBase* GetBoostAttackCaller();
	bool GetBoostAttackBreakExecuted();
	class UBehaviorTree* GetBehaviorTree();
	class UBtlUnitDebugViewer* GetBattleDebugViewer();
	EBtlAvoidAction GetAvoidAction();
	bool GetArmorFlag();
	class UBtlAnimInstance* GetAnimInstance();
	class UClass* GetAnimClass();
	class UAlphaMaskComponent* GetAlphaMaskComponent();
	class UBtlActionProcessor* GetActionProcessor();
	EBtlElementType GetActingElement();
	void EndOverlimitProcess();
	void DevelopSetForceNotDieFlags(bool Enable);
	void DestroyBtlAIController();
	void DeadActionSetting();
	void ClearTargetCharacter();
	void ClearInvincibleFlags();
	void ClearDownFlags();
	void ClearComboNextArts();
	void ClearCombo();
	bool CheckHitOnlyPlayerUnit(class ABtlCharacterBase* DmgActor);
	bool CanBoostAttackBreak(class ABtlCharacterBase* ReceiveUnit, const struct FBtlArtsData& ArtsData);
	void CalculateEndurance(const TScriptInterface<class UBtlAttackCollisionInterface>& AtkCollision, class ABtlCharacterBase* DmgActor, const struct FBtlArtsData& NowArts, bool IsCritical, bool Backward, bool FriendlyFire, bool* Endurance);
	void CalculateDamage(class UShapeComponent* AtkCollision, class ABtlCharacterBase* DmgActor, class UBtlDamageSphereComponent* DmgCollision, const struct FBtlArtsData& ArtsData, bool IsGuard, bool IsCritical, bool IsWeakness, bool IsResistance, int* Value, bool* IsResistanceSkill);
	void BuildMesh();
	void BtlVoiceStateEvent__DelegateSignature(int VoiceIndex);
	void BtlTargetedChangedEvent__DelegateSignature(class ABtlCharacterBase* Target, bool Selected);
	void BtlSmashEvents__DelegateSignature(class ABtlCharacterBase* Receiver);
	void BtlSimpleCharacterEvent__DelegateSignature(class ABtlCharacterBase* SelfCharacter);
	void BtlRecoveryEvent__DelegateSignature(class ABtlCharacterBase* SelfCharacter, class ABtlCharacterBase* Healer, const struct FBtlArtsData& PreArts);
	void BtlOnChangeTargetEvent__DelegateSignature(class ABtlCharacterBase* SelfCharacter, class UBtlTargetCursorComponent* NewTargetComponent, class ABtlCharacterBase* NewTargetCharacter, class UBtlTargetCursorComponent* PrevTargetComponent);
	void BtlOnChangeHiddenInBattle__DelegateSignature(bool bNewHidden);
	void BtlMagicSpawnedEvent__DelegateSignature(const struct FBtlArtsData& ArtsData);
	void BtlDeadEvent__DelegateSignature(class ABtlCharacterBase* SelfCharacter, class ABtlCharacterBase* Attacker, const struct FBtlArtsData& PreArts);
	void BtlCriticalEvent__DelegateSignature(class ABtlCharacterBase* Target);
	void BtlCharacterEventDispatcher__DelegateSignature();
	void BtlAttackEndEvent__DelegateSignature(class ABtlCharacterBase* SelfCharacter, EBattleActionState NowState, const struct FBtlArtsData& PreArts);
	void BtlAttackBeginEvent__DelegateSignature(class ABtlCharacterBase* SelfCharacter, const struct FBtlArtsData& NowArts, EBattleActionState PreState);
	void BattleOutFinish(TEnumAsByte<EAlphaMask> Type);
	void BattleOut(float FadeTime);
	void BattleInFinish(TEnumAsByte<EAlphaMask> Type);
	void BattleIn(float FadeTime);
	void BackStepFadeOut();
	float AddRecoilTime(float aTime);
	void AddInputVector(const struct FVector& WorldVector, bool OrientRotationToMovement, bool bForce);
	void AddDownCount();
	void AddCombo(int Damage, class ABtlCharacterBase* Attacker);
};


// Class Arise.BtlCharacterMovementComponent
// 0x0010 (0x0790 - 0x0780)
class UBtlCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0780(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCharacterMovementComponent");
		return ptr;
	}


	void SetRootMotionScale(const struct FVector& Scale);
	struct FVector GetRootMotionScale();
};


// Class Arise.BtlCinematicCharacter
// 0x0010 (0x09B0 - 0x09A0)
class ABtlCinematicCharacter : public AAriseCinematicCharacter
{
public:
	struct FName                                       BuildingUnitID;                                           // 0x09A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x09A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCinematicCharacter");
		return ptr;
	}

};


// Class Arise.BtlCollisionManager
// 0x0078 (0x03A8 - 0x0330)
class ABtlCollisionManager : public ABtlBasicManagerBase
{
public:
	TArray<struct FBtlOverlapCollision>                Overlaps;                                                 // 0x0330(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TArray<struct FBtlAttackCollision>                 AtkCollisions;                                            // 0x0340(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	struct FBtlCollisionComponentCacheMap              ComponentCache;                                           // 0x0350(0x0050) (Edit, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCollisionManager");
		return ptr;
	}

};


// Class Arise.BtlCollisionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlCollisionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCollisionLibrary");
		return ptr;
	}


	void STATIC_SetEnablePush(class UObject* WorldContextObject, bool on);
	void STATIC_RemoveOverlapCollision(class UObject* WorldContextObject, class UBtlSphereComponent* A, class UBtlSphereComponent* B);
	void STATIC_RemoveAttackCollisionActor(class UObject* WorldContextObject, class AActor* Actor, class UShapeComponent* Collision);
	void STATIC_ReleaseAttackCollision(class UObject* WorldContextObject, class UShapeComponent* AttackCollision, bool bIsNonePoolMode);
	bool STATIC_IsOverlap(class ABtlCharacterBase* ActorA, class ABtlCharacterBase* ActorB, float Margin);
	void STATIC_DoAttackCollisionHitEnd(class UShapeComponent* AttackCollision, class AActor* DamageActor, class UPrimitiveComponent* DmageCollision);
	void STATIC_DoAttackCollisionHitBegin(class UShapeComponent* AttackCollision, class AActor* DamageActor, class UPrimitiveComponent* DmageCollision);
	void STATIC_ClearOverlapCollisionAll(class UObject* WorldContextObject);
	void STATIC_ClearAttackCollisionAll(class UObject* WorldContextObject);
	class UBtlAttackSphereComponent* STATIC_AttachAttackSphereCollision(class UObject* WorldContextObject, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, class UClass* GeneratedClass, const struct FTransform& RelativeTransform, float SphereRadius, const struct FAttackSphereParam& AttackParam, bool bIsNonePoolMode);
	class UBtlAttackCapsuleComponent* STATIC_AttachAttackCapsuleCollision(class UObject* WorldContextObject, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, class UClass* GeneratedClass, const struct FTransform& RelativeTransform, float InRadius, float InHalfHeight, const struct FAttackSphereParam& AttackParam, bool bIsNonePoolMode);
	void STATIC_AddOverlapCollision(class UObject* WorldContextObject, class UBtlSphereComponent* A, class UBtlSphereComponent* B);
	void STATIC_AddAttackCollisionActor(class UObject* WorldContextObject, class AActor* Actor, class UShapeComponent* Collision);
};


// Class Arise.BtlCollisionScript
// 0x0010 (0x0038 - 0x0028)
class UBtlCollisionScript : public UObject
{
public:
	TArray<struct FBtlCollisionScriptInfomation>       OverlapInfo;                                              // 0x0028(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCollisionScript");
		return ptr;
	}


	void Tick(float Delta);
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnDestoryActor(class AActor* DestroyedActor);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class Arise.BtlCollisionScriptBlueprintBase
// 0x0000 (0x0038 - 0x0038)
class UBtlCollisionScriptBlueprintBase : public UBtlCollisionScript
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCollisionScriptBlueprintBase");
		return ptr;
	}


	void Received_TickDestruct(float Delta, class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, const TScriptInterface<class UBattleDestructibleInterface>& OtherDestruct);
	void Received_TickCharacter(float Delta, class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, class ABtlCharacterBase* OtherCharacter);
	void Received_Tick(float Delta, class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, class AActor* OtherActor);
	void Received_OnEndOverlapDestruct(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, const TScriptInterface<class UBattleDestructibleInterface>& OtherDestruct);
	void Received_OnEndOverlapCharacter(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, class ABtlCharacterBase* OtherCharacter);
	void Received_OnEndOverlap(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, class AActor* OtherActor);
	void Received_OnBeginOverlapDestruct(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, const TScriptInterface<class UBattleDestructibleInterface>& OtherDestruct);
	void Received_OnBeginOverlapCharacter(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, class ABtlCharacterBase* OtherCharacter);
	void Received_OnBeginOverlap(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, class AActor* OtherActor);
	bool Received_FilterScript(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, class AActor* OtherActor);
	void Received_ClearCollisionDestruct(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, const TScriptInterface<class UBattleDestructibleInterface>& OtherDestruct);
	void Received_ClearCollisionCharacter(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, class ABtlCharacterBase* OtherCharacter);
	void Received_ClearCollision(class UPrimitiveComponent* SelfComp, class AActor* SelfActor, class UPrimitiveComponent* OtherComp, class AActor* OtherActor);
};


// Class Arise.BtlCollisionScriptRunnerInterface
// 0x0000 (0x0028 - 0x0028)
class UBtlCollisionScriptRunnerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCollisionScriptRunnerInterface");
		return ptr;
	}


	void SetCollisionScript(class UBtlCollisionScript* Script);
	class UBtlCollisionScript* GetCollisionScript();
};


// Class Arise.BtlCollisionScriptLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlCollisionScriptLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCollisionScriptLibrary");
		return ptr;
	}


	bool STATIC_UnRegisterCollisionScript(const TScriptInterface<class UBtlCollisionScriptRunnerInterface>& ScriptRunner);
	bool STATIC_RegisterCollisionScript(class UBtlCollisionScript* Script, const TScriptInterface<class UBtlCollisionScriptRunnerInterface>& ScriptRunner);
	bool STATIC_K2_RegisterCollisionScriptEditinline(const struct FBtlCollisionScriptEditInline& Script, const TScriptInterface<class UBtlCollisionScriptRunnerInterface>& ScriptRunner);
	class UBtlCollisionScript* STATIC_DuplicateCollisionScript(const struct FBtlCollisionScriptEditInline& Script, class UObject* Outer);
};


// Class Arise.BtlComboDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlComboDataClass : public UXmlDatabaseBase
{
public:
	struct FBtlComboDataList                           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlComboDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BtlCommonSkillScriptBase
// 0x0058 (0x0080 - 0x0028)
class UBtlCommonSkillScriptBase : public UObject
{
public:
	class UBtlEventDispatcher*                         EventDispatcher;                                          // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBtlTimerHandleComponent*                    TimerHandle;                                              // 0x0030(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAriseStatusHandle*                          StatusHandle;                                             // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	struct FName                                       OwnerId;                                                  // 0x0048(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SkillLabel;                                               // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FAriseSkillEffect>                   SkillEffects;                                             // 0x0058(0x0010) (ZeroConstructor, Transient)
	EAriseSkillEffectScope                             SkillEffectScope;                                         // 0x0068(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	int                                                OverlapCount;                                             // 0x006C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	EAriseSkillState                                   SkillState;                                               // 0x0070(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCommonSkillScriptBase");
		return ptr;
	}


	void UnapplySkill();
	void SetEnabled(bool Enabled);
	void RegisterSkillEffectValue(int Index, float Value);
	void RegisterSkillEffect(const struct FAriseSkillEffect& SkillEffect);
	void OnUnapplySkill();
	void OnInitialized();
	void OnFinalized();
	void OnEnabled();
	void OnDisabled();
	void OnBaseInitialized();
	void OnApplySkill();
	class UWorld* GetWorld();
	EAriseSkillState GetSkillState();
	struct FName GetSkillLabel();
	float GetSkillEffectValueByIndex(int Index);
	float GetSkillEffectValue(const struct FName& ParameterLabel);
	struct FName GetParameterLabel(int Index);
	float GetEffectValue(const struct FAriseSkillEffect& Effect);
	void ApplySkillWithValue(const struct FName& ParameterLabel, float Value);
	void ApplySkill();
};


// Class Arise.BtlContinuousBonusManager
// 0x0020 (0x0350 - 0x0330)
class ABtlContinuousBonusManager : public ABtlBasicManagerBase
{
public:
	class UDataTable*                                  Table;                                                    // 0x0330(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  ItemDropBonusTable;                                       // 0x0338(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BonusHitCount;                                            // 0x0340(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              startValue;                                               // 0x0344(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              AddValue;                                                 // 0x0348(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x034C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlContinuousBonusManager");
		return ptr;
	}


	void Received_Initialize();
	void Received_Finalize();
	float GetStartBonus();
	float GetBonus();
	float GetAddValue();
	void ClearBattleBonusValue();
	void ApplyContinueBonus();
	void AddBattleEnemyCountCountBonusValue(int EnemyCount, const struct FName& TableID);
};


// Class Arise.BtlCutSceneBindingParam
// 0x0020 (0x0048 - 0x0028)
class UBtlCutSceneBindingParam : public UObject
{
public:
	TArray<struct FBtlCutSceneCharacterBindingParam>   CharacterBindingList;                                     // 0x0028(0x0010) (ZeroConstructor)
	TArray<struct FBtlCutSceneAnimLocationBindingParam> AnimLocationBindingList;                                  // 0x0038(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCutSceneBindingParam");
		return ptr;
	}


	void ClearCharacterBinding();
	void ClearAnimLocationBinding();
	void AddCharacterBinding(class ABtlCharacterBase* Unit);
	void AddAnimLocationBinding(class ABtlCharacterBase* Unit, const struct FName& OverrideSocket);
};


// Class Arise.BtlCutSceneProcessBase
// 0x0000 (0x0028 - 0x0028)
class UBtlCutSceneProcessBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCutSceneProcessBase");
		return ptr;
	}

};


// Class Arise.BtlCutSceneWarpActor
// 0x0038 (0x0060 - 0x0028)
class UBtlCutSceneWarpActor : public UBtlCutSceneProcessBase
{
public:
	class ABtlCharacterBase*                           Unit;                                                     // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FTransform                                  Transform;                                                // 0x0030(0x0030) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCutSceneWarpActor");
		return ptr;
	}

};


// Class Arise.BtlCutSceneRestoreCapsule
// 0x0010 (0x0038 - 0x0028)
class UBtlCutSceneRestoreCapsule : public UBtlCutSceneProcessBase
{
public:
	class ABtlCharacterBase*                           Unit;                                                     // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              CapsuleRadius;                                            // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCutSceneRestoreCapsule");
		return ptr;
	}

};


// Class Arise.BtlCutSceneManager
// 0x04E0 (0x0810 - 0x0330)
class ABtlCutSceneManager : public ABtlBasicManagerBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0330(0x0010) MISSED OFFSET
	class ALevelSequenceActor*                         NowSequenceActor;                                         // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULevelSequencePlayer*                        NowSequencePlayer;                                        // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULevelSequence*                              NowSequenceAsset;                                         // 0x0350(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0358(0x0008) MISSED OFFSET
	struct FTransform                                  NowPlayTransform;                                         // 0x0360(0x0030) (Transient, IsPlainOldData)
	struct FName                                       NowSequenceName;                                          // 0x0390(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPrePlayEvents;                                          // 0x0398(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    OnPlayEvents;                                             // 0x03A8(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    OnPauseEvents;                                            // 0x03B8(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    OnEndEvents;                                              // 0x03C8(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FBtlStrikeData                              NowStrikeData;                                            // 0x03D8(0x0080) (Transient)
	struct FBtlArtsData                                NowArtsData;                                              // 0x0458(0x00B8) (Transient)
	class ABtlCharacterBase*                           NowPlayUnit;                                              // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ABtlCharacterBase*                           NowStrikeUnit;                                            // 0x0518(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ABtlCharacterBase*                           NowTargetUnit;                                            // 0x0520(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<class ABtlCharacterBase*, EBattleActionState> CutInState;                                               // 0x0528(0x0050) (ZeroConstructor, Transient)
	TArray<struct FBtlCutSceneBindingData>             ActorBinding;                                             // 0x0578(0x0010) (ZeroConstructor, Transient)
	TArray<struct FBtlCutSceneLocationBindingPair>     LocationBinding;                                          // 0x0588(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0598(0x0010) MISSED OFFSET
	TArray<class UBtlCutSceneProcessBase*>             FinalizeProcessList;                                      // 0x05A8(0x0010) (ZeroConstructor, Transient)
	struct FBtlCutSceneOptionParam                     OptionParam;                                              // 0x05B8(0x0018) (Transient)
	EBtlCutSceneReserveAction                          ReserveAction;                                            // 0x05D0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x05D1(0x0003) MISSED OFFSET
	int                                                ReserveDelay;                                             // 0x05D4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x05D8(0x0008) MISSED OFFSET
	struct FBtlCutSceneReserveSpecialStrike            ReserveSpecialStrike;                                     // 0x05E0(0x0060) (Transient)
	struct FBtlCutSceneReserveStrikeSmash              ReserveStrikeSmash;                                       // 0x0640(0x0050) (Transient)
	struct FBtlCutSceneReserveMystic                   ReserveMystic;                                            // 0x0690(0x0050) (Transient)
	struct FBtlCutSceneReserveEvent                    ReserveEvent;                                             // 0x06E0(0x0050) (Transient)
	struct FName                                       CurrentArtsLabel;                                         // 0x0730(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsScreenCaptchaMode;                                     // 0x0738(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsLoadRequest;                                           // 0x0739(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsLoadRequestComplete;                                   // 0x073A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	EBtlAssetCategory                                  LoadAssetCategory;                                        // 0x073B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x073C(0x0004) MISSED OFFSET
	struct FName                                       LoadAssetLabel;                                           // 0x0740(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCheckHeightLimit;                                        // 0x0748(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseDamageRecoil;                                         // 0x0749(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseBackAnim;                                             // 0x074A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseFallAnim;                                             // 0x074B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseFallAnim_IgnorePerformer;                             // 0x074C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseLocationReset;                                        // 0x074D(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bClearSmashCondition;                                     // 0x074E(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x074F(0x0001) MISSED OFFSET
	TArray<class ABtlCharacterBase*>                   DeadCinematicWaitArray;                                   // 0x0750(0x0010) (ZeroConstructor, Transient)
	struct FScriptDelegate                             CutSceneBindingOverrideDelegate;                          // 0x0760(0x0014) (ZeroConstructor, Transient, InstancedReference)
	struct FTransform                                  BtlLocationTranform;                                      // 0x0770(0x0030) (Transient, IsPlainOldData)
	struct FTransform                                  TargetUnit_SaveTransform;                                 // 0x07A0(0x0030) (Transient, IsPlainOldData)
	bool                                               bTargetUnit_FixLocationFlag;                              // 0x07D0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x07D1(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData08[0x28];                                      // 0x07D1(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Arise.BtlCutSceneManager.MysticLevel
	bool                                               bIsLoadingCustom;                                         // 0x0800(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLoadingCustomComplated;                                // 0x0801(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMysticIgnoreDecideBattle;                                // 0x0802(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0xD];                                       // 0x0803(0x000D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlCutSceneManager");
		return ptr;
	}


	void STATIC_UseDelayFinished(class UObject* WorldContextObject);
	void STATIC_UnbindUnit(class ABtlCharacterBase* Unit);
	void STATIC_StopCutScene();
	void STATIC_SetRecoveryTransform(bool on);
	void STATIC_SetOverrideBindingSettings(class UObject* WorldContextObject, const struct FScriptDelegate& OverrideBinding);
	void SetGravityZero(bool on, bool PerformerOnly);
	void STATIC_SetEventOptions(class UObject* WorldContextObject, const struct FBtlCutSceneOptionParam& Option);
	void SetClothTeleportCheckPerformers(bool on);
	void STATIC_SetBattleMovieSceneEvaluationType(class UObject* WorldContextObject, EMovieSceneEvaluationType NewEvaluationType);
	void STATIC_ResumeCutScene();
	void ReservationPlayMystic();
	void Received_OnPlayEvent();
	void Received_OnFinishedEventCore();
	void Received_OnEndEvent();
	void PrePlayMystic();
	void STATIC_PreloadStrikeSmash(const struct FName& StrikeLabel);
	void PreEndMystic();
	bool STATIC_PlayStrikeSmash(const struct FName& StrikeLabel, class ABtlCharacterBase* PlayUnit, class ABtlCharacterBase* StrikeUnit, class ABtlCharacterBase* TargetUnit, const struct FTransform& PlayTransform);
	bool STATIC_PlaySpecialStrike(const struct FName& StrikeLabel, class ABtlCharacterBase* PlayUnit, class ABtlCharacterBase* StrikeUnit, class ABtlCharacterBase* TargetUnit, const struct FTransform& PlayTransform, bool RecoveryTransform, bool RecoveryMeshYaw);
	bool STATIC_PlayMystic(class UObject* WorldContextObject, const struct FName& ArtsLabel, class ABtlCharacterBase* PlayUnit, class ABtlCharacterBase* TargetUnit, const struct FTransform& PlayTransform, bool bIgnoreDecideBattle);
	bool STATIC_PlayEvent(class ULevelSequence* LevelSequence, const struct FTransform& PlayTransform, const struct FName& ArtsLabel, class ABtlCharacterBase* PlayUnit, class ABtlCharacterBase* TargetUnit, bool bScreenCaptchaMask);
	void STATIC_PlayCutSceneRaw(class ULevelSequence* LevelSequence, class UBtlCutSceneBindingParam* BindingParam, const struct FScriptDelegate& OnPrePlayEvent, const struct FScriptDelegate& OnPlayEvent, const struct FScriptDelegate& OnPauseEvent, const struct FScriptDelegate& OnEndEvent, const struct FTransform& PlayTransform);
	void STATIC_PauseCutScene();
	void OnPrePlayMysticEventCore(const struct FBtlCutSceneBeginParam& BeginParam);
	void OnPrePlayEventCore();
	void OnPlaySpecialSmashEventCore(const struct FBtlCutSceneBeginParam& BeginParam);
	void OnPlaySmashEventCore(const struct FBtlCutSceneBeginParam& BeginParam);
	void OnPlayMysticEventCore(const struct FBtlCutSceneBeginParam& BeginParam);
	void OnPlayEventEventCore(const struct FBtlCutSceneBeginParam& BeginParam);
	void OnPlayEventCore();
	void OnPauseEventCore();
	void OnFinishedEventCore();
	void OnFinalizeEventCore();
	void OnEndSpecialSmashEventCore(const struct FBtlCutSceneEndParam& EndParam);
	void OnEndSmashEventCore(const struct FBtlCutSceneEndParam& EndParam);
	void OnEndMysticEventCore(const struct FBtlCutSceneEndParam& EndParam);
	void OnEndEventEventCore(const struct FBtlCutSceneEndParam& EndParam);
	void OnEndEventCore();
	void OnAssetLoadComplate();
	class UBtlCutSceneBindingParam* STATIC_MakeSmashBindingParamTemplate(class ABtlCharacterBase* PlayUnit, class ABtlCharacterBase* StrikerUnit, class ABtlCharacterBase* TargetUnit);
	class UBtlCutSceneBindingParam* STATIC_MakeMysticBindingParamTemplate(class ABtlCharacterBase* PlayUnit, class ABtlCharacterBase* TargetUnit);
	class UBtlCutSceneBindingParam* STATIC_MakeEventBindingParamTemplate();
	bool STATIC_IsReserveCutScene();
	bool STATIC_IsPreloadComplete();
	bool STATIC_IsPlayingOrReserveCutScene(class UObject* WorldContextObject);
	bool STATIC_IsPlayingCutScene();
	bool IsPerformer(class ABtlCharacterBase* Check);
	bool IsMysticLevelVisiableComplated();
	bool IsMysticLevelReleased();
	bool IsMysticLevelInvisiableComplated();
	void IgnoreFixPositionPerformers(bool on);
	bool HasDeadCinematic();
	struct FBtlStrikeData STATIC_GetPlayingStrikeData();
	class ULevelSequencePlayer* STATIC_GetPlayingCutSceneInstance();
	class ULevelSequence* STATIC_GetPlayingCutSceneAsset();
	class ALevelSequenceActor* STATIC_GetPlayingCutSceneActor();
	struct FString GetMysticLevelAssetName();
	class ABtlCharacterBase* STATIC_GetCutsceneTargetUnit(class UObject* WorldContextObject);
	struct FMinimalViewInfo STATIC_GetCurrentCameraInfo();
	struct FName STATIC_GetCurrentArtsLabel();
	void FadeoutExcludePerformers();
	void FadeinExcludePerformers();
	void EndOptionSettings();
	void DumpCutScene();
	class UBtlCutSceneBindingParam* STATIC_CreateBindingParam();
	void ClearTemporaryData();
	void ClearOptionParam();
	void BtlCutScenePlayEvents__DelegateSignature(const struct FBtlCutSceneBeginParam& Param);
	void BtlCutScenePlayEvent__DelegateSignature(const struct FBtlCutSceneBeginParam& Param);
	void BtlCutScenePauseEvents__DelegateSignature(const struct FBtlCutScenePauseParam& Param);
	void BtlCutScenePauseEvent__DelegateSignature(const struct FBtlCutScenePauseParam& Param);
	void BtlCutSceneEndEvents__DelegateSignature(const struct FBtlCutSceneEndParam& Param);
	void BtlCutSceneEndEvent__DelegateSignature(const struct FBtlCutSceneEndParam& Param);
	void BtlCutSceneBindingEvent__DelegateSignature(class UBtlCutSceneBindingParam** ResultBinding);
	void BeginOptionSettings();
};


// Class Arise.BtlDamageArrowComponent
// 0x0000 (0x05A0 - 0x05A0)
class UBtlDamageArrowComponent : public UArrowComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDamageArrowComponent");
		return ptr;
	}

};


// Class Arise.BtlDamageSphereComponent
// 0x0010 (0x05D0 - 0x05C0)
class UBtlDamageSphereComponent : public UBtlSphereComponent
{
public:
	struct FName                                       OverrideSystemEffectOnHit;                                // 0x05C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CollisionGroupID;                                         // 0x05C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnablePush;                                               // 0x05CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05CD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDamageSphereComponent");
		return ptr;
	}

};


// Class Arise.BtlDatabaseAccessor
// 0x0000 (0x0028 - 0x0028)
class UBtlDatabaseAccessor : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDatabaseAccessor");
		return ptr;
	}


	TArray<struct FName> STATIC_MakeTacticsHowLabelArray();
	TArray<struct FName> STATIC_MakeTacticsConditionLabelArray();
	TArray<struct FName> STATIC_MakeTacticsActionLabelArray();
	TArray<struct FName> STATIC_MakeArtsLabelArray(const struct FName& UnitFilter, bool bIncludeMagic);
	bool STATIC_K2_GetUnitDataById(int UnitID, struct FBtlUnitData* OutData);
	bool STATIC_K2_GetUnitData(const struct FName& UnitID, struct FBtlUnitData* OutData);
	bool STATIC_K2_GetArtsDataByIndex(int ArtsIndex, struct FBtlArtsData* OutArtsData);
	bool STATIC_K2_GetArtsDataById(int ArtsId, struct FBtlArtsData* OutData);
	bool STATIC_K2_GetArtsData(const struct FName& ArtsLabel, struct FBtlArtsData* OutData);
	bool STATIC_IsUnitDataFlag(const struct FBtlUnitData& UnitData, EBtlUnitFlag CheckFlag);
	bool STATIC_IsMysticArtsData(const struct FBtlArtsData& ArtsData);
	bool STATIC_IsLearnableArts(EArisePartyID PartyId, const struct FName& ArtsLabel);
	bool STATIC_IsElementsArtsData(const struct FBtlArtsData& ArtsData);
	bool STATIC_HasElementsArtsData(const struct FBtlArtsData& ArtsData, EBtlElementType Element);
	class UBtlVoiceDataClass* STATIC_GetVoiceDatabase(class UObject* WorldContextObject);
	bool STATIC_GetVoiceData(class UObject* WorldContextObject, const struct FBtlVoice_DatabaseLabel& VoiceLabel, struct FBtlVoiceData* OutData);
	class UStringDictionaryDatabase* STATIC_GetUnitDictionary();
	class UBtlUnitDataClass* STATIC_GetUnitDatabase();
	bool STATIC_GetUnitData(const struct FName& UnitID, struct FBtlUnitData* OutData);
	class UStringDictionaryDatabase* STATIC_GetTacticsSetDictionary();
	class UBtlTacticsSetClass* STATIC_GetTacticsSetDatabase();
	bool STATIC_GetTacticsSetByLabel(const struct FName& Label, struct FBtlDefaultTacticsSet* OutData);
	bool STATIC_GetTacticsSet(int ID, struct FBtlDefaultTacticsSet* OutData);
	class UStringDictionaryDatabase* STATIC_GetTacticsDictionary();
	bool STATIC_GetTacticsDataById(int ID, struct FBtlTacticsData* OutData);
	class UBtlTacticsDataClass* STATIC_GetTacticsDatabase();
	bool STATIC_GetTacticsData(const struct FName& Label, struct FBtlTacticsData* OutData);
	class UDataTable* STATIC_GetSystemEffectDatabase();
	class UBtlStrikeDataClass* STATIC_GetStrikeDatabase();
	bool STATIC_GetStrikeData(const struct FName& Label, struct FBtlStrikeData* OutData);
	class UBtlEncountGroupClass* STATIC_GetEncountGroupDatabase();
	bool STATIC_GetEncountGroupData(const struct FName& Label, struct FBtlEncountGroup* OutData);
	TArray<struct FBtlLearnData> STATIC_GetDefaultBtlLearnArts(EArisePartyID PartyId);
	class UBtlRankDataClass* STATIC_GetBtlRankDatabase();
	bool STATIC_GetBtlRankData(EBtlRank Rank, struct FBtlRankData* OutData);
	class UBtlMapDataClass* STATIC_GetBtlMapDatabase();
	bool STATIC_GetBtlMapData(const struct FName& MapID, struct FBtlMapData* OutData);
	bool STATIC_GetBtlLearnDataByLabel(EArisePartyID PartyId, const struct FName& ArtsLabel, struct FBtlLearnData* OutData);
	bool STATIC_GetBtlLearnDataById(int ID, struct FBtlLearnData* OutData);
	class UBtlLearnDataClass* STATIC_GetBtlLearnDatabase();
	TArray<struct FBtlLearnData> STATIC_GetBtlLearnArtsFilteredType(EArisePartyID PartyId, EBtlArtsType FilteredType);
	TArray<struct FBtlLearnData> STATIC_GetBtlLearnArtsFilteredMystic(EArisePartyID PartyId);
	TArray<struct FBtlLearnData> STATIC_GetBtlLearnArtsFilteredActionType(EArisePartyID PartyId, EBtlArtsType FilteredType, EBtlArtsAction FilteredAction);
	TArray<struct FBtlLearnData> STATIC_GetBtlLearnArtsFilteredAction(EArisePartyID PartyId, EBtlArtsAction FilteredAction);
	TArray<int> STATIC_GetBtlLearnArtsAllID(EArisePartyID PartyId);
	TArray<struct FBtlLearnData> STATIC_GetBtlLearnArtsAll(EArisePartyID PartyId);
	class UBtlHitStatusClass* STATIC_GetBtlHitStatusDatabase();
	class UObject* STATIC_GetBtlDatabase(const struct FString& Category);
	class UBtlComboDataClass* STATIC_GetBtlComboDatabase();
	bool STATIC_GetBtlComboData(const struct FName& Label, struct FBtlComboData* OutData);
	bool STATIC_GetBtlArtsLabelById(int ArtsId, struct FName* ArtsLabel);
	bool STATIC_GetBtlArtsIdByLabel(const struct FName& ArtsLabel, int* ArtsId);
	void STATIC_GetBtlArenaData(TArray<struct FBtlArenaData>* Data);
	class UStringDictionaryDatabase* STATIC_GetArtsDictionary();
	int STATIC_GetArtsDataIndex(const struct FName& ArtsLabel);
	bool STATIC_GetArtsDataById(int ArtsId, struct FBtlArtsData* OutData);
	class UBtlArtsDataClass* STATIC_GetArtsDatabase();
	bool STATIC_GetArtsData(const struct FName& ArtsLabel, struct FBtlArtsData* OutData);
	struct FSoftObjectPath STATIC_GetArtsAssetPath(const struct FName& ArtsLabel);
	bool STATIC_FindStrikePairData(const struct FName& UnitID1, const struct FName& UnitID2, struct FBtlStrikeData* OutData);
	bool STATIC_FindNormalAttackData(const struct FName& UnitID, int Count, struct FBtlArtsData* OutData);
	bool STATIC_FindNormalAirAttackData(const struct FName& UnitID, int Count, struct FBtlArtsData* OutData);
	bool STATIC_FindBtlArenaEventDatabase(const struct FName& Label, struct FBtlArenaEventData* Data);
	bool STATIC_FindBtlArenaDatabaseById(int ID, struct FBtlArenaData* Data);
	bool STATIC_FindBtlArenaDatabase(const struct FName& Label, struct FBtlArenaData* Data);
	bool STATIC_FindArtsDataFromType(const struct FName& UnitID, EBtlArtsType ArtsType, struct FBtlArtsData* OutData);
	TArray<struct FBtlArtsData> STATIC_FilterArtsDataFromType(const struct FName& UnitID, EBtlArtsType ArtsType);
	TArray<struct FBtlArtsData> STATIC_FilterArtsData(const struct FScriptDelegate& FilterPred);
	void BtlEncountCheckDelegate__DelegateSignature(const struct FBtlEncountGroup& EncountGroupData, bool* Result);
	void BtlArtsDataCheckDelegate__DelegateSignature(const struct FBtlArtsData& ArtsData, bool* Result);
	bool STATIC_AnyOfEncountParam(TArray<struct FBtlEncountGroupParam> CheckEncountList, const struct FScriptDelegate& CheckPred);
};


// Class Arise.BtlDatabaseLabelFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlDatabaseLabelFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDatabaseLabelFunctionLibrary");
		return ptr;
	}


	bool STATIC_NotEqual_BtlArts_XmlDatatableLabel(const struct FBtlArts_XmlDatatableLabel& Lhs, const struct FBtlArts_XmlDatatableLabel& Rhs);
	bool STATIC_EqualEqual_BtlArts_XmlDatatableLabel(const struct FBtlArts_XmlDatatableLabel& Lhs, const struct FBtlArts_XmlDatatableLabel& Rhs);
	struct FBattleSystemEffect_DatatableLabel STATIC_Conv_Name2BattleSystemEffect_DatatableLabel(const struct FName& Label);
	struct FName STATIC_Conv_HitStatus_DatatableLabel(const struct FHitStatus_DatatableLabel& Label);
	struct FName STATIC_Conv_HitEffectDirection_DatatableLabel(const struct FHitEffectDirection_DatatableLabel& Label);
	struct FString STATIC_Conv_BtlVoice_DatabaseLabel(const struct FBtlVoice_DatabaseLabel& Label);
	struct FString STATIC_Conv_BtlSkill_XmlDatatableLabel(const struct FBtlSkill_XmlDatatableLabel& Label);
	struct FName STATIC_Conv_BtlScreenCaptchaWidget_DatabaseLabel(const struct FBtlScreenCaptchaWidget_DatabaseLabel& Label);
	struct FName STATIC_Conv_BtlArts_XmlDatatableLabel(const struct FBtlArts_XmlDatatableLabel& Label);
	struct FName STATIC_Conv_BattleSystemEffect_DatatableLabel(const struct FBattleSystemEffect_DatatableLabel& Label);
};


// Class Arise.BtlDebugCommand
// 0x0148 (0x0478 - 0x0330)
class ABtlDebugCommand : public ABtlBasicManagerBase
{
public:
	bool                                               isDrawInfo;                                               // 0x0330(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0331(0x0003) MISSED OFFSET
	struct FBtlDebugParameter                          Profile;                                                  // 0x0334(0x0040) (BlueprintVisible)
	bool                                               IsDamageLog;                                              // 0x0374(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsDps;                                                    // 0x0375(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsHateLine;                                               // 0x0376(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsTargetLine_Party;                                       // 0x0377(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsTargetLine_Enemy;                                       // 0x0378(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	float                                              DpsParty;                                                 // 0x037C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DpsPartyMax;                                              // 0x0380(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DpsPartyTotal;                                            // 0x0384(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DpsEnemy;                                                 // 0x0388(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DpsEnemyMax;                                              // 0x038C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DpsEnemyTotal;                                            // 0x0390(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsCameraBlockLog;                                         // 0x0394(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideSlow;                                            // 0x0395(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0396(0x0002) MISSED OFFSET
	float                                              OverrideSlowTime;                                         // 0x0398(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OverrideSlowRate;                                         // 0x039C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverlimitDisable;                                        // 0x03A0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03A1(0x0003) MISSED OFFSET
	float                                              PartyDamage;                                              // 0x03A4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              EnemyDamage;                                              // 0x03A8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              DpsTimer;                                                 // 0x03AC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              PartyDamageTotal;                                         // 0x03B0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              EnemyDamageTotal;                                         // 0x03B4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              DpsTimerTotal;                                            // 0x03B8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLoadSettings;                                            // 0x03BC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bApplyWorldSettings;                                      // 0x03BD(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x03BE(0x0002) MISSED OFFSET
	TArray<struct FName>                               LoadUnitList;                                             // 0x03C0(0x0010) (ZeroConstructor, Transient)
	class UBtlStateManager*                            StateManager;                                             // 0x03D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnChangeProfile;                                          // 0x03D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeDps;                                              // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bInRequireDirectOuter;                                    // 0x03F8(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bInShouldIgnoreArchetype;                                 // 0x03F9(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bInSerializeRecursively;                                  // 0x03FA(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bInShouldIgnoreTransient;                                 // 0x03FB(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	struct FString                                     CheckObjName;                                             // 0x0400(0x0010) (Edit, ZeroConstructor, Transient, DisableEditOnInstance)
	struct FName                                       DebugSettingsParameterName;                               // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UShapeComponent*>                     AttackCollisionLists;                                     // 0x0418(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UShapeComponent*>                     DamageCollisionLists;                                     // 0x0428(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UBtlUnitSizeComponent*>               UnitSizeLists;                                            // 0x0438(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UShapeComponent*>                     SelfCapsuleLists;                                         // 0x0448(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UShapeComponent*>                     BaseCapsuleLists;                                         // 0x0458(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UBtlDamageArrowComponent*>            DamageArrowLists;                                         // 0x0468(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDebugCommand");
		return ptr;
	}


	void RegisterDebugMenuProfile();
	void Received_End();
	void Received_Begin();
	void Received_BattleTick(float FrameDeltaTime);
	bool PostChangeProfile(const struct FBtlDebugParameter& Prev);
	void OnSwitchBeginPIEAndSIE(bool bIsSimulating);
	void OnChangeProfile__DelegateSignature(const struct FString& ParameterName);
	void OnChangeParameter__DelegateSignature();
	void OnBattleSubStateStart(EBattleState State);
	void OnBattleSubStateEnd(EBattleState State);
	void OnBattleStateChange(EBattleState NowState, EBattleState PrevState);
	void K2_BattleMemoryCheck();
	bool STATIC_IsDisableBattleBGM_Development(class UObject* WorldContextObject);
	void STATIC_Debug_SetHideBattleEffect(class UObject* WorldContextObject, bool IsHide);
	void STATIC_Debug_OutputMaterialParameters(class AActor* Actor);
	void STATIC_Debug_OutputDynamicMaterial(class ABtlCharacterBase* Unit);
	bool STATIC_Debug_IsHideBattleEffect(class UObject* WorldContextObject);
	void ClearDps();
	void STATIC_BtlWin();
	void BtlUseOldSemiauto(bool on);
	void BtlUseOldCamera(bool on);
	void BtlUnitList();
	void BtlUnitFlexibleNotifyEnd(const struct FName& UnitName, int UserInteger, float UserFloat, const struct FString& UserString);
	void BtlUnitFlexibleNotifyBegin(const struct FName& UnitName, int UserInteger, float UserFloat, const struct FString& UserString);
	void BtlUnitAllHidden(bool on);
	void STATIC_BtlState(EBattleState State);
	void BtlShowTargetLineParty();
	void BtlShowTargetLineEnemy();
	void BtlShowStatusValue();
	void BtlShowSizeComponent();
	void BtlShowSelfCapsule();
	void BtlShowPartyActors(bool on);
	void BtlShowHateValue();
	void BtlShowHateLine();
	void BtlShowDamageCollision();
	void BtlShowDamageArrow();
	void BtlShowBaseCapsule();
	void BtlShowAttackCollision();
	void BtlShowAIValue();
	void BtlShowActionValue();
	void BtlSetTP(int Value);
	void BtlSetTactics(int Index);
	void BtlSetSP(int Value);
	void BtlSetHPParty(int Percent);
	void BtlSetHPEnemy(int Percent);
	void BtlRegistArtsReset();
	void BtlRegistArtsChange();
	void BtlRecoveryStrikeGauge();
	void BtlProficiencyMax();
	void BtlPostProcessLog();
	void BtlPoison();
	void BtlPlayStrikeSmash(int PartyIndex);
	void BtlPlayStrike(const struct FName& StrikeName);
	void BtlPlayArtsUnit(const struct FName& UnitName, const struct FName& ArtsLabel);
	void BtlPartyInAll();
	void BtlPartyAllMax();
	void BtlPartyAI(bool on);
	void BtlParalyze();
	void BtlOverrideSlowParameter(bool Override, float Time, float Rate);
	void BtlOverlimitParty();
	void BtlOverlimitMax();
	void BtlOverlimitEnemy();
	void BtlOverlimitDisable();
	void BtlNotDieParty(bool on);
	void BtlNotDieEnemy(bool on);
	void BtlNotDie(bool on);
	void STATIC_BtlLose();
	void BtlLimitRootMotionHasZ(float LimitValue);
	void BtlLearnArtsAll();
	void BtlIgnoreFacial();
	void BtlFrozen();
	void BtlExportAssetLog();
	void BtlEnemyAI(bool on);
	void STATIC_BtlEnd();
	void BtlDrawInfo(bool on);
	void BtlDps();
	void BtlDebugInputEvent(const struct FName& EventName);
	void BtlDamageLog();
	void BtlCurse();
	void BtlContinuousBonusLog();
	void BtlChangeControl(const struct FName& UnitID);
	void BtlCameraBlockLog(bool on);
	void BtlApplySlowWorld(float SlowRate, float SlowTimeSec);
	void BtlAddContinuous(int Bonus);
	void BtlAbnormalAll();
	void STATIC_BattleSectionLogEnd(class UObject* WorldContextObject, const struct FName& Label);
	void STATIC_BattleSectionLogBegin(class UObject* WorldContextObject, const struct FName& Label);
	void BattleMemoryCheck(const struct FString& CheckObjectName);
	bool ApplyWorldSettings();
	void ApplyBtlPartyAI();
	void ApplyBtlEnemyAI();
	void AddDamage(class ABtlCharacterBase* Attacker, int Damage);
};


// Class Arise.BtlDecalComponent
// 0x0020 (0x02B0 - 0x0290)
class UBtlDecalComponent : public UDecalComponent
{
public:
	struct FBtl_DecalMaterilParameter                  Param;                                                    // 0x0290(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UMaterialInstanceDynamic*                    DynamicMaterial;                                          // 0x02A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x02A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDecalComponent");
		return ptr;
	}

};


// Class Arise.Btl_DecalUtilityFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtl_DecalUtilityFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_DecalUtilityFunctionLibrary");
		return ptr;
	}


	class UBtlDecalComponent* STATIC_SpawnBattleDecalAttached(class UMaterialInterface* DecalMaterial, const struct FBtl_DecalMaterilParameter& Parameter, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan, float ElapsedTime);
	class UBtlDecalComponent* STATIC_SpawnBattleDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FBtl_DecalMaterilParameter& Parameter, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan, float ElapsedTime);
	void STATIC_SortParameter(struct FBtl_DecalMaterilParameter* Parameter);
	void STATIC_ApplyParameter(class UMaterialInstanceDynamic* MaterialDynamic, const struct FBtl_DecalMaterilParameter& Parameter, float Time);
};


// Class Arise.BtlDefaultAttackCapsuleCollision
// 0x0010 (0x05D0 - 0x05C0)
class UBtlDefaultAttackCapsuleCollision : public UBtlCapsuleComponent
{
public:
	int                                                DefaultID;                                                // 0x05C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x05C4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDefaultAttackCapsuleCollision");
		return ptr;
	}

};


// Class Arise.BtlDefaultAttackCollision
// 0x0000 (0x05C0 - 0x05C0)
class UBtlDefaultAttackCollision : public UBtlSphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDefaultAttackCollision");
		return ptr;
	}

};


// Class Arise.BtlDerivedInputStateComponent
// 0x0080 (0x0178 - 0x00F8)
class UBtlDerivedInputStateComponent : public UActorComponent
{
public:
	class ABtlCharacterBase*                           Unit;                                                     // 0x00F8(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TMap<struct FName, bool>                           InputStateContainer;                                      // 0x0100(0x0050) (BlueprintVisible, ZeroConstructor, Transient)
	int                                                NowPressedArtsButtonCount;                                // 0x0150(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	struct FName                                       NowPressedArtsButton;                                     // 0x0158(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       DerivedButton;                                            // 0x0160(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              InputKeepTime;                                            // 0x0168(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MysticInputKeepTime;                                      // 0x016C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               InputEnabled;                                             // 0x0170(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0171(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDerivedInputStateComponent");
		return ptr;
	}


	bool CanMysticAction();
};


// Class Arise.BattleDestructibleInterface
// 0x0000 (0x0028 - 0x0028)
class UBattleDestructibleInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BattleDestructibleInterface");
		return ptr;
	}


	bool RunDestructible(const struct FVector& ImpactPoint, EDestructibleType DestructibleType);
	void ResetDestructible();
	bool IsFilterLevel(class ABtlCharacterBase* Target, EBtlDestructFilterLevel Level);
	void GetClosestImpactPoint(const struct FVector& Location, struct FVector* ClosestPoint, bool* ExistPoint);
	void DebugRunDestructible();
};


// Class Arise.BtlDestructibleManagerActor
// 0x0030 (0x0358 - 0x0328)
class ABtlDestructibleManagerActor : public AInfo
{
public:
	TArray<class AActor*>                              DesturctableActors;                                       // 0x0328(0x0010) (ZeroConstructor, Transient)
	int                                                OnFrameDestructNum;                                       // 0x0338(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	TArray<struct FBtlDestructCache>                   DestructCache;                                            // 0x0340(0x0010) (BlueprintVisible, ZeroConstructor)
	int                                                TickCount;                                                // 0x0350(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0354(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDestructibleManagerActor");
		return ptr;
	}


	void OnDispersionDestruct(const struct FBtlDestructCache& Cache);
	TArray<class AActor*> GetDesturctableActors();
	class ABtlDestructibleManagerActor* STATIC_GetBattleDestructibleManager(class UObject* WorldContextObject);
	void AddDestruct(const TScriptInterface<class UBattleDestructibleInterface>& Destruct, const struct FVector& ImpactPoint, EDestructibleType DestructibleType);
};


// Class Arise.BtlDiplomacyFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlDiplomacyFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDiplomacyFunctionLibrary");
		return ptr;
	}


	void STATIC_SetBattleNewFormation(class UObject* WorldContextObject, TArray<struct FMenuFormationData> NewFormation);
	void STATIC_SetBattleMenuTemporaryTarget(class UObject* WorldContextObject, class ABtlCharacterBase* NewTargetUnit);
	void STATIC_SetBattleChangeOrderList(class UObject* WorldContextObject, TArray<struct FBtlChangeOrderHandle> NewChangeOrders);
	void STATIC_GetBattleChangeOrderList(class UObject* WorldContextObject, bool* IsValid, TArray<struct FBtlChangeOrderHandle>* OutChangeOrders);
};


// Class Arise.Btl_EffectAssetData
// 0x0008 (0x0030 - 0x0028)
class UBtl_EffectAssetData : public UAssetUserData
{
public:
	TWeakObjectPtr<class ABtlCharacterBase>            OwnerUnit;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_EffectAssetData");
		return ptr;
	}

};


// Class Arise.BtlWorldParticleRootActor
// 0x0000 (0x0328 - 0x0328)
class ABtlWorldParticleRootActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlWorldParticleRootActor");
		return ptr;
	}

};


// Class Arise.BtlEffectManager
// 0x0038 (0x0368 - 0x0330)
class ABtlEffectManager : public ABtlBasicManagerBase
{
public:
	TArray<class UParticleSystemComponent*>            ParticleArray;                                            // 0x0330(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	class ABtlWorldParticleRootActor*                  HitEffectHostOwner;                                       // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class ABtlWorldParticleRootActor*                  DefaultHostOwner;                                         // 0x0348(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FName                                       BtlHitEffectHostOwnerName;                                // 0x0350(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       DefaultHostOwnerName;                                     // 0x0358(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       BattleParticleTag;                                        // 0x0360(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlEffectManager");
		return ptr;
	}


	class UParticleSystemComponent* STATIC_SpawnBtlSystemEmitterAttached(class UObject* WorldContextObject, const struct FBattleSystemEffect_DatatableLabel& SystemEffect, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, class ABtlCharacterBase* Sender, EBtlSystemEffectRank EffectRank);
	class UParticleSystemComponent* STATIC_SpawnBtlSystemEffectAtLocation(class UObject* WorldContextObject, const struct FBattleSystemEffect_DatatableLabel& SystemEffect, EBtlEffectType EffectType, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, class ABtlCharacterBase* Sender, EBtlSystemEffectRank EffectRank);
	class UParticleSystemComponent* STATIC_SpawnBtlEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, class ABtlCharacterBase* Sender);
	class UParticleSystemComponent* STATIC_SpawnBtlEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy, class ABtlCharacterBase* Sender);
	void STATIC_SetDynamicMaterial_Vector(class UParticleSystemComponent* ParticleSystem, const struct FName& ParameterName, const struct FLinearColor& ParameterValue);
	void STATIC_SetDynamicMaterial_Scalar(class UParticleSystemComponent* ParticleSystem, const struct FName& ParameterName, float ParameterValue);
	void OnSystemFinish(class UParticleSystemComponent* PSystem);
	class UParticleSystemComponent* STATIC_K2_SpawnBtlEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, EBtlEffectType EffectType, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, class ABtlCharacterBase* Sender);
	class ABtlEffectManager* STATIC_GetBattleEffectManager(class UObject* WorldContextObject);
	void DestoryEmitters();
	void STATIC_DestoryBattleParticleByUnit(class UObject* WorldContextObject, class ABtlCharacterBase* TargetUnit);
	void STATIC_DestoryBattleParticleByEffectManagerHost(class UObject* WorldContextObject);
	void STATIC_DestoryBattleParticleByAllUnit(class UObject* WorldContextObject);
	void ChangeOperationPlayer();
};


// Class Arise.Btl_EncountEffectWidget
// 0x0058 (0x0260 - 0x0208)
class UBtl_EncountEffectWidget : public UUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnStartAnimStarted;                                       // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartAnimFinished;                                      // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndAnimStarted;                                         // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndAnimFinished;                                        // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EUBtlEncountEffectWidgetState                      AnimState;                                                // 0x0248(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0249(0x0007) MISSED OFFSET
	class UMaterialInstanceDynamic*                    RenderTargetMaterial;                                     // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0258(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_EncountEffectWidget");
		return ptr;
	}


	void PlayStartAnimation();
	void PlayLoopAnimation();
	void PlayEndAnimation();
	void PauseLoopAnimation();
	bool IsPlayingSection();
	bool IsLoopingAnimation();
	void InternalOnStartAnimStarted();
	void InternalOnStartAnimFinished();
	void InternalOnEndAnimStarted();
	void InternalOnEndAnimFinished();
	class UWidgetAnimation* GetStartAnimation();
	class UWidgetAnimation* GetLoopAnimation();
	class UWidgetAnimation* GetEndAnimation();
	class UMaterialInstanceDynamic* GetCaptureImageMaterial();
	class UImage* GetCaptureImage();
};


// Class Arise.BtlEncountGroupClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlEncountGroupClass : public UXmlDatabaseBase
{
public:
	struct FBtlEncountGroupList                        Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlEncountGroupClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BtlEventDispatcher
// 0x0810 (0x0838 - 0x0028)
class UBtlEventDispatcher : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnEquipmentChanged;                                       // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeOrderRequest;                                     // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPreInitializeBattle;                                    // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostInitializeBattle;                                   // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginBattle;                                            // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostBeginBattle;                                        // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinalMatchdownBattle;                                   // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPreEndBattleMaskComplated;                              // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnApplyReward;                                            // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReceivedReward;                                         // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndResult;                                              // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndBattle;                                              // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostEndBattle;                                          // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattlePause;                                            // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleResume;                                           // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0118(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnChangePCOrder;                                          // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeFormation;                                        // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeMenuFormationRequest;                             // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpawnCharacter;                                         // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDestoryCharacter;                                       // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeOperationCharacter;                               // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeOperationMode;                                    // 0x0198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeSemiautoState;                                    // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangePCArts;                                           // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginEscape;                                            // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCancelEscape;                                           // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSuccessEscape;                                          // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginGameover;                                          // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRequestUseItem;                                         // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRequestUseItemBegin;                                    // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRequestUseItemEnd;                                      // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUseItem;                                                // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReusableItem;                                           // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRequestUseArts;                                         // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHitCombo;                                               // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCombo;                                               // 0x0278(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeTactics;                                          // 0x0288(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInspirationArts;                                        // 0x0298(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInspirationArtsEnd;                                     // 0x02A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInspirationArtsFinalize;                                // 0x02B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleVoiceEnd;                                         // 0x02C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginTutorial;                                          // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSuccessTutorial;                                        // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnArtsEffect;                                             // 0x02F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHealCharacter;                                          // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRaiseDeadCharacter;                                     // 0x0318(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDamageCharacter;                                        // 0x0328(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRecoilCharacter;                                        // 0x0338(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBlownCharacter;                                         // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeHp;                                               // 0x0358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDeadCharacter;                                          // 0x0368(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDefeatCountChanged;                                     // 0x0378(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginOverlimitCharacter;                                // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndOverlimitCharacter;                                  // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpecialDown;                                            // 0x03A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTech;                                                   // 0x03B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAvoid;                                                  // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJustAvoid;                                              // 0x03D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJustGuard;                                              // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginGuardAction;                                       // 0x03F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndGuardAction;                                         // 0x0408(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginMomentaryRush;                                     // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndMomentaryRush;                                       // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginRingOut;                                           // 0x0438(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeTarget;                                           // 0x0448(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTargetedChanged;                                        // 0x0458(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTargetLost;                                             // 0x0468(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCursorTargetableChanged;                                // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDownFlagOn;                                             // 0x0488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDownFlagOff;                                            // 0x0498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginAbnormal;                                          // 0x04A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndAbnormal;                                            // 0x04B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAbnormalStateChanged;                                   // 0x04C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFakeDead;                                               // 0x04D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReserveArtsMystic;                                      // 0x04E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPreBeginArtsMystic;                                     // 0x04F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginArtsMystic;                                        // 0x0508(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArtsMystic;                                          // 0x0518(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArtsMysticFadeComplated;                             // 0x0528(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStrikeSmashEnabled;                                     // 0x0538(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReserveArtsStrikeSmash;                                 // 0x0548(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeStrikeSmashState;                                 // 0x0558(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginArtsStrikeSmash;                                   // 0x0568(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArtsStrikeSmash;                                     // 0x0578(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangePlayerTargetSmashCondition;                       // 0x0588(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStrikeSmashPossible;                                    // 0x0598(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReserveArtsSpecialStrike;                               // 0x05A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginArtsSpecialStrike;                                 // 0x05B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArtsSpecialStrike;                                   // 0x05C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStrikeAttackEnabled;                                    // 0x05D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginArtsStrikeAttack;                                  // 0x05E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArtsStrikeAttack;                                    // 0x05F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginArtsFlashRaid;                                     // 0x0608(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndArtsFlashRaid;                                       // 0x0618(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeFlashRaidState;                                   // 0x0628(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReserveEvent;                                           // 0x0638(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginEvent;                                             // 0x0648(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndEvent;                                               // 0x0658(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCutSceneStart;                                          // 0x0668(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCutSceneEnd;                                            // 0x0678(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCutSceneReserveActionStart;                             // 0x0688(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCutSceneReserveActionEnd;                               // 0x0698(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCutSceneFinalize;                                       // 0x06A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnVanguardsDead;                                          // 0x06B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSwapRearMembers;                                        // 0x06C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPreStrikeSmashBegin;                                    // 0x06D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPreStrikeSmashBeginWarpStriker;                         // 0x06E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPreStrikeSmashEnd;                                      // 0x06F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStrikeAttackDownBegin;                                  // 0x0708(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStrikeAttackReserveDown;                                // 0x0718(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCoreBreak;                                              // 0x0728(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBoostAttackBreak;                                       // 0x0738(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMapChangeBegin;                                         // 0x0748(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMapChangeEnd;                                           // 0x0758(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDynamicEncountBegin;                                    // 0x0768(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDynamicEncountEnd;                                      // 0x0778(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGroundBegin;                                            // 0x0788(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAirBegin;                                               // 0x0798(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSystemBattleFinished;                                   // 0x07A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDecideWin;                                              // 0x07B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDecideLose;                                             // 0x07C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRequestEnemyReinforcement;                              // 0x07D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedEnemyReinforcement;                             // 0x07E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBtlCameraModeChange;                                    // 0x07F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBtlFollowingPlayerBegin;                                // 0x0808(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBtlFollowingPlayerEnd;                                  // 0x0818(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeTp;                                               // 0x0828(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlEventDispatcher");
		return ptr;
	}

};


// Class Arise.BtlFakeDestructibleActor
// 0x00D8 (0x0400 - 0x0328)
class ABtlFakeDestructibleActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0328(0x0008) MISSED OFFSET
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0330(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMesh*                                 DefaultMesh;                                              // 0x0338(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UStaticMesh*                                 BakeMesh;                                                 // 0x0340(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       BakeImpactPointParameterName;                             // 0x0348(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       BakeImpactDirectionYawParameterName;                      // 0x0350(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       BakeAnimParameterName;                                    // 0x0358(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 BakeAnimCurve;                                            // 0x0360(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             DestructibleImpactEffect;                                 // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     DestructibleImpactSystemEffect;                           // 0x0370(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              DestructibleImpactRotationOffsetYaw;                      // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableDestructibleImpactRotation;                        // 0x0384(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0385(0x0003) MISSED OFFSET
	struct FRotator                                    DestructibleImpactRotation;                               // 0x0388(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	class UStaticMesh*                                 AlternativeMesh;                                          // 0x0398(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FVector>                             StaticImpactPoint;                                        // 0x03A0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FDestructibleStaticMeshParam>        ExtensionStaticMesh;                                      // 0x03B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FDestructibleParticleParam>          ExtensionParticle;                                        // 0x03C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<TEnumAsByte<ECollisionChannel>>             DestructAfterIgnoreChannel;                               // 0x03D0(0x0010) (Edit, ZeroConstructor)
	EDestructibleType                                  DestructibleType;                                         // 0x03E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EBtlDestructMeshFilter                             Filter;                                                   // 0x03E1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x03E2(0x0006) MISSED OFFSET
	TArray<struct FBtlUnitID>                          FilterUnitID;                                             // 0x03E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              BakeAnimTimer;                                            // 0x03F8(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsDamageDestructible;                                     // 0x03FC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x03FD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlFakeDestructibleActor");
		return ptr;
	}


	void RunDestructible_RandomImpactPoint();
	void OnBeginOverlapDestruct(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	bool IsDamage();
};


// Class Arise.BtlFieldAreaDecalActor
// 0x0040 (0x0370 - 0x0330)
class ABtlFieldAreaDecalActor : public ADecalActor
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0330(0x0038) MISSED OFFSET
	float                                              DistanceFadein;                                           // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFadeout;                                          // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlFieldAreaDecalActor");
		return ptr;
	}

};


// Class Arise.BtlFieldAreaDecalManager
// 0x0028 (0x0358 - 0x0330)
class ABtlFieldAreaDecalManager : public ABtlBasicManagerBase
{
public:
	class AActor*                                      FieldAreaActor;                                           // 0x0330(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    FieldAreaDecalMI;                                         // 0x0338(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    FieldAreaEffectMI;                                        // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlFieldAreaDecalManager");
		return ptr;
	}


	void ShowFieldArea(bool on);
	void DestroyFieldArea();
	void CreateFieldArea(class UObject* WorldContextObject);
};


// Class Arise.BtlFloorComponent
// 0x0000 (0x05B0 - 0x05B0)
class UBtlFloorComponent : public UBoxComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlFloorComponent");
		return ptr;
	}

};


// Class Arise.BtlFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlFunctionLibrary");
		return ptr;
	}


	EPCOrder STATIC_VanGuardOrderToRearGuardOrder(EPCOrder VanGuardOrder);
	void STATIC_UpdateControllerAssign();
	void STATIC_UnregistTickEvenWhenPausedActor(class UObject* WorldContextObject, class AActor* Actor);
	void STATIC_UnregisterSpecialStrike(class UObject* WorldContextObject);
	void STATIC_SwapPCOrder(class ABtlCharacterBase* Src, class ABtlCharacterBase* Dst);
	void STATIC_SubPartyTP(int SubTP, class ABtlCharacterBase* TargetCharacter);
	void STATIC_StopCameraShake(class UCameraShake* ShakeInstance, bool bImmediately);
	void STATIC_StopAllCameraShakes(bool bImmediately);
	bool STATIC_SphereAABBIntersection(const struct FVector& BoxOrigin, const struct FVector& BoxExtent, const struct FVector& SphereCenter, float Radius);
	class UParticleSystemComponent* STATIC_SpawnBtlEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, class ABtlCharacterBase* Sender);
	class UParticleSystemComponent* STATIC_SpawnBtlEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy, class ABtlCharacterBase* Sender);
	class AActor* STATIC_SpawnBtlActor(class UClass* SpawnClass, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner);
	void STATIC_SetWeaponVisibility(class ABtlCharacterBase* Unit, const struct FName& BoneName, bool bVisibility);
	void STATIC_SetVectorDynamicMaterials(const struct FName& ParameterName, const struct FVector& Value, TArray<class UMaterialInstanceDynamic*>* Materials);
	void STATIC_SetTargetCursorEnableByCollision(class ABtlCharacterBase* Target, bool on, class UBtlDamageSphereComponent* ReferenceDmgCollision);
	void STATIC_SetScalarDynamicMaterials(const struct FName& ParameterName, float Value, TArray<class UMaterialInstanceDynamic*>* Materials);
	void STATIC_SetRewindInterpolateRank_Move(int Rank);
	void STATIC_SetRewindInterpolateRank_Attack(int Rank);
	void STATIC_SetRareUnitMaterialParameter(TArray<class UMaterialInstanceDynamic*> Materials, class UMaterialParameterCollection* Collection);
	void STATIC_SetPartyTP(int NewTp);
	void STATIC_SetOperationMode(EOperationMode Mode, bool ApplyControllerAssign);
	void STATIC_SetEncountParam(TArray<struct FBtlEncountGroupParam> EncountParam);
	void STATIC_SetEncountGroup(TArray<struct FName> EncountGroupLabels);
	void STATIC_SetColorDynamicMaterials(const struct FName& ParameterName, const struct FLinearColor& Value, TArray<class UMaterialInstanceDynamic*>* Materials);
	void STATIC_SetBehindAutoResetFlag(bool Enable);
	void STATIC_SetBattleMapId(const struct FString& MapID);
	void STATIC_SetBattleLocation(class ABtl_Location* BtlLocation);
	void STATIC_SetArenaId(int ArenaId);
	void STATIC_ScreenCaptchaFadeOut(class UObject* WorldContextObject);
	void STATIC_ScreenCaptchaAddViewport(class UObject* WorldContextObject, const struct FBtlScreenCaptchaWidget_DatabaseLabel& WidgetLabel);
	void STATIC_SaveBattleLocation();
	void STATIC_RetryFinalizeBattleManager();
	void STATIC_RegistTickEvenWhenPausedActor(class UObject* WorldContextObject, class AActor* Actor);
	bool STATIC_RegisterSpecialStrike(class UObject* WorldContextObject, const struct FName& StrikeLabel, TArray<EArisePartyID> AboutPartyId, const struct FBtlUnitID& TargetUnitId, const struct FTransform& Transform, bool RecoveryTransform, bool RecoveryMeshYaw, bool IgnoreBoostStrike);
	void STATIC_RefreshTactics();
	void STATIC_RebuildMesh(EArisePartyID Target);
	bool STATIC_PointBoxIntersection(const struct FVector& BoxOrigin, const struct FVector& BoxExtent, const struct FVector& Point);
	class UCameraShake* STATIC_PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	bool STATIC_OrderUseItem(EArisePartyID User, int ItemID);
	ETacticsIndex STATIC_OrderTacticsPrev();
	ETacticsIndex STATIC_OrderTacticsNext();
	ETacticsIndex STATIC_OrderTactics(ETacticsIndex Index);
	void STATIC_OrderRetry();
	void STATIC_OrderEscape();
	void STATIC_OrderArtsMagic(EArisePartyID User, const struct FName& ArtsId, class ABtlCharacterBase* Target);
	bool STATIC_LoadBattleLocation();
	bool STATIC_LineSphereIntersection(const struct FVector& SphereOrigin, float SphereRadius, const struct FVector& LineStart, const struct FVector& LineDirection, float LineLength);
	bool STATIC_LineBoxIntersection(const struct FVector& BoxOrigin, const struct FVector& BoxExtent, const struct FVector& LineStart, const struct FVector& LineEnd);
	bool STATIC_IsVanGuard(class ABtlCharacterBase* Owner);
	bool STATIC_IsRightSideActor(class AActor* Owner, class AActor* Target);
	bool STATIC_IsRegisteredSpecialStrike(class UObject* WorldContextObject);
	bool STATIC_IsRearGuard(class ABtlCharacterBase* Owner);
	bool STATIC_IsOnNavMeshPoint(class AActor* Unit, const struct FVector& Location);
	bool STATIC_IsOnNavMesh(class AActor* Unit);
	bool STATIC_IsNotEqual_ArtsHandle_ArtsLabel(const struct FBtlArtsHandle& Lhs, const struct FBtlArts_XmlDatatableLabel& Rhs);
	bool STATIC_IsNotEqual_ArtsHandle(const struct FBtlArtsHandle& Lhs, const struct FBtlArtsHandle& Rhs);
	bool STATIC_IsNormalBattle();
	bool STATIC_IsMoveRightSide(class ABtlCharacterBase* Owner, float Distance);
	bool STATIC_IsMoveLeftSide(class ABtlCharacterBase* Owner, float Distance);
	bool STATIC_IsMoveForward(class ABtlCharacterBase* Owner, float Distance);
	bool STATIC_IsMoveBackward(class ABtlCharacterBase* Owner, float Distance);
	bool STATIC_IsMoveAvailable(class ABtlCharacterBase* Owner, const struct FVector& Location);
	bool STATIC_IsLeftSideActor(class AActor* Owner, class AActor* Target);
	bool STATIC_IsInFructum(class AActor* Actor);
	bool STATIC_IsInBattle(class ABtlCharacterBase* Owner);
	bool STATIC_IsFullCp(class UObject* WorldContextObject);
	bool STATIC_IsForwardSmallFellow(class ABtlCharacterBase* Owner, float DistanceRange, float AngleRange, class ABtlCharacterBase** FindFellow);
	bool STATIC_IsForwardCheck(class AActor* Owner, class AActor* Target, float Angle);
	bool STATIC_IsForwardActor(class AActor* Owner, class AActor* Target);
	bool STATIC_IsEscaping();
	bool STATIC_IsEscapeComplete();
	bool STATIC_IsEqual_ArtsHandle_ArtsLabel(const struct FBtlArtsHandle& Lhs, const struct FBtlArts_XmlDatatableLabel& Rhs);
	bool STATIC_IsEqual_ArtsHandle(const struct FBtlArtsHandle& Lhs, const struct FBtlArtsHandle& Rhs);
	bool STATIC_IsEffectiveArmor(class ABtlCharacterBase* Attacker, class ABtlCharacterBase* Receiver);
	bool STATIC_IsBossBattle();
	bool STATIC_IsBoostAttacking_AnyCharacter(class ABtlCharacterBase* IgnoreUnit);
	bool STATIC_IsBackwardActor(class AActor* Owner, class AActor* Target);
	bool STATIC_IsAvailableStrikeAttackUnit(class ABtlCharacterBase* Unit);
	bool STATIC_IsAvailableStrikeAttack(class ABtlCharacterBase* Unit, class ABtlCharacterBase* Striker);
	bool STATIC_IntersectHeight(float CheckHeightBtm, float CheckHeightTop, class ABtlCharacterBase* Unit);
	void STATIC_InputControl(bool Enable);
	void STATIC_InitializeBattleManager();
	TArray<class ABtlCharacterBase*> STATIC_InFructumList(class UObject* WorldContextObject, TArray<class ABtlCharacterBase*> Actors);
	int STATIC_InFructumCountOf(class UObject* WorldContextObject, TArray<class AActor*> Actors);
	bool STATIC_InArena();
	class ABtlVoiceManager* STATIC_GetVoiceManager(class UObject* WorldContextObject);
	class ABattleUIManager* STATIC_GetUIManager();
	int STATIC_GetTPPercent();
	int STATIC_GetTPMax(class UObject* WorldContextObject);
	int STATIC_GetTPCostByPartyId(EArisePartyID User, int TP);
	int STATIC_GetTp();
	class UBtlTargetCursorManager* STATIC_GetTargetCursorManager();
	int STATIC_GetTargetCursorComponentNum(class ABtlCharacterBase* Target);
	float STATIC_GetTargetComponentDistanceXY(class ABtlCharacterBase* Unit);
	class ABtlCharacterBase* STATIC_GetSwitchingUnit(class ABtlCharacterBase* Unit);
	float STATIC_GetStepReserveTime(class ABtlCharacterBase* Unit);
	class UBtlStateManager* STATIC_GetStateManager();
	class ABtlCharacterBase* STATIC_GetStartControlUnit(class UObject* WorldContextObject);
	class ABtl_SpectatorPawn* STATIC_GetSpectatorPawn();
	float STATIC_GetSizeComponentUpperZ(class ABtlCharacterBase* Unit);
	float STATIC_GetRunawayTimer();
	float STATIC_GetRunawaySuccessfulTime();
	class ABtlResultManager* STATIC_GetResultManager(class UObject* WorldContextObject);
	struct FBtlSpecialStrikePeriod STATIC_GetRegisteredSpecialStrike(class UObject* WorldContextObject);
	float STATIC_GetRareSymbolRate();
	class ABtlPostProcessVolumeManager* STATIC_GetPostProcessVolumeManager();
	class AArisePlayerCameraManager* STATIC_GetPlayerCameraManager();
	void STATIC_GetPcOrder(class ABtlCharacterBase* Owner, bool* IsValid, EPCOrder* Order);
	class UArisePartyOrder* STATIC_GetPartyOrder();
	EOperationMode STATIC_GetOperationMode();
	class ANavigationData* STATIC_GetNavigationData(class AActor* Unit);
	struct FVector STATIC_GetMarkerLocation(const struct FName& FindMarker);
	class ABtlMagicManagerActor* STATIC_GetMagicManager();
	struct FVector STATIC_GetLocationBtlUnitSizeComponent(class ABtlCharacterBase* Unit);
	float STATIC_GetJumpReserveTime(class ABtlCharacterBase* Unit);
	float STATIC_GetItemRecastTimerRate();
	float STATIC_GetItemRecastTimer();
	float STATIC_GetInputReserveTime();
	float STATIC_GetInputBtlCameraYaw(float Delta, float InputValue);
	float STATIC_GetInputBtlCameraHeight(float Delta, float InputValue);
	float STATIC_GetHeightDifference(class ABtlCharacterBase* UnitA, class ABtlCharacterBase* UnitB);
	int STATIC_GetGigantTypeNumForPlayRecord();
	int STATIC_GetEQSBestIndex(class UEnvQueryInstanceBlueprintWrapper* EQSQueryInstance);
	bool STATIC_GetEncountTopParam(class UObject* WorldContextObject, struct FBtlEncountGroupParam* EncountParam);
	TArray<struct FBtlEncountGroupParam> STATIC_GetEncountParam();
	TArray<struct FName> STATIC_GetEncountGroup();
	float STATIC_GetDistanceBtlUnitToLocationXY(class ABtlCharacterBase* UnitA, const struct FVector& Location);
	float STATIC_GetDistanceBtlUnitSizeComponentZ(class ABtlCharacterBase* UnitA, class ABtlCharacterBase* UnitB);
	float STATIC_GetDistanceBtlUnitSizeComponentXY(class ABtlCharacterBase* UnitA, class ABtlCharacterBase* UnitB);
	float STATIC_GetDistanceBtlUnitCollisions(class ABtlCharacterBase* Owner, class ABtlCharacterBase* Other);
	float STATIC_GetDistanceBtlCapsuleToLocationXY(class ABtlCharacterBase* UnitA, const struct FVector& Location);
	struct FString STATIC_GetDisplayName_ArtsHandle(const struct FBtlArtsHandle& Handle);
	float STATIC_GetDifferenceYaw(class AActor* From, class AActor* To);
	class UBtlTargetCursorComponent* STATIC_GetDefaultTargetCursorComponent(class ABtlCharacterBase* Target);
	class ABtlDebugCommand* STATIC_GetDebugCommand(class UObject* WorldContextObject);
	ETacticsIndex STATIC_GetCurrentTactics();
	class UBtlStateMain* STATIC_GetCurrentStateMain();
	class ABtlCollisionManager* STATIC_GetCollisionManager(class UObject* WorldContextObject);
	struct FVector STATIC_GetClosestIn4Directions(class ABtlCharacterBase* Unit, const struct FVector& Check);
	int STATIC_GetBtlRankOrder(EBtlRank CheckRank);
	struct FString STATIC_GetBattleMapId();
	class ABtlManager* STATIC_GetBattleManager(class UObject* WorldContextObject);
	class ABtl_Location* STATIC_GetBattleLocation();
	class UBtlEventDispatcher* STATIC_GetBattleEventDispatcher(class UObject* WorldContextObject);
	class UDataTable* STATIC_GetBattleDataTable(class UObject* WorldContextObject, const struct FName& TableName);
	class ABtl_Camera* STATIC_GetBattleCamera();
	int STATIC_GetArenaId();
	int STATIC_GetActualTPCost(int TP, class ABtlCharacterBase* UseCharacter);
	void STATIC_FocusOnUnit(class ABtlCharacterBase* TargetUnit, class USceneComponent* Part);
	float STATIC_FindDeltaAngleDegrees(float From, float To);
	void STATIC_FinalizeBattleManager();
	void STATIC_DestroyEffects();
	EArisePartyID STATIC_ConvertBIDToArisePartyId(const struct FName& BID);
	EAriseGuestID STATIC_ConvertBIDToAriseGuestId(const struct FName& BID);
	struct FName STATIC_ConvertArisePartyIdToBID(EArisePartyID PartyId);
	struct FName STATIC_ConvertAriseGuestIdToBID(EAriseGuestID GuestId);
	class ABtlCharacterBase* STATIC_CheckAutoTarget(class ABtlCharacterBase* Unit);
	void STATIC_ChangeOperationMode(EOperationMode NewMode, bool ApplyControllerAssign);
	void STATIC_ChangeControlUnitProv(EArisePartyID PartyId);
	void STATIC_ChangeControlCharacter(class ABtlCharacterBase* ChangeCharacter, bool ApplyControllerAssign);
	bool STATIC_CanUseItem();
	bool STATIC_CanRetry();
	bool STATIC_CanEscape();
	void STATIC_CancelEscape();
	int STATIC_CalculateHealMagic(EArisePartyID User, EArisePartyID Target, const struct FName& HealMagic);
	struct FTransform STATIC_CalcSmashTransform(const struct FName& StrikeLabel);
	void STATIC_BtlPrintString(class UObject* WorldContextObject, const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_ApplyDebugParamPreset(const struct FBtlDebugParamPreset& Preset);
	void STATIC_ApplyDebugGameProgressSetup(const struct FBtlDebugGameProgressPresetParam& Preset, const struct FBtlDebugGameProgressAliasSkillPriorityTable& Priority);
	void STATIC_ApplyArtsSettingsChange(EArisePartyID User);
	void STATIC_AddPartyTP(int AddTP);
	void STATIC_AddContinuousBattleBonus(const struct FName& TableID);
};


// Class Arise.BtlHateComponent
// 0x0020 (0x0118 - 0x00F8)
class UBtlHateComponent : public UActorComponent
{
public:
	TArray<struct FBtlHateUnit>                        HateList;                                                 // 0x00F8(0x0010) (ZeroConstructor, Transient)
	class ABtlCharacterBase*                           Owner;                                                    // 0x0108(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ChoiceLowHate;                                            // 0x0110(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlHateComponent");
		return ptr;
	}


	struct FString ToString();
	void Setup();
	void SetHate(class ABtlCharacterBase* Unit, float Hate);
	void RemoveUnit(class ABtlCharacterBase* Unit);
	class ABtlCharacterBase* GetTarget();
	class ABtlCharacterBase* GetHateUnit(int Rank, TArray<struct FBtlHateUnit>* HateOrder);
	class ABtlCharacterBase* GetHateTop();
	float GetHate(class ABtlCharacterBase* Unit);
	void FirstHate();
	void ClearUnitAll(class ABtlCharacterBase* Unit);
	void AddUnit(class ABtlCharacterBase* Unit);
	void AddHate(class ABtlCharacterBase* Unit, float Hate);
};


// Class Arise.BtlHitObjectMemoryBase
// 0x0048 (0x0140 - 0x00F8)
class UBtlHitObjectMemoryBase : public UActorComponent
{
public:
	TArray<struct FBtl_CollisionGroupParam>            AttackGroup;                                              // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FBtl_HitSavedCollision>              DelayRegisterHitSave;                                     // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FBtl_HitSavedCollision>              DelayUnregisterHitSave;                                   // 0x0118(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<class UShapeComponent*>                     DelayUnregisterAttackCollision;                           // 0x0128(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate)
	int                                                AttackGroupNum;                                           // 0x0138(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x013C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlHitObjectMemoryBase");
		return ptr;
	}


	void UnregisterHitCollision(class UShapeComponent* AtkCollision, class UBtlDamageSphereComponent* DmgCollision);
	void UnregisterAtkCollision(class UShapeComponent* AtkCollision);
	void SetHitEffectInfo(class UShapeComponent* AtkCollision, class UBtlDamageSphereComponent* DmgCollision, const struct FVector& HitEffectLocation, const struct FRotator& HitEffectRotation);
	void RemoveHitSavedActor(class AActor* DestroyActor);
	void RegisterHitCollision(class UShapeComponent* AtkCollision, class UBtlDamageSphereComponent* DmgCollision);
	struct FBtl_HitSavedCollision FindLatestHitSavedCollision(bool* IsValid);
	bool CheckDoHitDamage(class UShapeComponent* AtkCollision, class UBtlDamageSphereComponent* DmgCollision);
	float CalculateActualHitIntervalSec(const struct FAttackSphereParam& Param);
};


// Class Arise.BtlHitStatusClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlHitStatusClass : public UXmlDatabaseBase
{
public:
	struct FBtlHitStatusList                           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlHitStatusClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BtlInputExtInputProcessBase
// 0x0068 (0x03A0 - 0x0338)
class ABtlInputExtInputProcessBase : public AInputExtInputProcessBase
{
public:
	class UBtlEventDispatcher*                         EventDispatcher;                                          // 0x0338(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  InputConfigDataTable;                                     // 0x0340(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBtlBitAllOfFlags                           InputEnable;                                              // 0x0348(0x0004) (Edit, DisableEditOnTemplate)
	unsigned char                                      UnknownData00[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	TArray<struct FBtlInputEventData>                  ButtonEvents;                                             // 0x0350(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<struct FBtlInputEventConfigData>            ConfigButtons;                                            // 0x0360(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<struct FBtlInputConfigEvent>                ConfigEvents;                                             // 0x0370(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	bool                                               bParallelsButtonEvents;                                   // 0x0380(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0381(0x0003) MISSED OFFSET
	int                                                ParallelsButtonNum;                                       // 0x0384(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     MoveToWorld;                                              // 0x0388(0x000C) (Transient, IsPlainOldData)
	uint32_t                                           InputFilter;                                              // 0x0394(0x0004) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	uint32_t                                           PrevInputFilter;                                          // 0x0398(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSystemPause;                                             // 0x039C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bBattlePause;                                             // 0x039D(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x039E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlInputExtInputProcessBase");
		return ptr;
	}


	void UnregisterInputEventObjectAll(class UObject* EventObject);
	void UnregisterInputEvent(const struct FName& InButtonName, EBtlInputEventType Type, const struct FScriptDelegate& Event);
	void UnregisterInputConfigsEvent(TArray<struct FBtlInputConfig_DatatableLabel> Labels);
	void UnregisterInputConfigEvent(const struct FBtlInputConfig_DatatableLabel& Label);
	void UnregisterAlwaysInputEvent(const struct FName& InButtonName, EBtlInputEventType Type, const struct FScriptDelegate& Event);
	void SetMoveToWorld(const struct FVector& Vector);
	void SetInputEnable(bool Enable, EBtlBitFlagCategory Category);
	void SetInputConfigFlag(EBtlInputConfigType ConfigType, bool bEnable);
	void RegisterInputEvent(const struct FName& InButtonName, EBtlInputEventType Type, const struct FScriptDelegate& Event);
	void RegisterInputConfigsEvent(TArray<struct FBtlInputConfig_DatatableLabel> Labels, const struct FScriptDelegate& Event, const struct FBtlInputChangeEnableEventArgment& ChangeInputEnableEvent);
	void RegisterInputConfigEvent(const struct FBtlInputConfig_DatatableLabel& Label, const struct FScriptDelegate& Event, const struct FBtlInputChangeEnableEventArgment& ChangeInputEnableEvent);
	void RegisterAlwaysInputEvent(const struct FName& InButtonName, EBtlInputEventType Type, const struct FScriptDelegate& Event);
	void OnChangeAriseGameState(EAriseGameState ChangedState, bool bNewState);
	void OnBoostStrikeStateChange(EBtlStrikeSmashState NowState, EBtlStrikeSmashState PrevState);
	void OnBattleSubStateStart(EBattleState State);
	void OnBattleSubStateEnd(EBattleState State);
	void OnBattleStateChange(EBattleState NowState, EBattleState PrevState);
	void OnBattleResume_Internal();
	void OnBattlePause_Internal();
	void OnBattleFinish(EBtlResultType Type);
	void OnBattleCutSceneFlagUpdate();
	bool K2_IsBtlButtonRepeated(const struct FName& InButtonName);
	bool K2_IsBtlButtonPressed(const struct FName& InButtonName);
	bool K2_IsBtlButtonJustReleased(const struct FName& InButtonName);
	bool K2_IsBtlButtonJustPressed(const struct FName& InButtonName);
	struct FVector2D K2_GetBtlMousePosition();
	struct FVector2D K2_GetBtlMouseDelta();
	float K2_GetBtlAxisValue(const struct FName& InAxisName);
	class AInputExtPlayerController* STATIC_K2_GetBattlePCController(class UObject* WorldContextObject);
	class ABtlInputExtInputProcessBase* STATIC_K2_GetBattleInputProcess(class UObject* WorldContextObject);
	bool IsInputEnable();
	bool IsEnableInputConfigFlag(EBtlInputConfigType ConfigType);
	struct FVector GetMoveToWorld();
};


// Class Arise.BtlLauncherWorkerBase
// 0x0030 (0x0358 - 0x0328)
class ABtlLauncherWorkerBase : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnBattlePhaseStartEvent;                                  // 0x0328(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattlePhaseEndEvent;                                    // 0x0338(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattlePhaseWakeupEvent;                                 // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlLauncherWorkerBase");
		return ptr;
	}


	void SetupParameter(const struct FString& InBattleMap, TArray<struct FBtlEncountGroupParam> InEncountParams, float InBattleDelayTime, bool InAutoStart, bool InUseOutsideCapture, const struct FString& InBattleLoadContext);
	void BroadcastBattlePhaseWakeupEvent();
	void BroadcastBattlePhaseStartEvent(bool bAccept);
	void BroadcastBattlePhaseEndEvent();
};


// Class Arise.BtlLauncherWorkerLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlLauncherWorkerLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlLauncherWorkerLibrary");
		return ptr;
	}


	void STATIC_UnloadBtlLauncherWorker();
	class ABtlLauncherWorkerBase* STATIC_SpawnBtlLauncherWorker(class UObject* Outer, const struct FString& InBattleMap, TArray<struct FBtlEncountGroupParam> InEncountParams, float InBattleDelayTime, bool InAutoStart, bool InUseOutsideCapture, const struct FString& InBattleLoadContext);
	void STATIC_LoadBtlLauncherWorker();
	bool STATIC_IsLoadedBtlLauncherWorker();
};


// Class Arise.BtlLearnDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlLearnDataClass : public UXmlDatabaseBase
{
public:
	struct FBtlLearnDataList                           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlLearnDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BtlLinerCurveLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlLinerCurveLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlLinerCurveLibrary");
		return ptr;
	}


	void STATIC_SortLinerVectorCurve(struct FBtlLinerVectorCurve* Curve);
	void STATIC_SortLinerLinearColorCurve(struct FBtlLinerLinearColorCurve* Curve);
	void STATIC_SortLinerFloatCurve(struct FBtlLinerFloatCurve* Curve);
	struct FBtlSimpleFloatParameter STATIC_MakeSimpleFloatParameter(class UCurveFloat* Curve, float Value, const struct FBtlLinerFloatCurve& LinerCurve);
	struct FVector STATIC_GetVectorParameterValue(class UCurveVector* Curve, const struct FBtlLinerVectorCurve& LinerCurve, const struct FVector& Value, float Time);
	struct FVector STATIC_GetSimpleVectorParameterValue(const struct FBtlSimpleVectorParameter& Param, float Time);
	struct FVector STATIC_GetSimpleVectorParameterEndValue(const struct FBtlSimpleVectorParameter& Param);
	struct FLinearColor STATIC_GetSimpleLinearColorParameterValue(const struct FBtlSimpleLinearColorParameter& Param, float Time);
	struct FLinearColor STATIC_GetSimpleLinearColorParameterEndValue(const struct FBtlSimpleLinearColorParameter& Param);
	float STATIC_GetSimpleFloatParameterValue(const struct FBtlSimpleFloatParameter& Param, float Time);
	float STATIC_GetSimpleFloatParameterEndValue(const struct FBtlSimpleFloatParameter& Param);
	struct FVector STATIC_GetLinerVectorCurveValue(const struct FBtlLinerVectorCurve& Curve, float Time);
	struct FLinearColor STATIC_GetLinerLinearColorCurveValue(const struct FBtlLinerLinearColorCurve& Curve, float Time);
	float STATIC_GetLinerFloatCurveValue(const struct FBtlLinerFloatCurve& Curve, float Time);
	struct FLinearColor STATIC_GetLinearColorParameterValue(class UCurveLinearColor* Curve, const struct FBtlLinerLinearColorCurve& LinerCurve, const struct FLinearColor& Value, float Time);
	float STATIC_GetFloatParameterValue(class UCurveFloat* Curve, const struct FBtlLinerFloatCurve& LinerCurve, float Value, float Time);
};


// Class Arise.BtlUnitSpawner
// 0x0000 (0x0328 - 0x0328)
class ABtlUnitSpawner : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitSpawner");
		return ptr;
	}

};


// Class Arise.Btl_Location
// 0x00D8 (0x0400 - 0x0328)
class ABtl_Location : public AActor
{
public:
	bool                                               bUseFirst;                                                // 0x0328(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bUseSpawnEnemy;                                           // 0x0329(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x032A(0x0002) MISSED OFFSET
	int                                                LocationID;                                               // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              AreaSize;                                                 // 0x0330(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0334(0x0004) MISSED OFFSET
	TArray<struct FName>                               PartyUnits;                                               // 0x0338(0x0010) (ZeroConstructor)
	TArray<struct FName>                               GuestUnits;                                               // 0x0348(0x0010) (ZeroConstructor)
	TArray<struct FBtlEncountGroupParam>               EncountGroups;                                            // 0x0358(0x0010) (ZeroConstructor)
	TArray<int>                                        UsedPartyPlacement;                                       // 0x0368(0x0010) (ZeroConstructor)
	TArray<int>                                        UsedEnemyPlacement;                                       // 0x0378(0x0010) (ZeroConstructor)
	TArray<struct FBtlPartyPlacement>                  PartyPlacements;                                          // 0x0388(0x0010) (ZeroConstructor)
	TArray<struct FBtlGuestPlacement>                  GuestPlacements;                                          // 0x0398(0x0010) (ZeroConstructor)
	TArray<struct FBtlEnemyPlacement>                  EnemyPlacements;                                          // 0x03A8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	struct FBtlSmashPointParam                         SmashPointParam;                                          // 0x03C0(0x0040) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_Location");
		return ptr;
	}


	void UpdatePlacement();
	void RegisterEncountGroup(TArray<struct FBtlEncountGroupParam> EncountGroupParams);
	bool InAreaCheck(const struct FVector& Point, float Radius);
	struct FTransform GetSmashPointTransform();
	struct FBtlSmashPointParam GetSmashPointParamRaw();
	struct FTransform GetPartySpawnerTransform(int Index);
	int GetPartySpawnerMax();
	TArray<struct FBtlPartyPlacement> GetPartyPlacement();
	TArray<struct FBtlGuestPlacement> GetGuestPlacement();
	class UBtlFloorComponent* GetFloorComponent();
	struct FTransform GetEnemySpawnerTransform(int Index);
	int GetEnemySpawnerMax();
	TArray<struct FBtlEnemyPlacement> GetEnemyPlacement();
	float GetAreaWidth();
	float GetAreaSize();
	void CreateSpawnPoints();
	void ClearRegisterUnit();
	struct FBtlSmashPointParam CalcSmashPointParam();
};


// Class Arise.BtlMagicActor
// 0x0218 (0x0540 - 0x0328)
class ABtlMagicActor : public AActor
{
public:
	class UBtlMagicAsset*                              Asset;                                                    // 0x0328(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              LifeTime;                                                 // 0x0330(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              ElapsedTime;                                              // 0x0334(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              SpawnElapsedTime;                                         // 0x0338(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	TArray<struct FBtlMagicTaskNode>                   TaskNodes;                                                // 0x0340(0x0010) (Edit, ZeroConstructor, Transient)
	struct FBtl_MagicSpawnLocationParam                SpawnLocationParam;                                       // 0x0350(0x0020) (Edit, DisableEditOnTemplate, Transient, EditConst)
	struct FBtl_MagicSpawnRotationParam                SpawnRotationParam;                                       // 0x0370(0x0018) (Edit, DisableEditOnTemplate, Transient, EditConst)
	bool                                               bIsFollowLocation;                                        // 0x0388(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIsFollowRotation;                                        // 0x0389(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bUseParentHitMemory;                                      // 0x038A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIsEndMagic;                                              // 0x038B(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIsReCyclePool;                                           // 0x038C(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIsCallFinishMagic;                                       // 0x038D(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x038E(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEndMagic;                                               // 0x0390(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class ABtlMagicActor>               WeakParentMagic;                                          // 0x03A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<TWeakObjectPtr<class ABtlMagicActor>>       WeakChildMagic;                                           // 0x03A8(0x0010) (ZeroConstructor, Transient)
	class ABtlCharacterBase*                           OwnerActor;                                               // 0x03B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class ABtlCharacterBase*                           TargetActor;                                              // 0x03C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UBtlTargetCursorComponent*                   TargetComponent;                                          // 0x03C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class ABtlMagicManagerActor>        WeakMagicManager;                                         // 0x03D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     MoveVector;                                               // 0x03D8(0x000C) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET
	TArray<struct FVector>                             MoveVectorList;                                           // 0x03E8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	struct FVector                                     FollowRelativeLocation;                                   // 0x03F8(0x000C) (Edit, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0404(0x000C) MISSED OFFSET
	struct FQuat                                       FollowRelativeRotation;                                   // 0x0410(0x0010) (Edit, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	TArray<struct FRotator>                            MoveRotationList;                                         // 0x0420(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	struct FRotator                                    MoveRotator;                                              // 0x0430(0x000C) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FVector                                     MoveScale;                                                // 0x043C(0x000C) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FVector                                     TargetLastLocation;                                       // 0x0448(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	TMap<struct FName, bool>                           SimplenessFlags;                                          // 0x0458(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class UBtlStatusBuffBase*>                  UniqueArtsBuff;                                           // 0x04A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	struct FBtlArtsHandle                              ArtsName;                                                 // 0x04B8(0x0020) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst)
	bool                                               IsStockMagic;                                             // 0x04D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET
	TArray<unsigned char>                              InstanceMemory;                                           // 0x04E0(0x0010) (ZeroConstructor, Transient)
	TMap<class UBtlMagicItemBase*, uint32_t>           InstanceMemoryOffset;                                     // 0x04F0(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicActor");
		return ptr;
	}


	void SetMoveVector(const struct FVector& Move);
	void SetMoveScale(const struct FVector& Scale);
	void SetMoveRotator(const struct FRotator& Rotator);
	void SetIsUseParentHitMemory(bool bEnable);
	void SetDebugComponentManager(class AActor* Actor);
	void SendMessage(const struct FString& Message, class UObject* Data);
	void OnTargetActorDestory(class AActor* DestoryTarget);
	void OnEndMagic__DelegateSignature(class ABtlMagicActor* Magic);
	void OnChangeUnitHiddenInBattle(bool bNewHidden);
	class UBtlMagicTask* K2_FindTask(const struct FName& Identifier);
	bool IsUseParentHitMemory();
	bool IsEndMagic();
	TEnumAsByte<EDrawDebugTrace> GetTraceForOneFrame();
	TEnumAsByte<EDrawDebugTrace> GetTraceForDuration();
	class UBtlTargetCursorComponent* GetTargetComponent();
	struct FRotator GetTargetActorRotation();
	struct FVector GetTargetActorLocation();
	class ABtlCharacterBase* GetTargetActor();
	class ABtlMagicActor* GetParentMagic();
	struct FRotator GetOwnerActorRotation();
	struct FVector GetOwnerActorLocation();
	class ABtlCharacterBase* GetOwnerActor();
	struct FVector GetMoveVector();
	struct FVector GetMoveScale();
	struct FRotator GetMoveRotator();
	class ABtlMagicManagerActor* GetMagicManager();
	class UBtlHitObjectMemoryBase* GetHitMemory();
	TArray<class ABtlMagicActor*> GetChildrenMagic();
	struct FName GetArtsName();
	struct FBtlArtsHandle GetArtsHandle();
	bool ExistTargetActor();
	bool ExistParentMagic();
	void AddMoveVector(const struct FVector& Move);
	void AddMoveRotator(const struct FRotator& Move);
	void Abort();
};


// Class Arise.BtlDestructibleActor
// 0x00B8 (0x0400 - 0x0348)
class ABtlDestructibleActor : public ADestructibleActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	EDestructibleType                                  DestructibleType;                                         // 0x0350(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EBtlDestructMeshFilter                             Filter;                                                   // 0x0351(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0352(0x0006) MISSED OFFSET
	TArray<struct FBtlUnitID>                          FilterUnitID;                                             // 0x0358(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FVector>                             StaticImpactPoint;                                        // 0x0368(0x0010) (Edit, ZeroConstructor)
	class UParticleSystemComponent*                    ParticleInstance;                                         // 0x0378(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FVector                                     HitPoint;                                                 // 0x0380(0x000C) (BlueprintVisible, Transient, IsPlainOldData)
	struct FVector                                     HitDirection;                                             // 0x038C(0x000C) (BlueprintVisible, Transient, IsPlainOldData)
	TArray<struct FDestructibleStaticMeshParam>        StaticMesh;                                               // 0x0398(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FDestructibleParticleParam>          ExtensionParticle;                                        // 0x03A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UParticleSystem*                             Particle;                                                 // 0x03B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FDestructParticleOverrideMaterial>   FractureEffectsOverrideMaterials;                         // 0x03C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<struct FNamedEmitterMaterial>               ParticleOverrideMaterials;                                // 0x03D0(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParticleAttackName;                                       // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDestroyAfterParticleEnable;                              // 0x03E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDistanceFadeEnable;                                      // 0x03E9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03EA(0x0002) MISSED OFFSET
	float                                              FadeTime;                                                 // 0x03EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeWaitTimer;                                            // 0x03F0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     DebugImpactPoint;                                         // 0x03F4(0x000C) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDestructibleActor");
		return ptr;
	}


	void StaticImpactPointExportToAsset();
	void RunDestrucible(const struct FVector& ImpactPoint);
	void PropagationMaterial();
	void MeshCheckDevelopment();
	void MakeExtensionParticle();
	void MakeAlphaMaskComponent();
	struct FVector GetChunkAverageLocation();
	class UAlphaMaskComponent* GetAlphaMaskComponent();
	void DebugRunDestrucible();
	void DebugResetDestrucible();
	void DebugForceVisible();
	void DebugForceInvisible();
	void ApplayMaterial(class UParticleSystemComponent* TargetParticle, const struct FDestructParticleOverrideMaterial& OverrideMaterial);
	void ActionDestoryExtensionParticle();
};


// Class Arise.BtlMagicItemBase
// 0x0000 (0x0028 - 0x0028)
class UBtlMagicItemBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicItemBase");
		return ptr;
	}

};


// Class Arise.BtlMagicCondition
// 0x0010 (0x0038 - 0x0028)
class UBtlMagicCondition : public UBtlMagicItemBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	bool                                               bIsDuplicateObject;                                       // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition");
		return ptr;
	}

};


// Class Arise.BtlMagicConditionConst_BlueprintBase
// 0x0008 (0x0040 - 0x0038)
class UBtlMagicConditionConst_BlueprintBase : public UBtlMagicCondition
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicConditionConst_BlueprintBase");
		return ptr;
	}


	struct FString Received_GetConditionName();
	void Received_Deactivated(class ABtlMagicActor* OwnerMagic, class ABtlCharacterBase* OwnerUnit);
	bool Received_Condition(class ABtlMagicActor* OwnerMagic, class ABtlCharacterBase* OwnerUnit);
	void Received_Activated(class ABtlMagicActor* OwnerMagic, class ABtlCharacterBase* OwnerUnit);
};


// Class Arise.BtlMagicCondition_BlueprintBase
// 0x0008 (0x0040 - 0x0038)
class UBtlMagicCondition_BlueprintBase : public UBtlMagicCondition
{
public:
	TWeakObjectPtr<class ABtlMagicActor>               OwnerMagic;                                               // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_BlueprintBase");
		return ptr;
	}


	bool Received_ReplaceCondition(class UBtlMagicCondition* NewCondition);
	void Received_ReceiveMessage(const struct FString& Message, class UObject* Data);
	void Received_OnNotifyTaskMessage(class UBtlMagicTask* Task, const struct FString& Message, int IntValue, float FloatValue);
	class UClass* Received_GetReplaceConditionClass();
	struct FString Received_GetConditionName();
	void Received_Deactivated();
	bool Received_Condition();
	void Received_Activated();
	class ABtlCharacterBase* GetTargetActor();
	class ABtlMagicActor* GetParentMagic();
	class ABtlCharacterBase* GetOwnerActor();
	class ABtlMagicManagerActor* GetMagicManager();
};


// Class Arise.BtlMagicCondition_UnitId
// 0x0010 (0x0048 - 0x0038)
class UBtlMagicCondition_UnitId : public UBtlMagicCondition
{
public:
	struct FBtlUnitID                                  UnitID;                                                   // 0x0038(0x0008) (Edit)
	bool                                               IsEqualCheck;                                             // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_UnitId");
		return ptr;
	}

};


// Class Arise.BtlMagicCondition_CheckFlag
// 0x0018 (0x0050 - 0x0038)
class UBtlMagicCondition_CheckFlag : public UBtlMagicCondition
{
public:
	EBtlMagicConditionType                             FlagCheckType;                                            // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0038(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<struct FName>                               FlagNames;                                                // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_CheckFlag");
		return ptr;
	}

};


// Class Arise.BtlMagicCondition_ScenarioFlag
// 0x0018 (0x0050 - 0x0038)
class UBtlMagicCondition_ScenarioFlag : public UBtlMagicCondition
{
public:
	struct FAriseScenarioFlag_DatabaseLabel            ScenarioFlag;                                             // 0x0038(0x0010) (Edit)
	bool                                               IsEqualFlag;                                              // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_ScenarioFlag");
		return ptr;
	}

};


// Class Arise.BtlMagicCondition_ReceiveMessage
// 0x0010 (0x0048 - 0x0038)
class UBtlMagicCondition_ReceiveMessage : public UBtlMagicCondition
{
public:
	TArray<struct FString>                             CheckMessages;                                            // 0x0038(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_ReceiveMessage");
		return ptr;
	}

};


// Class Arise.BtlMagicCondition_WatchEndAttack
// 0x0000 (0x0038 - 0x0038)
class UBtlMagicCondition_WatchEndAttack : public UBtlMagicCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_WatchEndAttack");
		return ptr;
	}

};


// Class Arise.BtlMagicCondition_WatchTimePause
// 0x0000 (0x0038 - 0x0038)
class UBtlMagicCondition_WatchTimePause : public UBtlMagicCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_WatchTimePause");
		return ptr;
	}

};


// Class Arise.BtlMagicCondition_IsTargetUnitMainMember
// 0x0008 (0x0040 - 0x0038)
class UBtlMagicCondition_IsTargetUnitMainMember : public UBtlMagicCondition
{
public:
	bool                                               bNonePartyGroupResult;                                    // 0x0038(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_IsTargetUnitMainMember");
		return ptr;
	}

};


// Class Arise.BtlMagicCondition_IsTargetUnitSubMember
// 0x0008 (0x0040 - 0x0038)
class UBtlMagicCondition_IsTargetUnitSubMember : public UBtlMagicCondition
{
public:
	bool                                               bNonePartyGroupResult;                                    // 0x0038(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_IsTargetUnitSubMember");
		return ptr;
	}

};


// Class Arise.BtlMagicCondition_IsTurnTarget
// 0x0008 (0x0040 - 0x0038)
class UBtlMagicCondition_IsTurnTarget : public UBtlMagicCondition
{
public:
	EBtlMagicCondition_TurnTargetType                  Type;                                                     // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0038(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicCondition_IsTurnTarget");
		return ptr;
	}

};


// Class Arise.BtlMagicDataInterface
// 0x0000 (0x0028 - 0x0028)
class UBtlMagicDataInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicDataInterface");
		return ptr;
	}


	struct FString Received_GetWarningMessage(class UBtlMagicAsset* Asset);
	struct FString Received_GetInfomationMessage(class UBtlMagicAsset* Asset);
	struct FString Received_GetErrorMessage(class UBtlMagicAsset* Asset);
};


// Class Arise.BtlMagicHelperFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlMagicHelperFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicHelperFunctionLibrary");
		return ptr;
	}


	struct FVector STATIC_GetHumanOrMonsterSocketLocation(class ACharacter* Character, const struct FName& HumanSoketName, const struct FName& MonsterSoketName);
};


// Class Arise.BtlMagicLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlMagicLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicLibrary");
		return ptr;
	}


	void STATIC_SpellerSendMessage(class ABtlCharacterBase* Speller, const struct FString& Message, class UObject* Data);
	class ABtlMagicActor* STATIC_SpawnMagicOverride(class UBtlMagicAsset* Asset, const struct FBtl_MagicSpawnParam& OverrideParam, class ABtlCharacterBase* OwnerCharacter);
	class ABtlMagicActor* STATIC_SpawnMagic(class UBtlMagicAsset* Asset, class ABtlCharacterBase* OwnerCharacter);
	struct FRotator STATIC_GetMagicActorRotationAssetParam(class ABtlMagicActor* MagicActor);
	struct FRotator STATIC_GetMagicActorRotation(class ABtlMagicActor* MagicActor, class ABtlMagicActor* ParentMagicActor, EBtlMagicRotationType Type, const struct FName& Socket, const struct FRotator& Offset);
	struct FVector STATIC_GetMagicActorLocationAssetParam(class ABtlMagicActor* MagicActor);
	struct FVector STATIC_GetMagicActorLocation(class ABtlMagicActor* MagicActor, class ABtlMagicActor* ParentMagicActor, EBtlMagicLocationType Type, const struct FName& Socket, const struct FVector& Offset);
	void STATIC_AllMagicSendMessage(const struct FString& Message, class UObject* Data);
};


// Class Arise.BtlMagicManagerActor
// 0x00A8 (0x03D8 - 0x0330)
class ABtlMagicManagerActor : public ABtlBasicManagerBase
{
public:
	bool                                               bIsReCycleMagicActor;                                     // 0x0330(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0331(0x0007) MISSED OFFSET
	class UClass*                                      DefaultMagicActor;                                        // 0x0338(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	struct FName                                       HumanCenterBoneName;                                      // 0x0340(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MonsterCenterBoneName;                                    // 0x0348(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class ABtlMagicActor*>                      MagicArray;                                               // 0x0350(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TMap<class UBtlMagicAsset*, struct FBtlMagicReCycleCache> ReCycleCacheMap;                                          // 0x0360(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	struct FScriptMulticastDelegate                    OnSpawnMagic;                                             // 0x03B0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	TArray<struct FName>                               MagicDisableFlags;                                        // 0x03C0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	bool                                               bMagicTickEnable;                                         // 0x03D0(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicManagerActor");
		return ptr;
	}


	void SpellerSendMessage(class ABtlCharacterBase* Speller, const struct FString& Message, class UObject* Data);
	class ABtlMagicActor* SpawnMagicOverride_V2(class UBtlMagicAsset* Asset, const struct FBtl_MagicSpawnLocationParam& OverrideLocationParam, const struct FBtl_MagicSpawnRotationParam& OverrideRotationParam, class ABtlCharacterBase* OwnerCharacter, class ABtlMagicActor* ParentMagic);
	class ABtlMagicActor* SpawnMagicOverride_AtActorTransform(class UBtlMagicAsset* Asset, class AActor* OverrideTransformActor, class ABtlCharacterBase* OwnerCharacter, class ABtlMagicActor* ParentMagic);
	class ABtlMagicActor* SpawnMagicOverride(class UBtlMagicAsset* Asset, const struct FBtl_MagicSpawnParam& OverrideParam, class ABtlCharacterBase* OwnerCharacter, class ABtlMagicActor* ParentMagic);
	class UParticleSystemComponent* SpawnMagicEmitterAtLocation(class ABtlMagicActor* Magic, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy);
	class UBtlDecalComponent* SpawnMagicDecalAtLocation(class ABtlMagicActor* Magic, class UMaterialInterface* DecalMaterial, const struct FBtl_DecalMaterilParameter& Param, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan, float ElapsedTime);
	class ABtlMagicActor* SpawnMagic(class UBtlMagicAsset* Asset, class ABtlCharacterBase* OwnerCharacter, class ABtlMagicActor* ParentMagic);
	void SetMagicDisable(const struct FName& Category, bool bDisable);
	void OnChangeDebugProfile(const struct FString& ParameterName);
	void K2_GetCenterLocation(class ABtlCharacterBase* Target, bool* Exits, struct FVector* CenterLocation);
	bool HasArtsHandleMagic(const struct FBtlArtsHandle& Handle);
	TEnumAsByte<EDrawDebugTrace> GetTraceForOneFrame();
	TEnumAsByte<EDrawDebugTrace> GetTraceForDuration();
	TArray<class ABtlMagicActor*> GetSpellerMagic(class ABtlCharacterBase* Speller);
	void DestroySpellerMagic(class ABtlCharacterBase* Speller, int DestoryFlags);
	void DestroyAllMagicFlags(int DestoryFlags);
	void DestroyAllMagic(bool bForceDestory);
	void DebugBtlDumpMagicAsset(class UBtlMagicAsset* Asset);
	void DebugBtlDumpMagic(TArray<struct FString> AssetPathLists);
	int CountMagicByPath(class ABtlCharacterBase* Speller);
	int CountMagic(class ABtlCharacterBase* Speller, class UBtlMagicAsset* Asset);
	void AllMagicSendMessage(const struct FString& Message, class UObject* Data);
};


// Class Arise.BtlMagicTaskIdentifierInterface
// 0x0000 (0x0028 - 0x0028)
class UBtlMagicTaskIdentifierInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTaskIdentifierInterface");
		return ptr;
	}


	struct FName GetIdentifier();
};


// Class Arise.BtlMagicTask
// 0x0018 (0x0040 - 0x0028)
class UBtlMagicTask : public UBtlMagicItemBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	float                                              Duration;                                                 // 0x0030(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EBtlMagicTickingGroup                              TickGroup;                                                // 0x0034(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsDuplicateObject;                                       // 0x0035(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bMustBeExecuted;                                          // 0x0036(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	TWeakObjectPtr<class ABtlMagicActor>               WeakOwnerMagic;                                           // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask");
		return ptr;
	}


	void Received_Tick(float FrameDeltaTime, float ElapsedTime);
	void Received_TargetLost();
	bool Received_ReplaceTask(class UBtlMagicTask* NewTask);
	void Received_ReceiveMessage(const struct FString& Message, class UObject* Data);
	struct FString Received_GetTaskName();
	struct FString Received_GetNotesInfomation();
	void Received_End();
	void Received_DebugRender(float FrameDeltaTime);
	void Received_Construct();
	void Received_Begin();
	void K2_PrintWarningTask(const struct FString& Text);
	TEnumAsByte<EDrawDebugTrace> GetTraceForOneFrame();
	float GetTraceForDurationTime();
	TEnumAsByte<EDrawDebugTrace> GetTraceForDuration();
	struct FVector GetTargetActorLocation();
	class ABtlCharacterBase* GetTargetActor();
	class ABtlMagicActor* GetParentMagic();
	class ABtlMagicActor* GetOwnerMagic();
	class ABtlCharacterBase* GetOwnerActor();
	class ABtlMagicManagerActor* GetMagicManager();
};


// Class Arise.BtlMagicTask_BlueprintBase
// 0x0000 (0x0040 - 0x0040)
class UBtlMagicTask_BlueprintBase : public UBtlMagicTask
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_BlueprintBase");
		return ptr;
	}


	void SendNotifyMessageToCondition(class UBtlMagicTask* Task, const struct FString& Message, int IntValue, float FloatValue);
};


// Class Arise.BtlMagicTask_CreateMagicBase
// 0x0010 (0x0050 - 0x0040)
class UBtlMagicTask_CreateMagicBase : public UBtlMagicTask
{
public:
	class UBtlMagicAsset*                              CreateMagic;                                              // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseParentHitMemory;                                      // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_CreateMagicBase");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_CreateMagic
// 0x0078 (0x00C8 - 0x0050)
class UBtlMagicTask_CreateMagic : public UBtlMagicTask_CreateMagicBase
{
public:
	struct FBtl_MagicSpawnParam                        SpawnOverrideParam;                                       // 0x0050(0x0038) (Deprecated)
	struct FBtl_MagicSpawnLocationParam                SpawnOverrideLocationParam;                               // 0x0088(0x0020) (Edit)
	struct FBtl_MagicSpawnRotationParam                SpawnOverrideRotationParam;                               // 0x00A8(0x0018) (Edit)
	bool                                               bOverrideParam;                                           // 0x00C0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_CreateMagic");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_CreateRepeatMagic
// 0x0010 (0x0060 - 0x0050)
class UBtlMagicTask_CreateRepeatMagic : public UBtlMagicTask_CreateMagicBase
{
public:
	float                                              CreateInterval;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CreateIntervalRage;                                       // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Timer;                                                    // 0x0058(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentInterval;                                          // 0x005C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_CreateRepeatMagic");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_CreateRepeatMagicLineTrace
// 0x0020 (0x0080 - 0x0060)
class UBtlMagicTask_CreateRepeatMagicLineTrace : public UBtlMagicTask_CreateRepeatMagic
{
public:
	float                                              LineDistance;                                             // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    LineRotation;                                             // 0x0064(0x000C) (Edit, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectType;                                               // 0x0070(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_CreateRepeatMagicLineTrace");
		return ptr;
	}


	struct FVector GetLineEndLocation();
	struct FVector GetLineBeginLocation();
};


// Class Arise.BtlMagicTask_Abort
// 0x0008 (0x0048 - 0x0040)
class UBtlMagicTask_Abort : public UBtlMagicTask
{
public:
	EBtlMagicTaskAbortType                             AbortType;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_Abort");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_SetFlag
// 0x0010 (0x0050 - 0x0040)
class UBtlMagicTask_SetFlag : public UBtlMagicTask
{
public:
	struct FName                                       FlagName;                                                 // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               Enable;                                                   // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_SetFlag");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_AddComponentBase
// 0x0010 (0x0050 - 0x0040)
class UBtlMagicTask_AddComponentBase : public UBtlMagicTask
{
public:
	struct FString                                     IdentifierName;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_AddComponentBase");
		return ptr;
	}


	void ApplyIdentifierName(class UActorComponent* Component);
};


// Class Arise.BtlMagicTask_FindComponentBase
// 0x0010 (0x0050 - 0x0040)
class UBtlMagicTask_FindComponentBase : public UBtlMagicTask
{
public:
	struct FString                                     IdentifierName;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_FindComponentBase");
		return ptr;
	}


	class UActorComponent* K2_GetIdentifierComponent();
};


// Class Arise.BtlMagicTask_CreateDecalBase
// 0x0048 (0x0088 - 0x0040)
class UBtlMagicTask_CreateDecalBase : public UBtlMagicTask
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBtl_DecalMaterilParameter                  MaterialParameter;                                        // 0x0048(0x0010) (Edit, BlueprintVisible)
	float                                              LifeSpan;                                                 // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DecalSize;                                                // 0x005C(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     RangeDecalSize;                                           // 0x0068(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     RangeLocation;                                            // 0x0074(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              Rotation;                                                 // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RangeRotation;                                            // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_CreateDecalBase");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_SetMaterialParameterBase
// 0x0008 (0x0048 - 0x0040)
class UBtlMagicTask_SetMaterialParameterBase : public UBtlMagicTask
{
public:
	class UMaterialParameterCollection*                Collection;                                               // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_SetMaterialParameterBase");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_ApplyUniqueArtsBuff
// 0x0008 (0x0048 - 0x0040)
class UBtlMagicTask_ApplyUniqueArtsBuff : public UBtlMagicTask
{
public:
	struct FName                                       BuffName;                                                 // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_ApplyUniqueArtsBuff");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_FollowLocationRelease
// 0x0000 (0x0040 - 0x0040)
class UBtlMagicTask_FollowLocationRelease : public UBtlMagicTask
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_FollowLocationRelease");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_FollowRotationRelease
// 0x0000 (0x0040 - 0x0040)
class UBtlMagicTask_FollowRotationRelease : public UBtlMagicTask
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_FollowRotationRelease");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_DevelopmentBase
// 0x0000 (0x0040 - 0x0040)
class UBtlMagicTask_DevelopmentBase : public UBtlMagicTask
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_DevelopmentBase");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_Comment
// 0x0000 (0x0040 - 0x0040)
class UBtlMagicTask_Comment : public UBtlMagicTask_DevelopmentBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_Comment");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_Print
// 0x0010 (0x0050 - 0x0040)
class UBtlMagicTask_Print : public UBtlMagicTask_DevelopmentBase
{
public:
	struct FString                                     Log;                                                      // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_Print");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_Particle
// 0x0060 (0x00A0 - 0x0040)
class UBtlMagicTask_Particle : public UBtlMagicTask
{
public:
	class UParticleSystem*                             EmitterTemplate;                                          // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     ParticleName;                                             // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FVector                                     Location;                                                 // 0x0058(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    Rotation;                                                 // 0x0064(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     Scale;                                                    // 0x0070(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       LocationType;                                             // 0x007C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	struct FName                                       ParticleActorParameter;                                   // 0x0080(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TranslucentSortPriority;                                  // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bReferenceSurface;                                        // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EBtlSurfaceParticleSize                            SurfaceParticleSize;                                      // 0x008D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x008E(0x0002) MISSED OFFSET
	float                                              TopOffset;                                                // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BottomOffset;                                             // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bTraceComplex;                                            // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_Particle");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_ParticleParameterBase
// 0x0010 (0x0050 - 0x0040)
class UBtlMagicTask_ParticleParameterBase : public UBtlMagicTask
{
public:
	struct FString                                     TargetParticleName;                                       // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_ParticleParameterBase");
		return ptr;
	}


	class UParticleSystemComponent* FindTargetParticleComponent();
};


// Class Arise.BtlMagicTask_ParticleSetScalarMaterialParameter
// 0x0028 (0x0078 - 0x0050)
class UBtlMagicTask_ParticleSetScalarMaterialParameter : public UBtlMagicTask_ParticleParameterBase
{
public:
	struct FName                                       ParameterName;                                            // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBtlSimpleFloatParameter                    ParameterValue;                                           // 0x0058(0x0020) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_ParticleSetScalarMaterialParameter");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_ParticleSetMaterialVectorParameter
// 0x0030 (0x0080 - 0x0050)
class UBtlMagicTask_ParticleSetMaterialVectorParameter : public UBtlMagicTask_ParticleParameterBase
{
public:
	struct FName                                       ParameterName;                                            // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBtlSimpleLinearColorParameter              ParameterValue;                                           // 0x0058(0x0028) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_ParticleSetMaterialVectorParameter");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_ParticleSetMaterial_ActingElementColorBase
// 0x0008 (0x0058 - 0x0050)
class UBtlMagicTask_ParticleSetMaterial_ActingElementColorBase : public UBtlMagicTask_ParticleParameterBase
{
public:
	struct FName                                       ParameterName;                                            // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_ParticleSetMaterial_ActingElementColorBase");
		return ptr;
	}


	struct FLinearColor ConvertElementColor(EBtlElementType ElemenetType);
};


// Class Arise.BtlMagicTask_ParticleChangeMaterial
// 0x0010 (0x0060 - 0x0050)
class UBtlMagicTask_ParticleChangeMaterial : public UBtlMagicTask_ParticleParameterBase
{
public:
	TArray<struct FNamedEmitterMaterial>               OverrideMaterials;                                        // 0x0050(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_ParticleChangeMaterial");
		return ptr;
	}

};


// Class Arise.BtlMagicTask_PlayEvent
// 0x0010 (0x0050 - 0x0040)
class UBtlMagicTask_PlayEvent : public UBtlMagicTask
{
public:
	struct FString                                     EventName;                                                // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicTask_PlayEvent");
		return ptr;
	}

};


// Class Arise.BtlManager
// 0x06B0 (0x09E0 - 0x0330)
class ABtlManager : public ABtlBasicManagerBase
{
public:
	TArray<TWeakObjectPtr<class UBtlRuntimeObjectBase>> BattleObjects;                                            // 0x0330(0x0010) (ZeroConstructor, Transient)
	TMap<EAriseGuestID, struct FBtlGuestIDReplaceScenarioData> GuestIDReplace_ScenarioChapter;                           // 0x0340(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      CutSceneManagerClass;                                     // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	class ABtlCutSceneManager*                         CutSceneManager;                                          // 0x0398(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      UnitManagerClass;                                         // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlUnitManager*                             UnitManager;                                              // 0x03A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      CameraManagerClass;                                       // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlCameraManager*                           CameraManager;                                            // 0x03B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      SystemEffectManagerClass;                                 // 0x03C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlSystemEffectManager*                     SystemEffectManager;                                      // 0x03C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x03D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Arise.BtlManager.StateManagerClass
	class UBtlStateManager*                            StateManager;                                             // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      ArtsManagerClass;                                         // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlArtsManager*                             ArtsManager;                                              // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      AIManagerClass;                                           // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlAIManager*                               AIManager;                                                // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      AssetManagerClass;                                        // 0x0420(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlAssetManager*                            AssetManager;                                             // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0430(0x0028) UNKNOWN PROPERTY: SoftClassProperty Arise.BtlManager.MagicManagerActorClass
	class ABtlMagicManagerActor*                       MagicManagerActor;                                        // 0x0458(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      TimeManagerClass;                                         // 0x0460(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlTimeManager*                             TimeManager;                                              // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      UIManagerClass;                                           // 0x0470(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABattleUIManager*                            UIManager;                                                // 0x0478(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      FieldAreaDecalManagerClass;                               // 0x0480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlFieldAreaDecalManager*                   FieldAreaDecalManager;                                    // 0x0488(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      FieldAreaActorClass;                                      // 0x0490(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ResultManagerClass;                                       // 0x0498(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlResultManager*                           ResultManager;                                            // 0x04A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      CollisionManagerClass;                                    // 0x04A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlCollisionManager*                        CollisionManager;                                         // 0x04B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      TacticsManagerClass;                                      // 0x04B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlTacticsManager*                          TacticsManager;                                           // 0x04C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      PostProcessVolumeManagerClass;                            // 0x04C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlPostProcessVolumeManager*                PostProcessVolumeManager;                                 // 0x04D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      EffectManagerClass;                                       // 0x04D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlEffectManager*                           EffectManager;                                            // 0x04E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      ContinuousBonusManagerClass;                              // 0x04E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlContinuousBonusManager*                  ContinuousBonusManager;                                   // 0x04F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      VoiceManagerClass;                                        // 0x04F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlVoiceManager*                            VoiceManager;                                             // 0x0500(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UClass*                                      TaskManagerClass;                                         // 0x0508(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	class ABtlTaskManagerBase*                         TaskManager;                                              // 0x0510(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  StatusBuffScriptTable;                                    // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<struct FName, class UDataTable*>              DataTableContainer;                                       // 0x0520(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      DebugCommandClass;                                        // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlDebugCommand*                            DebugCommand;                                             // 0x0578(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      BattleScreenMaskClass;                                    // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	class AScreenMaskBase*                             BattleScreenMaskActor;                                    // 0x0588(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FSoftObjectPath                             MysticLevelSoftPath;                                      // 0x0590(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UDataTable*                                  SurfaceParticleTable;                                     // 0x05A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x05B0(0x0050) MISSED OFFSET
	TArray<struct FBtlEncountGroupParam>               Encount;                                                  // 0x0600(0x0010) (ZeroConstructor, Transient)
	class UClass*                                      DestructibleManagerClass;                                 // 0x0610(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABtlDestructibleManagerActor*                DestructibleManager;                                      // 0x0618(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     MapID;                                                    // 0x0620(0x0010) (ZeroConstructor)
	bool                                               bIsBattleStart;                                           // 0x0630(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0631(0x0003) MISSED OFFSET
	int                                                ArenaId;                                                  // 0x0634(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	EBtlArenaState                                     ArenaState;                                               // 0x0638(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0639(0x0007) MISSED OFFSET
	struct FSoftClassPath                              BattleArenaMetaScript;                                    // 0x0640(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance)
	class UBtlMetaScript*                              MetaScript;                                               // 0x0658(0x0008) (ZeroConstructor, IsPlainOldData)
	class ABtlInputExtInputProcessBase*                BattleInputProcess;                                       // 0x0660(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBtlTargetCursorManager*                     TargetCursorManager;                                      // 0x0668(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0xF0];                                      // 0x0670(0x00F0) MISSED OFFSET
	class ABtl_Location*                               BattleLocation;                                           // 0x0760(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class ABtl_Location*>                       BattleLocationArray;                                      // 0x0768(0x0010) (ZeroConstructor, Transient)
	int                                                SavedBattleLocationId;                                    // 0x0778(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x077C(0x0004) MISSED OFFSET
	class ABtl_SpectatorPawn*                          SpectatorPawn;                                            // 0x0780(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              SpawnBtlActors;                                           // 0x0788(0x0010) (ZeroConstructor)
	struct FBtlTemporaryData                           TemporaryData;                                            // 0x0798(0x006C) (Transient)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0804(0x0004) MISSED OFFSET
	TArray<struct FName>                               BattleScreenMaskNames;                                    // 0x0808(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	EUBtlEncountEffectWidgetState                      BattleScreenCaptchaMaskState;                             // 0x0818(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0819(0x0007) MISSED OFFSET
	TArray<struct FName>                               SystemPauseImpossibleCategorys;                           // 0x0820(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TMap<struct FName, bool>                           bIsBattlePauseFlags;                                      // 0x0830(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	EBtlChangeGameScene                                ChangeGameScene;                                          // 0x0880(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bRetry;                                                   // 0x0881(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x0882(0x0002) MISSED OFFSET
	int                                                RetryCount;                                               // 0x0884(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bOpendLossHelp;                                           // 0x0888(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7];                                       // 0x0889(0x0007) MISSED OFFSET
	struct FBtlSpecialStrikePeriod                     SpecialStrikePeriod;                                      // 0x0890(0x0070)
	bool                                               bIsBattleInitialized;                                     // 0x0900(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0901(0x0007) MISSED OFFSET
	struct FBtlRankData                                BtlRankData;                                              // 0x0908(0x0060) (Transient)
	class UAriseSave*                                  BtlSave;                                                  // 0x0968(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<unsigned char>                              BtlSaveMemory;                                            // 0x0970(0x0010) (ZeroConstructor, Transient)
	struct FLinearColor                                SavedSurfaceColor;                                        // 0x0980(0x0010) (Transient, IsPlainOldData)
	float                                              SavedIndoorCheck;                                         // 0x0990(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0994(0x0004) MISSED OFFSET
	class UMaterialParameterCollection*                SurfaceMPC;                                               // 0x0998(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UAnimSequenceBase*>                   AnimSequences_Arts;                                       // 0x09A0(0x0010) (ZeroConstructor, Transient)
	class UDataTable*                                  DropBonusTable;                                           // 0x09B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  MapPostProcessTable;                                      // 0x09B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class AActor*>                              TickEvenWhenPausedActors;                                 // 0x09C0(0x0010) (ZeroConstructor, Transient)
	int                                                RewindInterpolateRank_Attack;                             // 0x09D0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                RewindInterpolateRank_Move;                               // 0x09D4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               BehindAutoResetFlag;                                      // 0x09D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x09D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlManager");
		return ptr;
	}


	void UpdateBattleLocationPlacement();
	void SetWallHalfThickness(float WallHalfThickness);
	void SetUseLinetraceForHeightCheck(bool UseLinetrace);
	void SetTutorial(bool on);
	void SetSystemPauseImpossible(bool bImpossible, const struct FName& Category);
	void SetStrikeSmashState(EBtlStrikeSmashState State);
	void SetStrikeSmashReserveActorPair(class ABtlCharacterBase* Actor);
	void SetStrikeSmashReserveActor(class ABtlCharacterBase* Actor);
	void SetSmashConditionComboCount(int ComboCount);
	void SetRewindInterpolateRank_Move(int Rank);
	void SetRewindInterpolateRank_Attack(int Rank);
	void SetRetryCount(int Count);
	void SetRetry(bool on);
	void SetOpendLossHelp(bool Opened);
	void SetLastDefeatedUnit(class ABtlCharacterBase* Attacker, class ABtlCharacterBase* Receiver);
	void SetForceFeedbackRecastTime(float Time);
	void SetExistAdditionalWall(bool Exist);
	void SetDisableUserInputMove(bool on);
	void SetDisableUserInputCamera(bool on);
	void SetDisableOverlimitPlay(bool on, EBtlBitFlagCategory Category);
	void SetDisableOverlimitAddValue(bool on, EBtlBitFlagCategory Category);
	void SetDisableMystic(bool on, EBtlBitFlagCategory Category);
	void SetDisableBoostStrike(bool on, EBtlBitFlagCategory Category);
	void SetDisableBoostAttack(bool on);
	void SetDamageReduceForSC(bool on);
	void SetCutSceneFinishSlow(bool bEnable);
	void SetCutSceneFinishFlow(bool bEnable);
	void SetChangeGameScene(EBtlChangeGameScene GameScene);
	void SetBoostAttackRejectionTimer(float RejectionTime);
	void SetBehindAutoResetFlag(bool Enable);
	void SetArenaState(EBtlArenaState State);
	void SetArenaId(int ID);
	void SetActionTimestop(bool on);
	void SendSoundPostEventString(const struct FString& EventName);
	void SendSoundPostEvent(EBtlSoundPostEvent EventName);
	void ScreenCaptchaFadeOut();
	void ScreenCaptchaAddViewport(const struct FBtlScreenCaptchaWidget_DatabaseLabel& WidgetLabel);
	void SaveBattleLocation();
	bool Save();
	void RegistTickEvenWhenPausedActor(class AActor* Actor);
	void ReceiveInitialize();
	void ReceiveFinalize();
	void Receive_BattleResume();
	void Receive_BattlePause();
	void ReadySpecialStrike(const struct FName& NewSpecialStrike);
	void OnChangeState(EAriseGameState ChangedState, bool NewState);
	void OnChangeScenarioFlag(int Flag, bool Value);
	void OnChangeScenarioCounter(int counter, int PrevCounter);
	void OnBattleStartCallback();
	void NotReadySpecialStrike();
	void MarkPendingKillBattleObjects();
	bool LoadBattleLocation();
	bool Load();
	bool LineTraceForWall(const struct FVector& Start, const struct FVector& End);
	bool IsUsableFeedback();
	bool IsTutorial();
	bool IsSystemPausePossible();
	bool IsRetry();
	bool IsRefBattleMap(const struct FString& MapDatabaseName);
	void IsReadySpecialStrike(bool* Result);
	bool IsExistAdditionalWall();
	bool IsDisableOverlimitPlay();
	bool IsDisableOverlimitAddValue();
	bool IsDisableMystic();
	bool IsDisableItem();
	bool IsDisableBoostStrike();
	bool IsDisableBoostAttack();
	bool IsDamageReduceForSC();
	bool IsCutSceneFinishSlow();
	bool IsCutSceneFinishFlow();
	bool IsBattlePause();
	bool InTitan();
	void InitializeBattleLocation();
	void IncrementRefBattleMap(const struct FString& MapDatabaseName, bool* bIsNewAdd);
	bool InArena();
	float GetWallHalfThickness();
	bool GetUseLinetraceForHeightCheck();
	class UParticleSystem* GetSurfaceParticle(const struct FName& SurfaceName, EBtlSurfaceParticleSize SurfaceSize);
	EBtlStrikeSmashState GetStrikeSmashState();
	class ABtlCharacterBase* GetStrikeSmashActorPair();
	class ABtlCharacterBase* GetStrikeSmashActor();
	void GetSpecialStrikeLabel(struct FName* Label);
	int GetSmashConditionComboCount();
	int GetRewindInterpolateRank_Move();
	int GetRewindInterpolateRank_Attack();
	int GetRetryCount();
	int GetRefCountBattleMap(const struct FString& MapDatabaseName);
	TArray<struct FString> GetRefBattleMaps();
	struct FTransform GetPreSmashTransform(class ABtlCharacterBase* Striker, float OffsetDistance, float OffsetForward);
	struct FVector GetPlayerCharacterFadeinLocation_EndStrike(class ABtlCharacterBase* Player);
	bool GetOpendLossHelp();
	class UBtlMetaScript* GetMetaScript();
	class ABtlCharacterBase* GetLastDefeatedReceiver();
	class ABtlCharacterBase* GetLastDefeatedAttacker();
	bool GetDisableUserInputMove();
	bool GetDisableUserInputCamera();
	EBtlChangeGameScene GetChangeGameScene();
	bool GetBehindAutoResetFlag();
	float GetBattleResultEndWaitTime();
	EBtlArenaState GetArenaState();
	int GetArenaId();
	TArray<class ABtl_Location*> GetAllBattleLocation();
	bool GetActionTimestop();
	void ExportEventDispatcher();
	void DestroyMetaScript();
	void DecrementRefBattleMap(const struct FString& MapDatabaseName, bool bForceZero, bool* bIsZero);
	void CreateStateManager();
	void CreateMetaScript(class UClass* BtlMetaScriptClass);
	void CreateBattleLocationList();
	void ClearRefBattleMap();
	void ClearEncount();
	bool ChooseSmashActors(class ABtlCharacterBase* UserChoice);
	void BattleResume(const struct FName& Category);
	void BattlePause(const struct FName& Category);
};


// Class Arise.BtlMapDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlMapDataClass : public UXmlDatabaseBase
{
public:
	struct FBtlMapDataList                             Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMapDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.Btl_Marker
// 0x0008 (0x0330 - 0x0328)
class ABtl_Marker : public AActor
{
public:
	struct FName                                       Name;                                                     // 0x0328(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_Marker");
		return ptr;
	}

};


// Class Arise.BtlMaterialLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMaterialLibrary");
		return ptr;
	}


	void STATIC_K2_BtlUnitSetMaterial_ScalarParameter(class ABtlCharacterBase* Target, const struct FName& MaterialName, const struct FName& ParameterName, float ParameterValue);
	void STATIC_K2_BtlUnitSetMaterial_ColorParameter(class ABtlCharacterBase* Target, const struct FName& MaterialName, const struct FName& ParameterName, const struct FLinearColor& ParameterValue);
	TArray<class UMaterialInterface*> STATIC_K2_BtlUnitGetBuildMeshMaterial(class ABtlCharacterBase* Target, TEnumAsByte<EAchCharacterBuildComponent> BuildType);
};


// Class Arise.BtlMetaScript
// 0x0010 (0x0038 - 0x0028)
class UBtlMetaScript : public UBtlRuntimeObjectBase
{
public:
	TArray<struct FString>                             DebugMenuFlexibleNotifyCommands;                          // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMetaScript");
		return ptr;
	}


	void Unregister_BattleWinCheck();
	void Unregister_BattleLossCheck();
	void SetBattleWin(float NewEndWaitTime);
	void SetBattleLoss();
	void ReinforcementRequest(const struct FBtlUnitID& SpawnUnitId, int SpawnNum, int LimitUnitNum, float IntervalTime, float IntervalAngle);
	void Register_BattleWinCheck();
	void Register_BattleLossCheck();
	void Received_OnFlexibleNotify(int UserInteger, float UserFloat, const struct FString& UserString, const struct FLinearColor& UserColor, class UObject* UserObject);
	void Received_OnEndScenarioVoice(const struct FBtlVoice_DatabaseLabel& VoiceLabel);
	void OnPrevMainProduction();
	void OnPrevMain();
	void OnPrevCameraInitialize(class ABtl_Camera* BtlCamera);
	void OnPreInitialize();
	void OnPostMain();
	void OnPostCameraInitialize(class ABtl_Camera* BtlCamera);
	void OnMain(float DeltaTime);
	void OnFinalize();
	void OnEndEvent(const struct FBtlCutSceneEndParam& Param);
	void OnDecideWin();
	void OnDecideLose();
	class UBtlScenarioVoiceAsyncPolicy* K2_PlayScenarioVoice(const struct FBtlVoice_DatabaseLabel& BeginVoiceLabel);
	bool IsWinBattleEnd();
	bool IsFinalizeStateComplated();
	bool IsBattleWinCondition();
	bool IsBattleLossCondition();
};


// Class Arise.BtlMetaScriptLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlMetaScriptLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMetaScriptLibrary");
		return ptr;
	}


	void STATIC_OnPrevMainProduction(class UObject* WorldContextObject);
	void STATIC_OnPrevMain(class UObject* WorldContextObject);
	void STATIC_OnPrevCameraInitialize(class UObject* WorldContextObject, class ABtl_Camera* BtlCamera);
	void STATIC_OnPreInitialize(class UObject* WorldContextObject);
	void STATIC_OnPostMain(class UObject* WorldContextObject);
	void STATIC_OnPostCameraInitialize(class UObject* WorldContextObject, class ABtl_Camera* BtlCamera);
	void STATIC_OnMain(class UObject* WorldContextObject, float DeltaTime);
	void STATIC_OnFinalize(class UObject* WorldContextObject);
	void STATIC_OnEndEvent(class UObject* WorldContextObject, const struct FBtlCutSceneEndParam& Param);
	bool STATIC_IsWinBattleEnd(class UObject* WorldContextObject);
	bool STATIC_IsBattleWinCondition(class UObject* WorldContextObject);
	bool STATIC_IsBattleLossCondition(class UObject* WorldContextObject);
};


// Class Arise.Btl_ParticleModule_NPC_VIS_Base
// 0x0000 (0x0038 - 0x0038)
class UBtl_ParticleModule_NPC_VIS_Base : public UParticleModuleSpawnBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_ParticleModule_NPC_VIS_Base");
		return ptr;
	}

};


// Class Arise.Btl_ParticleModule_NPC_VIS
// 0x0008 (0x0040 - 0x0038)
class UBtl_ParticleModule_NPC_VIS : public UBtl_ParticleModule_NPC_VIS_Base
{
public:
	unsigned char                                      bEnableEmitIfNPC : 1;                                     // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_ParticleModule_NPC_VIS");
		return ptr;
	}


	void OnSystemFinish(class UParticleSystemComponent* PSystem);
};


// Class Arise.BtlStatusComponent
// 0x03A0 (0x0498 - 0x00F8)
class UBtlStatusComponent : public UBtlActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnBeginBuff;                                              // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndBuff;                                                // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeHp;                                               // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMaxHp;                                                  // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNormalToPinchHp;                                        // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPinchToNormalHp;                                        // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeSp;                                               // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeSpInternal;                                       // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMaxSp;                                                  // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeOverlimit;                                        // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPrepareOverlimit;                                       // 0x0198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnprepareOverlimit;                                     // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMaxOverlimit;                                           // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeOverlimitTime;                                    // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNothingOverlimitTime;                                   // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeStrike;                                           // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMaxStrike;                                              // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOutMaxStrike;                                           // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginAbnormal;                                          // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTickAbnormal;                                           // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeAbnormalTime;                                     // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndAbnormal;                                            // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnduranceBreak;                                         // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0xB8];                                      // 0x0268(0x00B8) MISSED OFFSET
	struct FBtlStatusBuff                              BuffStatus;                                               // 0x0320(0x00E8) (BlueprintVisible, Transient)
	struct FBtlStatusAction                            Action;                                                   // 0x0408(0x0008) (BlueprintVisible, Transient, IsPlainOldData)
	TArray<class UBtlStatusBuffBase*>                  BuffArray;                                                // 0x0410(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class UBtlStatusBuffBase*>                  TickBuffArray;                                            // 0x0420(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class UBtlStatusBuff_SkillBase*>            DamageBuffArray;                                          // 0x0430(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TMap<struct FString, float>                        ActiveSkillLists;                                         // 0x0440(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	class UAriseStatusHandle*                          StatusHandle;                                             // 0x0490(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatusComponent");
		return ptr;
	}


	void UpdateEquipment();
	struct FString ToString();
	void SubStrikeAttack(float Value);
	void SubSPInternal(float Value);
	void SubSP(int Value);
	void SubOverlimitTime(float Value);
	void SubOverlimit(int Value);
	void SubHP(int Value);
	void SubGuardBreak(int Value);
	void SubEnduranceValue(int Value);
	void SubCP(int Value);
	void SetWeakPowerStrengthenRate(EBtlElementType Type, float Value);
	void SetUnlimitedOverlimit(bool IsUnlimited);
	void SetUnitParameterBySlot(const struct FBtlUnitParameterLabel& Label, const struct FName& SlotLabel, float Value);
	void SetUnitParameter(const struct FBtlUnitParameterLabel& Label, float Value);
	void SetTotalExp(int Value);
	void SetStrikeAttackRecoverValue(bool Overwrite, float Value);
	void SetStrikeAttack(float Value);
	void SetSPInternal(float Value);
	void SetSP(int Value);
	void SetPenetrate(int Value);
	void SetOverwriteDamageEffect(const struct FName& Label, bool bClearOnDamage);
	void SetOverlimitTimeMax(float Value);
	void SetOverlimitTime(float Value);
	void SetOverLimit(int Value);
	void SetLv(int Value);
	void SetHPSection(TArray<float> HPSectionList);
	void SetHPRate(float HpRate);
	void SetHPMax(int Value);
	void SetHP(int Value);
	void SetHateRate(float Value);
	void SetHalfSPTriggerWeight(float Weight);
	void SetGuardBreak(int Value);
	void SetEnduranceValue(int Value);
	void SetEndurance(int Value);
	void SetElementDef(int Value);
	void SetElementAtk(int Value);
	void SetDrawAbnormalType(EAbnormalType Type);
	void SetDrawAbnormalTime(float Value);
	void SetDef(int Value);
	void SetDamageEffect(const struct FName& Label);
	void SetBombBullet(int BulletNum);
	void SetAtk(int Value);
	void SetArtsLearn(const struct FName& ArtsLabel);
	void SetAlleviation(int Value);
	void SetAbnormalValue(EAbnormalType Type, int Value);
	void SetAbnormalTimer(EAbnormalType Type, float Value);
	void SetAbnormalCutRate(EAbnormalType Type, float Value);
	void SetAbnormalCount(EAbnormalType Type, int Value);
	void RemoveSimpleBuff(const struct FString& BuffName);
	void RemoveDamageEffectSkill(const struct FName& SkillLabel);
	void OnPostBeginBattle();
	void OnParameterHandleChanged(int HandleIndex, float OldValue, float NewValue);
	void OnHpBonusChanged(int HandleIndex, float OldValue, float NewValue);
	void OnEndTimeStop();
	void OnEndBattle();
	void OnBeginTimeStop();
	void OnBattleFinished(EBtlResultType Type);
	void OnBaseHpBonusChanged(int HandleIndex, float OldValue, float NewValue);
	struct FName STATIC_MakeUnitParameterLabel(const struct FBtlUnitParameterLabel& Label);
	void K2_GetSkillParameterByInt(const struct FString& SkillName, bool* IsActiveSkill, float* SkillParameter);
	void K2_GetSkillParameter(const struct FString& SkillName, bool* IsActiveSkill, float* SkillParameter);
	bool STATIC_IsValidAbnormalType(EAbnormalType Type);
	bool IsUnlimitedOverlimit();
	bool IsStrikeFull();
	bool IsSpecificSkillLearned(const struct FString& SkillName);
	bool IsPinchHP();
	bool IsFullHP();
	bool IsEndurance();
	bool IsArtsSealedById(int ArtsId);
	bool IsArtsSealed(const struct FName& ArtsLabel);
	bool IsArtsLearnedById(int ArtsId);
	bool IsArtsLearned(const struct FName& ArtsLabel);
	bool IsAnyAbnormal();
	bool IsActiveSimpleBuff(const struct FString& BuffName);
	bool IsAbnormal(EAbnormalType Type);
	void IncrementAbnormalCount(EAbnormalType Type);
	float GetWeakPowerStrengthenRate(EBtlElementType Type);
	float GetUnitParameterBySlot(const struct FBtlUnitParameterLabel& Label, const struct FName& SlotLabel);
	float GetUnitParameterByIndex(int Index);
	int GetUnitParameterAsInt(const struct FBtlUnitParameterLabel& Label, int DefaultValue);
	bool GetUnitParameterAsBool(const struct FBtlUnitParameterLabel& Label);
	float GetUnitParameter(const struct FBtlUnitParameterLabel& Label, float DefaultValue);
	int GetTotalExp();
	int GetTargetedCount();
	float GetStrikeAttackRate();
	float GetStrikeAttackMax();
	float GetStrikeAttack();
	float GetSPMaxInternal();
	float GetSPMaxHUDInternal();
	int GetSPMaxHUD();
	int GetSPMax();
	float GetSPInternal();
	float GetSpeedRate();
	int GetSP();
	float GetPenetrateBuff();
	int GetPenetrate();
	struct FName GetOverwriteDamageEffect(bool* bClearOnDamage);
	struct FName GetOverrideMysticArts();
	float GetOverlimitTimeRate();
	float GetOverlimitTimeMax();
	float GetOverlimitTime();
	float GetOverlimitRate();
	int GetOverlimitPrepare();
	int GetOverlimitMaxRear();
	int GetOverlimitMax();
	int GetOverLimit();
	int GetNormalAttackMax();
	int GetLv();
	float GetKnockbackTimeRate(class ABtlCharacterBase* Target, const struct FName& ArtsLabel);
	int GetHPSectionValue(int SectionIndex);
	TArray<float> GetHPSection();
	float GetHPRate();
	int GetHPPercent();
	int GetHPMax();
	int GetHp();
	float GetHateRate();
	float GetHalfSPTriggerWeight();
	float GetGuardDamageRate();
	int GetGuardBreakMax();
	int GetGuardBreak();
	int GetEnduranceValueMax();
	int GetEnduranceValue();
	float GetEnduranceBuff();
	int GetEndurance();
	float GetElementDefBuff();
	int GetElementDef();
	float GetElementAtkBuff();
	int GetElementAtk();
	EAbnormalType GetDrawAbnormalType();
	float GetDrawAbnormalTime();
	float GetDefBuff();
	int GetDef();
	struct FName GetDamageEffect();
	float GetChantSpeedRate(int ComboArtsCount);
	float GetBuffParameterValue(EBtlStatusBuffParameterType Type, bool bIgnoreBonus);
	int GetBombBulletMax();
	int GetBombBullet();
	int GetBasePhysicalAttack();
	int GetBaseElementAttack();
	float GetAvoidanceDistanceRate();
	float GetAtkBuff();
	int GetAtk();
	int GetArtsUseCount(const struct FName& ArtsLabel);
	float GetArtsPower();
	float GetArtsHealPower();
	float GetArtsDownRate();
	int GetAlleviation();
	int GetAbnormalValueMax();
	int GetAbnormalValue(EAbnormalType Type);
	float GetAbnormalTimer(EAbnormalType Type);
	float GetAbnormalProcessTimer(EAbnormalType Type);
	float GetAbnormalProcessMaxTime();
	int GetAbnormalGuardValue(EAbnormalType Type);
	float GetAbnormalCutRate(EAbnormalType Type);
	int GetAbnormalCountMax();
	int GetAbnormalCount(EAbnormalType Type);
	void CutSurplusOverlimit();
	void ClearAbnormalAll();
	void ClearAbnormal(EAbnormalType Type);
	int CheckHpSectionOver(int PrevHp, int CheckHp, bool SkipOneSection);
	bool ChangeSimpleBuff(const struct FString& BuffName, float NewBuffValue);
	float CalculateDamageDecrease(float DefaultDamage, class ABtlCharacterBase* AttackerActor, const TScriptInterface<class UBtlAttackCollisionInterface>& AttackCollision, class ABtlCharacterBase* DmgActor, class UBtlDamageSphereComponent* DmgCollision, const struct FBtlArtsData& ArtsData, bool IsGuard, bool IsCritical, bool IsWeakness, bool IsResistance);
	float CalculateDamageAdd(float DefaultDamage, class ABtlCharacterBase* AttackerActor, const TScriptInterface<class UBtlAttackCollisionInterface>& AttackCollision, class ABtlCharacterBase* DmgActor, class UBtlDamageSphereComponent* DmgCollision, const struct FBtlArtsData& ArtsData, bool IsGuard, bool IsCritical, bool IsWeakness, bool IsResistanc);
	void BtlStatusAbnormalTickSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent, EAbnormalType AbnormalType, float DeltaTime);
	void BtlStatusAbnormalChangeTimeSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent, EAbnormalType AbnormalType, float PrevTime, float Time);
	void BtlSpInternalChangeSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent, float PrevSp, float NewSp);
	void BtlSpChangeSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent, int PrevSp, int NewSp);
	void BtlPrepareOverlimitSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlPinchToNormalHpSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlNothingOverlimitTimeSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlNormalToPinchHpSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlMaxStrikeSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlMaxSpSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlMaxOverlimitSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlMaxHpSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlHpChangeSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent, int PrevHp, int NewHp);
	void BtlEnduranceBreakSignature__DelegateSignature();
	void BtlEndAbnormalSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent, EAbnormalType AbnormalType);
	void BtlChangeStrikeSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlChangeOverlimitTimeSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlChangeOverlimitSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent);
	void BtlBeginBuffSignature__DelegateSignature();
	void BtlBeginAbnormalSignature__DelegateSignature(class UBtlStatusComponent* SelfComponent, EAbnormalType AbnormalType);
	void AddTotalExp(int Value);
	void AddStrikeAttack(float Value);
	void AddSPInternal(float Value);
	void AddSP(int Value);
	void AddSkillBuff(const struct FBtlSkill_XmlDatatableLabel& SkillLabel);
	void AddSimpleBuff(const struct FString& BuffName, EBtlSimpleBuffType BuffType, float BuffValue, float BuffTime, bool IsOverlap);
	void AddOverlimitTime(float Value);
	void AddOverLimit(int Value);
	void AddHPSection(float Rate);
	void AddHP(int Value);
	void AddGuardBreak(int Value);
	void AddEnduranceValue(int Value);
	void AddDamageEffectSkill(const struct FName& SkillLabel);
	void AddBuff(const struct FName& BuffID);
	void AddArtsUseCount(const struct FName& ArtsLabel);
	void AddArtsBuff(const struct FBtlArts_XmlDatatableLabel& ArtsLabel);
	void AddAllParamRate(float Rate);
	void AddAbnormalValue(EAbnormalType Type, int Value, int HitCount, class UBtlStatusComponent* Attacker);
	void AddAbnormalCount(EAbnormalType Type, int Value);
};


// Class Arise.BtlPartyStatusComponent
// 0x0010 (0x04A8 - 0x0498)
class UBtlPartyStatusComponent : public UBtlStatusComponent
{
public:
	EArisePartyID                                      PartyId;                                                  // 0x0498(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0499(0x0007) MISSED OFFSET
	class UArisePCStatus*                              ArisePCStatus;                                            // 0x04A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlPartyStatusComponent");
		return ptr;
	}


	void OverrideActiveSkillList(TMap<struct FString, float> SkillList);
	void OverrideActiveSkill(const struct FString& SkillLabel, bool Enabled);
};


// Class Arise.BtlPostProcessVolumeManager
// 0x00E0 (0x0410 - 0x0330)
class ABtlPostProcessVolumeManager : public ABtlBasicManagerBase
{
public:
	class AArisePostProcessVolume*                     BtlPostVolume;                                            // 0x0330(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBeginRadialBlur;                                        // 0x0338(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndRadialBlur;                                          // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x98];                                      // 0x0358(0x0098) MISSED OFFSET
	class UShapeComponent*                             RadialBlurLocationComponent;                              // 0x03F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ABtlCharacterBase*                           RadialBlurActor;                                          // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0400(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlPostProcessVolumeManager");
		return ptr;
	}

};


// Class Arise.BtlPostProcessVolumeLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlPostProcessVolumeLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlPostProcessVolumeLibrary");
		return ptr;
	}


	void STATIC_StopRadialBlurAnim();
	void STATIC_SetupBtlMapPostProcess(const struct FName& MapID);
	void STATIC_SetShadowColor(bool on, const struct FLinearColor& ShadowColor);
	void STATIC_SetSceneIntensityScale(bool on, float Scale);
	void STATIC_SetRadialBlurEasing(bool EaseStrength, bool EaseLength, TEnumAsByte<EEasingFunc> InFunc, float InBlendExp, float InSeconds, float KeepSeconds, TEnumAsByte<EEasingFunc> OutFunc, float OutBlendExp, float OutSeconds);
	void STATIC_SetRadialBlur3d(bool on, float Strength, float Length, const struct FVector& point3d);
	void STATIC_SetRadialBlur2d(bool on, float Strength, float Length, const struct FVector2D& point2d);
	void STATIC_SetPanoramaParaIntensity(bool on, float Intensity);
	void STATIC_SetMotionBlurParam(bool on, float Amount, float Max, float PerObjectSize);
	void STATIC_SetGrayScale(bool on);
	void STATIC_SetGlobalContrast(bool on, const struct FVector4& Contrast);
	void STATIC_SetFogStartDistanceMin(bool on, float FogStartDistance);
	void STATIC_SetBloomThreshold(bool on, float Threshold);
	void STATIC_SetBloomIntensity(bool on, float Intensity);
	bool STATIC_RequestDarkness(class UObject* WorldContextObject, const struct FBtlArtsHandle& ArtsHandle, float Intensity, float Interval_InDarkness);
	void STATIC_ReleaseDarkness(class UObject* WorldContextObject, const struct FBtlArtsHandle& ArtsHandle, float Interval_InDarkness);
	void STATIC_PlaySceneIntensityAnim(float Start, float End, float Seconds, float Exp);
	void STATIC_PlayRadialBlurAnimBySocket(float Strength, float Length, class ABtlCharacterBase* Actor, const struct FName& SocketName, float Seconds);
	void STATIC_PlayRadialBlurAnimByBone(float Strength, float Length, class ABtlCharacterBase* Actor, const struct FName& BoneName, float Seconds);
	void STATIC_PlayRadialBlurAnim(float Strength, float Length, class UShapeComponent* locationComponent, float Seconds);
	void STATIC_ForceReleaseDarknessAll();
};


// Class Arise.BtlProfileAccessor
// 0x0000 (0x0028 - 0x0028)
class UBtlProfileAccessor : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlProfileAccessor");
		return ptr;
	}

};


// Class Arise.BtlProjectSettings
// 0x0838 (0x0860 - 0x0028)
class UBtlProjectSettings : public UObject
{
public:
	struct FBtlStatusSettings                          StatusSettings;                                           // 0x0028(0x0080) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlAbnormalSettings                        AbnormalSettings;                                         // 0x00A8(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	float                                              ShortestCastSec;                                          // 0x00E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              IgnoreCastVoiceSec;                                       // 0x00EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FBtlSystemSettings                          SystemSettings;                                           // 0x00F0(0x0150) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlFormationProjectSettings                FormationSettings;                                        // 0x0240(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlKnockbackSettings                       KnockbackSettings;                                        // 0x0248(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlFlashRaidSettings                       FlashRaidSettings;                                        // 0x025C(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlStrikeAttackSettings                    StrikeAttackSettings;                                     // 0x0278(0x0044) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	struct FBtlStrikeSmashSettings                     StrikeSmashSettings;                                      // 0x02C0(0x0098) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlCameraSettings                          CameraSettings;                                           // 0x0358(0x0138) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlEndSettings                             EndSettings;                                              // 0x0490(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlPostProcessSettings                     PostProcessSettings;                                      // 0x04E0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlSurfaceSettings                         SurfaceSettings;                                          // 0x0530(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlHateSettings                            HateSettings;                                             // 0x0580(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlEscapeSettings                          EscapeSettings;                                           // 0x059C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlResultSettings                          ResultSettings;                                           // 0x05A8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlPartyAISettings                         PartyAISettings;                                          // 0x05C8(0x0138) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlSettings_ARI                            ARI_Settings;                                             // 0x0700(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlSettings_SIO                            SIO_Settings;                                             // 0x0720(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlSettings_ZGU                            ZGU_Settings;                                             // 0x0724(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlSettings_MNK                            MNK_Settings;                                             // 0x0734(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlSettings_YRA                            YRA_Settings;                                             // 0x074C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      UnknownData01[0x4];                                       // 0x075C(0x0004) MISSED OFFSET
	struct FBtlDamageSettings                          DamageSettings;                                           // 0x0760(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlCollisionProfileSettings                CollisionProfileSettings;                                 // 0x0788(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	float                                              ComboHudShowTime;                                         // 0x07C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              ShortChatHudShowTime;                                     // 0x07C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	int                                                ShowHelpRetryCount;                                       // 0x07C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	struct FBtlSettings_HudSettings                    HudSettings;                                              // 0x07CC(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      UnknownData02[0x4];                                       // 0x07D4(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData03[0x28];                                      // 0x07D4(0x0028) UNKNOWN PROPERTY: SoftClassProperty Arise.BtlProjectSettings.BMS_DefaultPath
	struct FBtlProficiencySettings                     ProficiencySettings;                                      // 0x0800(0x0048) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlDestructSettings                        DestructSettings;                                         // 0x0848(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBtlVoiceSettings                           VoiceSettings;                                            // 0x084C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0858(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlProjectSettings");
		return ptr;
	}

};


// Class Arise.BtlDeveloperSettings
// 0x0010 (0x0038 - 0x0028)
class UBtlDeveloperSettings : public UObject
{
public:
	bool                                               bIsUINewLayout;                                           // 0x0028(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               IsRequiredAssetsResident;                                 // 0x0029(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	EBtlDeveloperSettingsLoadType                      EditorLoadType;                                           // 0x002C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002A(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               bForceShowBattleShortChat;                                // 0x0030(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bForceVoiceCondition_Scenario_Relationship;               // 0x0031(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsDBMUseJapanese;                                        // 0x0032(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               IsUsePoolAttackCollision;                                 // 0x0033(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               IsComboStartDistance_TargetComponent;                     // 0x0034(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               IsOldBrakeRequest;                                        // 0x0035(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0036(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlDeveloperSettings");
		return ptr;
	}

};


// Class Arise.BtlRankDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlRankDataClass : public UXmlDatabaseBase
{
public:
	struct FBtlRankDataList                            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlRankDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BtlResultManager
// 0x02B8 (0x05E8 - 0x0330)
class ABtlResultManager : public ABtlBasicManagerBase
{
public:
	struct FBattleResultHudInfomation                  ResultHudInfomation;                                      // 0x0330(0x00A8) (BlueprintVisible, Transient)
	EBtlResultType                                     ResultType;                                               // 0x03D8(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnChangeResult;                                           // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                Exp;                                                      // 0x03F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              RisePoint;                                                // 0x03F4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              Time;                                                     // 0x03F8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                Spirit;                                                   // 0x03FC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x108];                                     // 0x0400(0x0108) MISSED OFFSET
	bool                                               bOpenResultHudRequest;                                    // 0x0508(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bPreloadResultHudRequest;                                 // 0x0509(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x050A(0x0006) MISSED OFFSET
	class UClass*                                      ResultViewClass;                                          // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBtlResultViewModel*                         ViewModel;                                                // 0x0518(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UUserWidget*                                 ResultView;                                               // 0x0520(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FScriptDelegate                             OnResultViewClose;                                        // 0x0528(0x0014) (ZeroConstructor, Transient, InstancedReference)
	EAriseUIOrder                                      ResultHudZOrder;                                          // 0x0538(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0539(0x0003) MISSED OFFSET
	int                                                ResultHudZOrderOffset;                                    // 0x053C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0540(0x0028) UNKNOWN PROPERTY: SoftClassProperty Arise.BtlResultManager.ResultHud
	int                                                AsyncLoadPriority;                                        // 0x0568(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x056C(0x0004) MISSED OFFSET
	TArray<struct FBattleResultDefeatTrophy>           DefeatTrophyArray;                                        // 0x0570(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBtlUnitID>                          DefeatKpiUnitArray;                                       // 0x0580(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnBattleResultHudStart;                                   // 0x0590(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayContinuousBonus;                                    // 0x05A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleResultHudLevelUpAnimFinish;                       // 0x05B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleResultHudFinish;                                  // 0x05C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               HasResultValue;                                           // 0x05D0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bForceClose;                                              // 0x05D1(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x05D2(0x0006) MISSED OFFSET
	TArray<int>                                        NewTpItemArray;                                           // 0x05D8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlResultManager");
		return ptr;
	}


	void UpdateTime(float DeltaTime);
	void PreloadBattleResultHud();
	void PreApplyResult();
	void OpenBattleResultHud();
	void OnPostBattleResutlHud();
	void OnPlayShortCatAnim();
	void OnPlayContinuousBonusImpl();
	void OnLevelupAnimationFinish();
	void OnCloseAnimationFinish();
	void OnAssetLoadComplate(class UObject* LoadObject);
	void K2_OnLevelupAnimationFinish();
	void K2_OnCloseAnimationFinish();
	bool IsRareDrop();
	bool IsLevelUp(EArisePartyID PartyId);
	bool HasRewardItem();
	bool HasResultHud();
	bool HasResult();
	bool HasRareRewardItem();
	class UBtlResultViewModelBase* GetViewModel();
	float GetTime();
	TMap<struct FName, int> GetRewardItem();
	void ForceCloseBattleResultHud();
	void DefeatEnemy(class ABtlCharacterBase* Enemy, class ABtlCharacterBase* Attacker);
	void CloseBattleResultHud(const struct FScriptDelegate& OnClose);
	void ClearHasResult();
	void ClearBattleResultHudInfo();
	void BattleResultHudSignature__DelegateSignature();
	void BattleResultChangeSignature__DelegateSignature(EBtlResultType PrevType, EBtlResultType NewType);
	void ApplyResult();
	void AddRewardStrikeAttack(class ABtlCharacterBase* Enemy, const struct FName& Striker);
	void AddRewardCoreBreak(class ABtlCharacterBase* Enemy, const struct FName& CoreLabel);
};


// Class Arise.BtlResultLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlResultLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlResultLibrary");
		return ptr;
	}


	void STATIC_SetBattleResultType(class UObject* WorldContextObject, EBtlResultType Result);
	void STATIC_SendKpi_ExDungeon(class UObject* WorldContextObject);
	bool STATIC_IsDecideBattleResult(class UObject* WorldContextObject);
	float STATIC_GetTime(class UObject* WorldContextObject);
	int STATIC_GetSpirit(class UObject* WorldContextObject);
	int STATIC_GetRisePoint(class UObject* WorldContextObject);
	TMap<struct FName, int> STATIC_GetRewardItem(class UObject* WorldContextObject);
	int STATIC_GetExp(class UObject* WorldContextObject);
	TMap<struct FName, int> STATIC_GetDefeatEnemy(class UObject* WorldContextObject);
	EBtlResultType STATIC_GetBattleResultType(class UObject* WorldContextObject);
	void STATIC_Clear(class UObject* WorldContextObject);
};


// Class Arise.BtlRootCustomState
// 0x0000 (0x0038 - 0x0038)
class UBtlRootCustomState : public UASState_BlueprintBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlRootCustomState");
		return ptr;
	}

};


// Class Arise.BtlSelfCapsuleComponent
// 0x0010 (0x05D0 - 0x05C0)
class UBtlSelfCapsuleComponent : public UBtlCapsuleComponent
{
public:
	bool                                               bOnlyAttacker;                                            // 0x05C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x05C1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSelfCapsuleComponent");
		return ptr;
	}

};


// Class Arise.BtlSemiautoComponent
// 0x00B8 (0x01B0 - 0x00F8)
class UBtlSemiautoComponent : public UActorComponent
{
public:
	struct FVector                                     MovePoint;                                                // 0x00F8(0x000C) (Edit, BlueprintVisible, EditConst, IsPlainOldData)
	struct FVector                                     JumpToPointDirection;                                     // 0x0104(0x000C) (Edit, BlueprintVisible, EditConst, IsPlainOldData)
	float                                              JumpToPointActionTime;                                    // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               JumpToPointTargetLock;                                    // 0x0114(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               JumpToPoint;                                              // 0x0115(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0116(0x0002) MISSED OFFSET
	float                                              JumpToPointTimer;                                         // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     JumpToPointStart;                                         // 0x011C(0x000C) (Edit, BlueprintVisible, EditConst, IsPlainOldData)
	struct FVector                                     JumpToPointTarget;                                        // 0x0128(0x000C) (Edit, BlueprintVisible, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	class UBtlActionQuery*                             StepQuery_Native;                                         // 0x0138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UBtlActionQuery*                             RequestArtsQuery_Native;                                  // 0x0140(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UBtlActionQuery*                             RequestGuardEndQuery_Native;                              // 0x0148(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               WaitMove_Native;                                          // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               FindMovePoint_Native;                                     // 0x0151(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0152(0x0002) MISSED OFFSET
	float                                              MoveTimer_Native;                                         // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FindSafeTimer_Native;                                     // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               FindSafeDirection_Native;                                 // 0x015C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	struct FVector                                     SafeDirection_Native;                                     // 0x0160(0x000C) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	float                                              MoveProcessTimer_Native;                                  // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bOldProcess_Native;                                       // 0x0170(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0171(0x0003) MISSED OFFSET
	int                                                RequestArtsSlotIndex;                                     // 0x0174(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EBtlSemiautoPhase                                  Phase;                                                    // 0x0178(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0179(0x0007) MISSED OFFSET
	struct FName                                       Arts;                                                     // 0x0180(0x0008) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class ABtlCharacterBase*                           ArtsTarget;                                               // 0x0188(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               IsMenuRequest;                                            // 0x0190(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	float                                              EQSIntervalTime;                                          // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              EQSTimer;                                                 // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              GuardKeepTime;                                            // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              GuardTimer;                                               // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               IsCombo;                                                  // 0x01A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0xB];                                       // 0x01A5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSemiautoComponent");
		return ptr;
	}


	void TickNative(float DeltaSeconds);
	void SetSemiautoPhase(EBtlSemiautoPhase NewPhase, bool IgnoreSameState);
	void SetPhase(EBtlSemiautoPhase NewPhase);
	void SetMoveToSafePlaceAction(bool on);
	void SetMoveAwayFromTargetAction(bool on, float Distance);
	void SetGuardTimer(float Value);
	void SetGuardKeepTime(float Value);
	void SetEqsTimer(float Value);
	void SetEqsIntervalTime(float Value);
	void SetComboFlag(bool on);
	void SetArtsTarget(class ABtlCharacterBase* NewTarget);
	void SetArtsMagic(const struct FName& Request, class ABtlCharacterBase* RequestTarget, bool MenuRequest);
	void RequestArtsByInput(int ArtsIndex, int ArtsSlotIndex);
	void PlayJumpToDirection(const struct FVector& Direction, float Time, float Distance, bool TargetLock);
	void PhaseWaitNextComboNative();
	void PhaseStepNative();
	void PhaseMoveToSafePlaceNative(float DeltaSeconds);
	void PhaseMoveNative(float DeltaSeconds);
	void PhaseMoveAwayFromTargetNative();
	void PhaseJumpToPointNative();
	void PhaseJumpNative();
	void PhaseIdleNative();
	void PhaseComboStartNative();
	void PhaseComboEndNative();
	void PhaseAutoStepNative();
	void PhaseAutoGuardNative(float DeltaSeconds);
	void PhaseArtsMagicNative();
	void PauseAINative(bool on);
	bool IsUseStep_ComboEnd();
	bool IsUsableMystic();
	bool IsSafetyPlaceCheck(bool IgnorePlayer);
	bool IsSafetyPlace(float SafetyMarginEnemies, float SafetyMarginFellows, bool IgnorePlayer);
	bool IsAutoStepable();
	bool IsAutoGuardable();
	bool GetSafetyStepDirection(int CircleNum, float CircleDistance, int AngleStepNum, float InMapRangeOffset, float UnitSizeOffset, struct FVector* Direction, float* Distance);
	bool GetSafetyMoveDirectionFilterForward(int CircleNum, float CircleDistance, int AngleStepNum, float InMapRangeOffset, float UnitSizeOffset, float ForwardAngleRange, struct FVector* Direction, float* Distance);
	bool GetSafetyMoveDirection(int CircleNum, float CircleDistance, int AngleStepNum, float InMapRangeOffset, float UnitSizeOffset, struct FVector* Direction, float* Distance);
	bool GetSafetyJumpDirection(int CircleNum, float CircleDistance, int AngleStepNum, float InMapRangeOffset, float UnitSizeOffset, struct FVector* Direction, float* Distance);
	EBtlSemiautoPhase GetPhase();
	bool GetMoveToSafePlaceAction();
	float GetMoveAwayFromTargetDistance();
	bool GetMoveAwayFromTargetAction();
	bool GetMenuRequest();
	float GetGuardTimer();
	float GetGuardKeepTime();
	bool GetEscapeStepDirection(int CircleNum, float CircleDistance, int AngleStepNum, float InMapRangeOffset, float UnitSizeOffset, struct FVector* Direction, float* Distance);
	bool GetEscapeMoveDirection(int CircleNum, float CircleDistance, int AngleStepNum, float InMapRangeOffset, float UnitSizeOffset, struct FVector* Direction, float* Distance);
	bool GetEscapeJumpDirection(int CircleNum, float CircleDistance, int AngleStepNum, float InMapRangeOffset, float UnitSizeOffset, struct FVector* Direction, float* Distance);
	float GetEqsTimer();
	float GetEqsIntervalTime();
	bool GetComboFlag();
	bool GetCloserToTargetMoveDirection(int CircleNum, float CircleDistance, int AngleStepNum, float InMapRangeOffset, float UnitSizeOffset, struct FVector* Direction, float* Distance);
	struct FVector GetAutoStepDirection();
	class ABtlCharacterBase* GetArtsTarget();
	struct FName GetArtsMagic();
	class ABtlCharacterBase* GetActionTargetUnit(bool IgnoreTemporary);
	void GenerateLocationScoreBP(int CircleNum, float CircleDistance, int AngleStepNum, float OffsetAngle, TArray<struct FBtlSemiautoLocationScore>* Result);
	void GenerateLocationScore_ForwardTargetBP(int CircleNum, float CircleDistance, int AngleStepNum, TArray<struct FBtlSemiautoLocationScore>* Result);
	void GenerateLocationScore_ForwardOwnerBP(int CircleNum, float CircleDistance, int AngleStepNum, TArray<struct FBtlSemiautoLocationScore>* Result);
	TArray<struct FBtlSemiautoLocationScore> FilterLocation_UnitSizeBP(TArray<struct FBtlSemiautoLocationScore> List, float OffsetSize);
	TArray<struct FBtlSemiautoLocationScore> FilterLocation_OwnerToIntersectUnit_ForStepBP(TArray<struct FBtlSemiautoLocationScore> List);
	TArray<struct FBtlSemiautoLocationScore> FilterLocation_OwnerToIntersectUnit_ForMoveBP(TArray<struct FBtlSemiautoLocationScore> List);
	TArray<struct FBtlSemiautoLocationScore> FilterLocation_OwnerToIntersectUnit_ForJumpBP(TArray<struct FBtlSemiautoLocationScore> List, float HeightBtm, float HeightTop);
	TArray<struct FBtlSemiautoLocationScore> FilterLocation_OwnerAngleRangeBP(TArray<struct FBtlSemiautoLocationScore> List, float AngleRange);
	TArray<struct FBtlSemiautoLocationScore> FilterLocation_InMapBP(TArray<struct FBtlSemiautoLocationScore> List, float OffsetDistance);
	void DebugDraw_SemiautoLocationScoreBP(TArray<struct FBtlSemiautoLocationScore> Scores, float LifeTime, float Thickness);
	void ComboEnd();
	void ClearParams();
	void ClearArtsMagic();
	bool CanMoveToTargetByStraightLine();
	TArray<struct FBtlSemiautoLocationScore> CalculateScore_UnitDistanceFarBP(TArray<struct FBtlSemiautoLocationScore> List);
	TArray<struct FBtlSemiautoLocationScore> CalculateScore_TargetDistanceNearBP(TArray<struct FBtlSemiautoLocationScore> List);
	TArray<struct FBtlSemiautoLocationScore> CalculateScore_TargetDistanceFarBP(TArray<struct FBtlSemiautoLocationScore> List);
};


// Class Arise.MovieSceneRangeNotify
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneRangeNotify : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MovieSceneRangeNotify");
		return ptr;
	}


	void Received_TickEvent(class AActor* Owner, float DeltaTime);
	void Received_EndEvent(class AActor* Owner);
	void Received_BeginEvent(class AActor* Owner);
	struct FString GetEventNotifyName();
	class AActor* GetBindingObject(const struct FMovieSceneObjectBindingID& BindingID);
};


// Class Arise.BtlSequencerRangeNotify_BattleCutSceneTargetDeadFadeTimerZero
// 0x0000 (0x0038 - 0x0038)
class UBtlSequencerRangeNotify_BattleCutSceneTargetDeadFadeTimerZero : public UMovieSceneRangeNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSequencerRangeNotify_BattleCutSceneTargetDeadFadeTimerZero");
		return ptr;
	}

};


// Class Arise.BtlSequencerRangeNotify_BattleCutSceneTargetDestory
// 0x0000 (0x0038 - 0x0038)
class UBtlSequencerRangeNotify_BattleCutSceneTargetDestory : public UMovieSceneRangeNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSequencerRangeNotify_BattleCutSceneTargetDestory");
		return ptr;
	}

};


// Class Arise.BtlSequencerRangeNotify_BattleVoiceBase
// 0x0010 (0x0048 - 0x0038)
class UBtlSequencerRangeNotify_BattleVoiceBase : public UMovieSceneRangeNotify
{
public:
	struct FBtlVoice_DatabaseLabel                     VoiceLabel;                                               // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSequencerRangeNotify_BattleVoiceBase");
		return ptr;
	}

};


// Class Arise.BtlSequencerRangeNotify_SpawnMagic
// 0x0080 (0x00B8 - 0x0038)
class UBtlSequencerRangeNotify_SpawnMagic : public UMovieSceneRangeNotify
{
public:
	class UBtlMagicAsset*                              MagicAsset;                                               // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FBtl_MagicSpawnParam                        SpawnOverrideParam;                                       // 0x0040(0x0038) (BlueprintReadOnly, Deprecated)
	struct FBtl_MagicSpawnLocationParam                SpawnOverrideLocationParam;                               // 0x0078(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBtl_MagicSpawnRotationParam                SpawnOverrideRotationParam;                               // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               bOverrideParam;                                           // 0x00B0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSequencerRangeNotify_SpawnMagic");
		return ptr;
	}

};


// Class Arise.BtlSequencerRangeNotify_SphereCollision
// 0x0070 (0x00A8 - 0x0038)
class UBtlSequencerRangeNotify_SphereCollision : public UMovieSceneRangeNotify
{
public:
	struct FName                                       SocketName;                                               // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FBtlSphereCollisionInfo>             CollisionInfos;                                           // 0x0040(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      CollisionClass;                                           // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FAttackSphereParam                          ActualAttackParam;                                        // 0x0058(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSequencerRangeNotify_SphereCollision");
		return ptr;
	}


	void Received_TickEventCharacter(class ACharacter* Owner, float DeltaTime);
	void Received_EndEventCharacter(class ACharacter* Owner);
	void Received_BeginEventCharacter(class ACharacter* Owner);
	void PreRegisterComponentWorld(class USphereComponent* NewSphereComponent);
	TArray<class USphereComponent*> GetCreatedCollisionComponents(class ACharacter* Owner);
	class USphereComponent* CreateSphereComponent(class ACharacter* Owner, class UClass* SphereClass, const struct FBtlSphereCollisionInfo& SphereInfo);
};


// Class Arise.Btl_SpectatorPawn
// 0x0000 (0x0388 - 0x0388)
class ABtl_SpectatorPawn : public APawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Btl_SpectatorPawn");
		return ptr;
	}

};


// Class Arise.BtlSplineAsset
// 0x0078 (0x00A0 - 0x0028)
class UBtlSplineAsset : public UObject
{
public:
	struct FInterpCurveVector                          SplineInfo;                                               // 0x0028(0x0018) (Edit, EditConst)
	struct FInterpCurveQuat                            SplineRotInfo;                                            // 0x0040(0x0018) (Edit, EditConst)
	struct FInterpCurveVector                          SplineScaleInfo;                                          // 0x0058(0x0018) (Edit, EditConst)
	struct FInterpCurveFloat                           SplineReparamTable;                                       // 0x0070(0x0018) (Edit, EditConst)
	int                                                ReparamStepsPerSegment;                                   // 0x0088(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Duration;                                                 // 0x008C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bStationaryEndpoints;                                     // 0x0090(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bSplineHasBeenEdited;                                     // 0x0091(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bClosedLoop;                                              // 0x0092(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0093(0x0001) MISSED OFFSET
	struct FVector                                     DefaultUpVector;                                          // 0x0094(0x000C) (Edit, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSplineAsset");
		return ptr;
	}

};


// Class Arise.BtlSplineComponent
// 0x0000 (0x0670 - 0x0670)
class UBtlSplineComponent : public USplineComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSplineComponent");
		return ptr;
	}


	bool ReadFromSplineAsset();
};


// Class Arise.BtlStateBase
// 0x0008 (0x0030 - 0x0028)
class UBtlStateBase : public UObject
{
public:
	EBattleStateAction                                 Process;                                                  // 0x0028(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateBase");
		return ptr;
	}


	void Tick(float DeltaTime);
	bool IsInitializeComplete();
	bool IsFinalizeComplete();
	void Initialize();
	void Finalize();
	bool CanExecutable();
	void Activate();
};


// Class Arise.BtlStateNone
// 0x0000 (0x0030 - 0x0030)
class UBtlStateNone : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateNone");
		return ptr;
	}

};


// Class Arise.BtlStateInitialize
// 0x0000 (0x0030 - 0x0030)
class UBtlStateInitialize : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateInitialize");
		return ptr;
	}

};


// Class Arise.BtlStatePrev
// 0x0000 (0x0030 - 0x0030)
class UBtlStatePrev : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatePrev");
		return ptr;
	}

};


// Class Arise.BtlStateMain
// 0x0028 (0x0058 - 0x0030)
class UBtlStateMain : public UBtlStateBase
{
public:
	ERunawayPhase                                      RunawayPhase;                                             // 0x0030(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              RunawayTimer;                                             // 0x0034(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RunawaySuccessTime;                                       // 0x0038(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class ABtlCharacterBase*                           UseItemUnit;                                              // 0x0040(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                UseItemId;                                                // 0x0048(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UseItemRecastTimer;                                       // 0x004C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UseItemRecastTimerMax;                                    // 0x0050(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateMain");
		return ptr;
	}


	void OnCanceledRunaway();
	void OnBeginRunaway();
	void OnBeginBattleDecideFlow();
};


// Class Arise.BtlStatePostMain
// 0x0000 (0x0030 - 0x0030)
class UBtlStatePostMain : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatePostMain");
		return ptr;
	}

};


// Class Arise.BtlStateMenu
// 0x0000 (0x0030 - 0x0030)
class UBtlStateMenu : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateMenu");
		return ptr;
	}

};


// Class Arise.BtlStateEvent
// 0x0010 (0x0040 - 0x0030)
class UBtlStateEvent : public UBtlStateBase
{
public:
	class ULevelSequence*                              LevelSequence;                                            // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FBtlEventParam                              Param;                                                    // 0x0038(0x0005) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateEvent");
		return ptr;
	}

};


// Class Arise.BtlStateGameover
// 0x0008 (0x0038 - 0x0030)
class UBtlStateGameover : public UBtlStateBase
{
public:
	float                                              Timer;                                                    // 0x0030(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateGameover");
		return ptr;
	}

};


// Class Arise.BtlStateRetry
// 0x0000 (0x0030 - 0x0030)
class UBtlStateRetry : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateRetry");
		return ptr;
	}

};


// Class Arise.BtlStateResult
// 0x0000 (0x0030 - 0x0030)
class UBtlStateResult : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateResult");
		return ptr;
	}

};


// Class Arise.BtlStateRunaway
// 0x0008 (0x0038 - 0x0030)
class UBtlStateRunaway : public UBtlStateBase
{
public:
	float                                              Timer;                                                    // 0x0030(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateRunaway");
		return ptr;
	}

};


// Class Arise.BtlStateTutorial
// 0x0000 (0x0030 - 0x0030)
class UBtlStateTutorial : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateTutorial");
		return ptr;
	}

};


// Class Arise.BtlStatePause
// 0x0000 (0x0030 - 0x0030)
class UBtlStatePause : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStatePause");
		return ptr;
	}

};


// Class Arise.BtlStateFinalize
// 0x0000 (0x0030 - 0x0030)
class UBtlStateFinalize : public UBtlStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateFinalize");
		return ptr;
	}

};


// Class Arise.BtlStateManager
// 0x0168 (0x0190 - 0x0028)
class UBtlStateManager : public UObject
{
public:
	EBattleState                                       CurrentState;                                             // 0x0028(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EBattleState                                       ReserveState;                                             // 0x0029(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x002A(0x0006) MISSED OFFSET
	TMap<EBattleState, class UBtlStateBase*>           StateList;                                                // 0x0030(0x0050) (ZeroConstructor)
	class UClass*                                      StateNoneClass;                                           // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateNone*                               StateNone;                                                // 0x0088(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateInitializeClass;                                     // 0x0090(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateInitialize*                         StateInitialize;                                          // 0x0098(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StatePrevClass;                                           // 0x00A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStatePrev*                               StatePrev;                                                // 0x00A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateMainClass;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateMain*                               StateMain;                                                // 0x00B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StatePostMainClass;                                       // 0x00C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStatePostMain*                           StatePostMain;                                            // 0x00C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateMenuClass;                                           // 0x00D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateMenu*                               StateMenu;                                                // 0x00D8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateEventClass;                                          // 0x00E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateEvent*                              StateEvent;                                               // 0x00E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateGameoverClass;                                       // 0x00F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateGameover*                           StateGameover;                                            // 0x00F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateRetryClass;                                          // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateRetry*                              StateRetry;                                               // 0x0108(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateResultClass;                                         // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateResult*                             StateResult;                                              // 0x0118(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateRunawayClass;                                        // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateRunaway*                            StateRunaway;                                             // 0x0128(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateTutorialClass;                                       // 0x0130(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateTutorial*                           StateTutorial;                                            // 0x0138(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StateFinalizeClass;                                       // 0x0140(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStateFinalize*                           StateFinalize;                                            // 0x0148(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      StatePauseClass;                                          // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBtlStatePause*                              StatePause;                                               // 0x0158(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBtlStateChange;                                         // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBtlSubStateStart;                                       // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBtlSubStateEnd;                                         // 0x0180(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStateManager");
		return ptr;
	}


	void SetStateAction(EBattleState State, class UBtlStateBase* Action);
	bool RequestSubState(EBattleState State);
	bool RequestState(EBattleState State, bool Force);
	bool RequestEvent(class ULevelSequence* LevelSequence, const struct FBtlEventParam& Param, bool Force);
	bool IsCurrentStateMainOnly();
	EBattleState GetSubState();
	class UBtlStateBase* GetStateAction(EBattleState State);
	EBattleState GetCurrentState();
	bool FinalizeSubState(EBattleState SubState);
};


// Class Arise.BtlStrikeDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlStrikeDataClass : public UXmlDatabaseBase
{
public:
	struct FBtlStrikeDataList                          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlStrikeDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BtlSystemEffectManager
// 0x0010 (0x0038 - 0x0028)
class UBtlSystemEffectManager : public UObject
{
public:
	TArray<class UParticleSystemComponent*>            ParticleList;                                             // 0x0028(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSystemEffectManager");
		return ptr;
	}


	void Finished_Event(class UParticleSystemComponent* ParticleComponent);
};


// Class Arise.BtlSystemEffectLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlSystemEffectLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlSystemEffectLibrary");
		return ptr;
	}


	class UParticleSystemComponent* STATIC_PlaySystemEffectAttached(class UObject* WorldContextObject, const struct FName& SystemEffectLabel, class USceneComponent* Parent, const struct FName& SocketName, const struct FVector& Location, const struct FRotator& Rotation, class ABtlCharacterBase* Sender);
	class UParticleSystemComponent* STATIC_PlaySystemEffect(class UObject* WorldContextObject, const struct FName& SystemEffectLabel, const struct FTransform& Transform, class ABtlCharacterBase* Sender);
	void STATIC_PlayBattleSystemSE(class UObject* WorldContextObject, const struct FBattleSystemEffect_DatatableLabel& SystemEffectLabel, const struct FVector& Location);
	void STATIC_DestroySystemEffect(class UParticleSystemComponent* ParticleSystem);
	void STATIC_DestroyAllSystemEffect();
};


// Class Arise.BtlTacticsManager
// 0x0010 (0x0340 - 0x0330)
class ABtlTacticsManager : public ABtlBasicManagerBase
{
public:
	ETacticsIndex                                      CurrentIndex;                                             // 0x0330(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0331(0x0003) MISSED OFFSET
	int                                                ExecuteIndex;                                             // 0x0334(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               EnableUpdate;                                             // 0x0338(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0339(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTacticsManager");
		return ptr;
	}


	void OnBattleStateChange(EBattleState NowState, EBattleState PrevState);
};


// Class Arise.BtlTacticsLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlTacticsLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTacticsLibrary");
		return ptr;
	}


	void STATIC_SetEnableTactics(bool on);
	bool STATIC_IsUnknownTacticsAction(int TacticsId);
};


// Class Arise.BtlTacticsSetClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlTacticsSetClass : public UXmlDatabaseBase
{
public:
	struct FBtlDefaultTacticsSetList                   Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTacticsSetClass");
		return ptr;
	}

};


// Class Arise.BtlTacticsDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlTacticsDataClass : public UXmlDatabaseBase
{
public:
	struct FBtlTacticsDataList                         Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTacticsDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BtlTargetCursorComponent
// 0x0030 (0x0280 - 0x0250)
class UBtlTargetCursorComponent : public USceneComponent
{
public:
	bool                                               UseDefault;                                               // 0x0250(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0251(0x0007) MISSED OFFSET
	struct FString                                     DamageCollisionLabel;                                     // 0x0258(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class ABtlCharacterBase*                           BtlUnit;                                                  // 0x0268(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FBtlBitAnyOfFlags                           UntargetableFlags;                                        // 0x0270(0x0004) (Transient)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0274(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTargetCursorComponent");
		return ptr;
	}


	void SetUseTarget(bool on);
	void SetTargetableFlag(EBtlBitFlagCategory Cause, bool Targetable);
	bool IsUseTarget();
	bool IsUseDefault();
	bool IsTargetableByCondition(EBtlBitFlagCategory IgnoreFlags);
	bool IsTargetable();
	class UBtlDamageSphereComponent* GetCollision();
	class ABtlCharacterBase* GetBtlUnit();
};


// Class Arise.BtlTargetCursorManager
// 0x0010 (0x0038 - 0x0028)
class UBtlTargetCursorManager : public UObject
{
public:
	TArray<class UBtlTargetCursorComponent*>           CursorComponents;                                         // 0x0028(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTargetCursorManager");
		return ptr;
	}


	bool GetTargetSelectionList(int* TargetIndex, TArray<class UBtlTargetCursorComponent*>* OutputList);
	class UBtlTargetCursorComponent* GetQuickTarget(int ArtsIndex, class ABtlCharacterBase* Unit);
	class UBtlTargetCursorComponent* GetNearestEnemy(class ABtlCharacterBase* Unit);
	struct FVector GetDefaultCursorLocation(class ABtlCharacterBase* Unit);
	class UBtlTargetCursorComponent* GetDefaultCursorComponent(class ABtlCharacterBase* Unit);
	TArray<class UBtlTargetCursorComponent*> GetCursorComponents(class ABtlCharacterBase* Unit, bool SelectableOnly);
	class UBtlTargetCursorComponent* GetArtsTarget(const struct FName& Arts, class ABtlCharacterBase* Attacker, class ABtlCharacterBase* TargetCheck);
};


// Class Arise.BtlTargetSwitcherComponent
// 0x0008 (0x0100 - 0x00F8)
class UBtlTargetSwitcherComponent : public UActorComponent
{
public:
	class ABtlCharacterBase*                           Unit;                                                     // 0x00F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTargetSwitcherComponent");
		return ptr;
	}


	void TryRefresh(EBtlBitFlagCategory Cause);
	void OnTryRefresh(EBtlBitFlagCategory Cause);
	void OnInitializeComponent();
	bool IsTargetValid();
	class ABtlCharacterBase* GetUnit();
};


// Class Arise.BtlTaskManagerBase
// 0x0030 (0x0360 - 0x0330)
class ABtlTaskManagerBase : public ABtlBasicManagerBase
{
public:
	TArray<class UBtlAsyncTaskProxyBase*>              TaskArray;                                                // 0x0330(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	TArray<class UBtlAsyncTaskProxyBase*>              TickEvenTaskArray;                                        // 0x0340(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UBtlAsyncTaskProxyBase*>              TickEvenWhenPausedTaskArray;                              // 0x0350(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTaskManagerBase");
		return ptr;
	}


	class UBtlAsyncTaskProxyBase* FindTask(class UClass* Class);
};


// Class Arise.BtlTaskManager
// 0x0008 (0x0368 - 0x0360)
class ABtlTaskManager : public ABtlTaskManagerBase
{
public:
	class UClass*                                      OpenHelpWindowTaskClass;                                  // 0x0360(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTaskManager");
		return ptr;
	}


	class UBtlCommonTaskProxy* STATIC_RunTask(class UClass* TaskClass);
	class UBtlAsyncLabelTaskProxy* STATIC_OpenHelpWindowPolicy(const struct FCollectionHelp_XmlDatabaseLabel& HelpLabel);
};


// Class Arise.BtlTimeDilationHandle
// 0x0070 (0x0098 - 0x0028)
class UBtlTimeDilationHandle : public UObject
{
public:
	TWeakObjectPtr<class UBtlTimeManager>              OwnerManager;                                             // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<TWeakObjectPtr<class AActor>>               TargetActors;                                             // 0x0030(0x0010) (ZeroConstructor, Transient)
	TArray<TWeakObjectPtr<class AActor>>               IgnoreTargetActors;                                       // 0x0040(0x0010) (ZeroConstructor, Transient)
	struct FName                                       CategoryName;                                             // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	int                                                Priority;                                                 // 0x0058(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              SlowRate;                                                 // 0x005C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              Timer;                                                    // 0x0060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIsActive;                                                // 0x0064(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIsStopWorldDelta;                                        // 0x0065(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0066(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCompleted;                                              // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActive;                                                 // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDeactivate;                                             // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTimeDilationHandle");
		return ptr;
	}

};


// Class Arise.BtlTimeManager
// 0x0168 (0x0190 - 0x0028)
class UBtlTimeManager : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnBeginTimeOperation;                                     // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndAllTimeOperation;                                    // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBtlTimeDilationHandle*                      MostPriorityHandle;                                       // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	TArray<class UBtlTimeDilationHandle*>              TimeHandles;                                              // 0x0050(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class AActor*>                              TimeManagedActor;                                         // 0x0060(0x0010) (ZeroConstructor, Transient)
	int                                                DefaultPriority;                                          // 0x0070(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	class UDataTable*                                  PriorityTable;                                            // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableScreenMask;                                        // 0x0080(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              BattleWorldDelta;                                         // 0x0084(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              BattleCutSceneWorldDelta;                                 // 0x0088(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              BattleImmutableDelta;                                     // 0x008C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FName                                       BattleWorldSlowLabel;                                     // 0x0090(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF8];                                      // 0x0098(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTimeManager");
		return ptr;
	}


	void OnSpawnMagic(class ABtlMagicActor* SpawnMagic);
	void OnChangeStateDynamic(EAriseGameState ChangedState, bool NewState);
	struct FName GetMostHandleCategoryName();
	class UBtlTimeDilationHandle* GetMostHandle();
	float GetBattleWorldDelta();
	int GetBattleTimeHandleNum();
	float GetBattleImmutableDelta();
	float GetBattleCutSceneWorldDelta();
	class UBtlTimeDilationHandle* FindHandle(const struct FBtlTime_DatatableLabel& CategoryName);
	void BtlTimeHandleSignature__DelegateSignature(class UBtlTimeDilationHandle* TimeHandle);
};


// Class Arise.BtlTimeLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlTimeLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTimeLibrary");
		return ptr;
	}


	void STATIC_ReleaseTimeWorld(class UObject* WorldContextObject, const struct FBtlTime_DatatableLabel& CategoryName);
	struct FTimerHandle STATIC_K2_SetBattleTimerDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& Delegate, float Time, bool bLooping);
	bool STATIC_K2_IsValidBattleTimerHandle(const struct FTimerHandle& Handle);
	void STATIC_K2_ClearAndInvalidateBattleTimerHandle(class UObject* WorldContextObject, struct FTimerHandle* Handle);
	bool STATIC_K2_BattleTimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float STATIC_GetBattleWorldDelta(class UObject* WorldContextObject);
	float STATIC_GetBattleImmutableDelta(class UObject* WorldContextObject);
	float STATIC_GetBattleCutSceneWorldDelta(class UObject* WorldContextObject);
	void STATIC_ForceReleaseTimeWorld(class UObject* WorldContextObject);
	void STATIC_BattleWorld_Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void STATIC_BattleCutSceneWorld_Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	class UBtlTimeDilationHandle* STATIC_ApplySlowWorld(class UObject* WorldContextObject, const struct FBtlTime_DatatableLabel& CategoryName, float SlowRate, float SlowTimeSec, TArray<class AActor*> IgnoreTargets, bool bIsStopWorldDelta);
	class UBtlTimeDilationHandle* STATIC_ApplySlowActors(class UObject* WorldContextObject, const struct FBtlTime_DatatableLabel& CategoryName, TArray<class AActor*> ApplyTargets, float SlowRate, float SlowTimeSec);
	class UBtlTimeDilationHandle* STATIC_ApplyPauseWorld(class UObject* WorldContextObject, const struct FBtlTime_DatatableLabel& CategoryName, float PauseTimeSec, TArray<class AActor*> IgnoreTargets, bool bIsStopWorldDelta);
	class UBtlTimeDilationHandle* STATIC_ApplyPauseActors(class UObject* WorldContextObject, const struct FBtlTime_DatatableLabel& CategoryName, TArray<class AActor*> ApplyTargets, float PauseTimeSec);
};


// Class Arise.BtlTimerHandleComponent
// 0x0010 (0x0108 - 0x00F8)
class UBtlTimerHandleComponent : public UActorComponent
{
public:
	TArray<struct FTimerHandle>                        TimerHandleArray;                                         // 0x00F8(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlTimerHandleComponent");
		return ptr;
	}


	void UnPauseTimer();
	void SetBattleTimerByEvent(const struct FScriptDelegate& Event, float Time, bool Looping, struct FTimerHandle* Handle);
	void PauseTimer();
	void OnEndBattle();
	void ClearTimer();
};


// Class Arise.BtlUnitDebugViewer
// 0x0010 (0x0590 - 0x0580)
class UBtlUnitDebugViewer : public UPrimitiveComponent
{
public:
	bool                                               bShowStatusParam;                                         // 0x0580(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShowActionState;                                         // 0x0581(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShowHateValue;                                           // 0x0582(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShowAIValue;                                             // 0x0583(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShowVisualTask;                                          // 0x0584(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0585(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitDebugViewer");
		return ptr;
	}


	void SetShowVisualTask(bool bNewShowValue);
	void SetShowStatusParam(bool bNewShowStatusParam);
	void SetShowHateValue(bool bNewShowHateValue);
	void SetShowAIValue(bool bNewShowAIValue);
	void SetShowActionState(bool bNewShowActionState);
};


// Class Arise.BtlUnitIDFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlUnitIDFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitIDFunctionLibrary");
		return ptr;
	}


	bool STATIC_NotEqual_BtlUnitIDName(const struct FBtlUnitID& Lhs, const struct FName& Rhs);
	bool STATIC_NotEqual_BtlUnitID(const struct FBtlUnitID& Lhs, const struct FBtlUnitID& Rhs);
	bool STATIC_EqualEqual_BtlUnitIDName(const struct FBtlUnitID& Lhs, const struct FName& Rhs);
	bool STATIC_EqualEqual_BtlUnitID(const struct FBtlUnitID& Lhs, const struct FBtlUnitID& Rhs);
	struct FBtlUnitID STATIC_Conv_NameToBtlUnitID(const struct FName& Name);
	struct FString STATIC_Conv_BtlUnitIDToString(const struct FBtlUnitID& UnitID);
	struct FName STATIC_Conv_BtlUnitIDToName(const struct FBtlUnitID& UnitID);
};


// Class Arise.BtlChangeOrderHandlePolicy
// 0x0030 (0x0058 - 0x0028)
class UBtlChangeOrderHandlePolicy : public UObject
{
public:
	struct FBtlChangeOrderHandle                       Handle;                                                   // 0x0028(0x0028) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bChangeOrderRun;                                          // 0x0050(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlChangeOrderHandlePolicy");
		return ptr;
	}


	void SetChangeOrderRun(bool bNewChangeRun);
	class ABtlCharacterBase* GetFront2Back();
	class ABtlCharacterBase* GetBack2Front();
	void FinishChangeOrder();
	void DoChangeOrder();
};


// Class Arise.BtlUnitManager
// 0x00D0 (0x0400 - 0x0330)
class ABtlUnitManager : public ABtlBasicManagerBase
{
public:
	TArray<class ABtlCharacterBase*>                   UnitList;                                                 // 0x0330(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class ABtlCharacterBase*>                   PartyGuestGroupList;                                      // 0x0340(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class ABtlCharacterBase*>                   EnemyGroupList;                                           // 0x0350(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class ABtlCharacterBase*>                   UnitList_Temporary;                                       // 0x0360(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<class UBtlChangeOrderHandlePolicy*>         ChangeOrderLists;                                         // 0x0370(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	class UClass*                                      ChangeOrderHandlePolicyClass;                             // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsBattleStart;                                           // 0x0388(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0389(0x0007) MISSED OFFSET
	TMap<struct FName, int>                            LimitUnitNumMap;                                          // 0x0390(0x0050) (BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FBtlUnitEnemyReinforcementData>      EnemyReinforcementDatas;                                  // 0x03E0(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitManager");
		return ptr;
	}


	bool SwapPartyOrder(class ABtlCharacterBase* FromUnit, class ABtlCharacterBase* ToUnit);
	class ABtlCharacterBase* SpawnUnitDeferred(const struct FName& UnitLabel, const struct FTransform& Transform);
	void SpawnUnitComplete(class ABtlCharacterBase* Unit, const struct FTransform& Transform);
	bool RequestResereChangeOrderByUnit(TArray<class ABtlCharacterBase*> Orders);
	void RequestAddEnemyReinforcement();
	void PostSpawnUnit(class ABtlCharacterBase* Unit);
	void OnUnexpectedDestroy(class AActor* Actor);
	bool IsReserveChangeOrder(class ABtlCharacterBase* Unit);
	void InitPostEnemyStatus(class ABtlCharacterBase* Unit);
	void InitPartyStatus(class ABtlCharacterBase* Unit);
	void InitHateList(class ABtlCharacterBase* Unit);
	void InitEnemyStatus(class ABtlCharacterBase* Unit);
	bool HasResereChangeOrder();
	class ABtlCharacterBase* GetResereChangeOrder();
	struct FTransform GetReinforcementUnitTransform(const struct FBtlUnitEnemyReinforcementData& SpawnData);
	int CancelChangeOrderByUnit(TArray<class ABtlCharacterBase*> Orders);
	int CancelChangeOrder(TArray<EArisePartyID> Orders);
};


// Class Arise.BtlUnitLibrary
// 0x0000 (0x0028 - 0x0028)
class UBtlUnitLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitLibrary");
		return ptr;
	}


	bool STATIC_SwapPartyUnitInBattle(class ABtlCharacterBase* VanguardMember, class ABtlCharacterBase* RearguardMember, float FadeTime);
	void STATIC_StableSortUnitArray(const struct FScriptDelegate& SortPred, TArray<class ABtlCharacterBase*>* SortArray);
	class ABtlCharacterBase* STATIC_SpawnPartyTransform(class UObject* WorldContextObject, const struct FName& UnitLabel, const struct FTransform& Transform);
	class ABtlCharacterBase* STATIC_SpawnPartyFromPlaceID(class UObject* WorldContextObject, const struct FName& UnitLabel, int PlacementIndex);
	class ABtlCharacterBase* STATIC_SpawnGuestTransform(class UObject* WorldContextObject, const struct FName& UnitLabel, const struct FTransform& Transform);
	class ABtlCharacterBase* STATIC_SpawnGuestFromPlaceID(class UObject* WorldContextObject, const struct FName& UnitLabel, int PlacementIndex);
	class ABtlCharacterBase* STATIC_SpawnEnemyTransform_ByID(class UObject* WorldContextObject, const struct FBtlUnitID& UnitLabel, const struct FTransform& Transform, bool Rare);
	class ABtlCharacterBase* STATIC_SpawnEnemyTransform(class UObject* WorldContextObject, const struct FName& UnitLabel, const struct FTransform& Transform, bool Rare);
	class ABtlCharacterBase* STATIC_SpawnEnemyFromPlaceID_ByID(class UObject* WorldContextObject, const struct FBtlUnitID& UnitLabel, int PlacementIndex, bool Rare);
	class ABtlCharacterBase* STATIC_SpawnEnemyFromPlaceID(class UObject* WorldContextObject, const struct FName& UnitLabel, int PlacementIndex, bool Rare);
	void STATIC_SortUnitArray(const struct FScriptDelegate& SortPred, TArray<class ABtlCharacterBase*>* SortArray);
	void STATIC_MoveTemporaryList(class ABtlCharacterBase* Unit);
	bool STATIC_IsValidFilterType(class ABtlCharacterBase* Actor, bool bAliveOnly, bool bTargetableOnly, EBtlUnitFilterType FilterType, int FilterValue);
	bool STATIC_IsUsableRebirth(class ABtlCharacterBase* Unit);
	bool STATIC_IsUsableHealHp(class ABtlCharacterBase* Unit);
	bool STATIC_IsUsableHealBadStatus(class ABtlCharacterBase* Unit);
	bool STATIC_IsUsableArts(class ABtlCharacterBase* Unit, const struct FName& ArtsLabel);
	bool STATIC_IsUsableActionArts(class ABtlCharacterBase* Unit, EBtlArtsAction Action, bool MagicOnly);
	bool STATIC_IsUpperHpUnit(class ABtlCharacterBase* Actor, int Value);
	bool STATIC_IsUpperHpPercentUnit(class ABtlCharacterBase* Actor, int Percent);
	bool STATIC_IsSmallerUnit(class ABtlCharacterBase* UnitA, class ABtlCharacterBase* UnitB);
	bool STATIC_IsRivalUnit(class ABtlCharacterBase* UnitA, class ABtlCharacterBase* UnitB);
	bool STATIC_IsPartyUnitUsingItem();
	bool STATIC_IsNotEqual_Unit_UnitID(class ABtlCharacterBase* Lhs, const struct FBtlUnitID& Rhs);
	bool STATIC_IsNotEqual_Unit_ArisePartyID(class ABtlCharacterBase* Lhs, EArisePartyID Rhs);
	bool STATIC_IsLowerHpUnit(class ABtlCharacterBase* Actor, int Value);
	bool STATIC_IsLowerHpPercentUnit(class ABtlCharacterBase* Actor, int Percent);
	bool STATIC_IsInOverlimitSomeone();
	bool STATIC_IsInOverlimitAnyPartyMenber();
	bool STATIC_IsInOverlimitAnyEnemy();
	bool STATIC_IsIncloseUnit(class ABtlCharacterBase* Owner, float Range);
	bool STATIC_IsFriendUnit(class ABtlCharacterBase* UnitA, class ABtlCharacterBase* UnitB);
	bool STATIC_IsFreeSpace(class ABtlCharacterBase* Owner, const struct FVector& Location, float Range);
	bool STATIC_IsExtinctionUnit(TArray<class ABtlCharacterBase*> UnitArray);
	bool STATIC_IsEqual_Unit_UnitID(class ABtlCharacterBase* Lhs, const struct FBtlUnitID& Rhs);
	bool STATIC_IsEqual_Unit_ArisePartyID(class ABtlCharacterBase* Lhs, EArisePartyID Rhs);
	bool STATIC_IsAliveUnit(class ABtlCharacterBase* Actor);
	bool STATIC_IsAffectedArts(class ABtlCharacterBase* ArtsUser, class ABtlCharacterBase* ArtsTarget, const struct FName& ArtsLabel);
	bool STATIC_IsAffectedActionArtsPartyMembers(bool bVanguard, EBtlArtsAction Action);
	bool STATIC_IsAffectedActionArts(class ABtlCharacterBase* Unit, EBtlArtsAction Action);
	bool STATIC_HasWaitDeathStrokeUnit();
	bool STATIC_HasSubPartyUnitList(class UObject* WorldContextObject);
	TArray<struct FName> STATIC_GetUsableActionArtsList(class ABtlCharacterBase* Unit, EBtlArtsAction Action);
	TArray<class ABtlCharacterBase*> STATIC_GetUpperHpPercentPartyUnitList(int Percent, bool bAlive, bool bTargetable, bool bVanguard);
	TArray<class ABtlCharacterBase*> STATIC_GetUpperHpPartyUnitList(int Value, bool bAlive, bool bTargetable, bool bVanguard);
	float STATIC_GetUnitDistance(class ABtlCharacterBase* Actor1, class ABtlCharacterBase* Actor2);
	TArray<class ABtlCharacterBase*> STATIC_GetUnitById(const struct FName& UnitID);
	TArray<class ABtlCharacterBase*> STATIC_GetSubPartyUnitList(bool bIncludeGuest);
	TArray<class ABtlCharacterBase*> STATIC_GetSortedPartyUnitListByOrder();
	TArray<class ABtlCharacterBase*> STATIC_GetRivalUnitList(class ABtlCharacterBase* Actor, bool bAliveOnly, bool bTargetableOnly);
	class ABtlCharacterBase* STATIC_GetRevivingPartyMemberUnit();
	class ABtlCharacterBase* STATIC_GetPlayingPartyMemberUnit(EBtlArtsAction Type);
	class ABtlCharacterBase* STATIC_GetPlayerControlledUnit();
	int STATIC_GetPartyUnitNum(bool bAliveOnly, bool bTargetableOnly, bool bVanguardOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetPartyUnitList(bool bAliveOnly, bool bTargetableOnly, bool bVanguardOnly);
	class ABtlCharacterBase* STATIC_GetPartyUnitByPartyId(EArisePartyID PartyId);
	class ABtlCharacterBase* STATIC_GetPartyUnitByOrder(EPCOrder Order);
	class ABtlCharacterBase* STATIC_GetPartyUnit(const struct FName& UnitID);
	EPCOrder STATIC_GetPartyOrder(class ABtlCharacterBase* Actor);
	int STATIC_GetPartyMaxLevel();
	TArray<class ABtlCharacterBase*> STATIC_GetPartyDownUnitList(bool bAliveOnly, bool bTargetableOnly);
	int STATIC_GetPartyAverageLevel(bool bAliveOnly, bool bTargetableOnly, bool bVanguardOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetLowHpPartyTargetingEnemyUnitList(float Range, bool bAliveOnly, bool bTargetableOnly);
	class ABtlCharacterBase* STATIC_GetLowestHpPartyUnit();
	TArray<class ABtlCharacterBase*> STATIC_GetLowerHpPercentPartyUnitList(int Percent, bool bAlive, bool bTargetable, bool bVanguard);
	TArray<class ABtlCharacterBase*> STATIC_GetLowerHpPartyUnitList(int Value, bool bAlive, bool bTargetable, bool bVanguard);
	class ABtlCharacterBase* STATIC_GetHealingPartyMemberUnit();
	class ABtlCharacterBase* STATIC_GetHealingBadStatusPartyMemberUnit();
	TArray<class ABtlCharacterBase*> STATIC_GetGuestUnitList(bool bAliveOnly, bool bTargetableOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetFriendUnitList(class ABtlCharacterBase* Actor, bool bAliveOnly, bool bTargetableOnly, EBtlUnitFilterType FilterType, int Value);
	TArray<class ABtlCharacterBase*> STATIC_GetFreeRivalUnitList(class ABtlCharacterBase* Actor, bool bAliveOnly, bool bTargetableOnly);
	int STATIC_GetEnemyUnitNum(bool bAliveOnly, bool bTargetableOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetEnemyUnitList(bool bAliveOnly, bool bTargetableOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetEnemyUnit(const struct FName& UnitID);
	int STATIC_GetEnemyMaxLevel();
	TArray<class ABtlCharacterBase*> STATIC_GetEnemyMagicUserUnitList(bool bAliveOnly, bool bTargetableOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetEnemyFlyUnitList(bool bAliveOnly, bool bTargetableOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetEnemyDownUnitList(bool bAliveOnly, bool bTargetableOnly);
	int STATIC_GetEnemyAverageLevel();
	float STATIC_GetDeadTimePartyMember();
	TArray<class ABtlCharacterBase*> STATIC_GetDeadRivalUnitList(class ABtlCharacterBase* Actor, bool bTargetableOnly, bool bVanguardOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetDeadPartyUnitList(bool bTargetableOnly, bool bVanguardOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetDeadFriendUnitList(class ABtlCharacterBase* Actor, bool bTargetableOnly, bool bVanguardOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetDeadEnemyUnitList(bool bTargetableOnly);
	float STATIC_GetBadStatusTimePartyMember();
	TArray<class ABtlCharacterBase*> STATIC_GetBadStatusPartyUnitList(bool bTargetableOnly, bool bVanguardOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetBadStatusEnemyUnitList(bool bTargetableOnly, bool bVanguardOnly);
	TArray<class ABtlCharacterBase*> STATIC_GetAllUnitList(bool bAliveOnly, bool bTargetableOnly);
	class ABtlCharacterBase* STATIC_FindUnitById_FirstOf(class UObject* WorldContextObject, const struct FBtlUnitID& UnitID, bool AliveOnly, bool bTargetableOnly);
	class ABtlCharacterBase* STATIC_FindRandomRivalUnit(class ABtlCharacterBase* Actor, bool bAliveOnly, bool bTargetableOnly, bool PlayerTargetExcludeIfPossible);
	class ABtlCharacterBase* STATIC_FindNearestUnitInList(class ABtlCharacterBase* Actor, TArray<class ABtlCharacterBase*> UnitList);
	class ABtlCharacterBase* STATIC_FindNearestUnit(class ABtlCharacterBase* Actor);
	class ABtlCharacterBase* STATIC_FindNearestTargetableRivalUnit(class ABtlCharacterBase* Actor);
	class ABtlCharacterBase* STATIC_FindNearestRivalUnit(class ABtlCharacterBase* Actor);
	class ABtlCharacterBase* STATIC_FindNearestFriendUnit(class ABtlCharacterBase* Actor);
	class ABtlCharacterBase* STATIC_FindMagicUserLowHpEnemyUnit(bool PlayerTargetExcludeIfPossible);
	class ABtlCharacterBase* STATIC_FindLowHpPartyUnit();
	class ABtlCharacterBase* STATIC_FindLowHpPartyTargetingEnemyUnit(float Range, bool PlayerTargetExcludeIfPossible);
	class ABtlCharacterBase* STATIC_FindLowHpEnemyUnit(bool PlayerTargetExcludeIfPossible);
	class ABtlCharacterBase* STATIC_FindHighLvPartyUnit();
	class ABtlCharacterBase* STATIC_FindHighLvEnemyUnit(bool PlayerTargetExcludeIfPossible);
	class ABtlCharacterBase* STATIC_FindHighHpPartyUnit();
	class ABtlCharacterBase* STATIC_FindHighHpEnemyUnit(bool PlayerTargetExcludeIfPossible);
	class ABtlCharacterBase* STATIC_FindFreeTargetRivalUnit(class ABtlCharacterBase* Actor);
	class ABtlCharacterBase* STATIC_FindFlyLowHpEnemyUnit(bool PlayerTargetExcludeIfPossible);
	class ABtlCharacterBase* STATIC_FindFarthestUnitInList(class ABtlCharacterBase* Actor, TArray<class ABtlCharacterBase*> UnitList);
	class ABtlCharacterBase* STATIC_FindFarthestUnit(class ABtlCharacterBase* Actor);
	class ABtlCharacterBase* STATIC_FindFarthestRivalUnit(class ABtlCharacterBase* Actor);
	class ABtlCharacterBase* STATIC_FindFarthestFriendUnit(class ABtlCharacterBase* Actor);
	class ABtlCharacterBase* STATIC_FindDownNearPartyUnit(class ABtlCharacterBase* Actor, float Range, bool PlayerTargetExcludeIfPossible);
	class ABtlCharacterBase* STATIC_FindDownNearEnemyUnit(class ABtlCharacterBase* Actor, float Range, bool PlayerTargetExcludeIfPossible);
	class ABtlCharacterBase* STATIC_FindDownLowHpPartyUnit();
	class ABtlCharacterBase* STATIC_FindDownLowHpEnemyUnit(bool PlayerTargetExcludeIfPossible);
	TArray<class ABtlCharacterBase*> STATIC_FilterUnitArrayBySubParty(TArray<class ABtlCharacterBase*> FilterArray);
	TArray<class ABtlCharacterBase*> STATIC_FilterUnitArrayByMainParty(TArray<class ABtlCharacterBase*> FilterArray);
	TArray<class ABtlCharacterBase*> STATIC_FilterUnitArray(TArray<class ABtlCharacterBase*> FilterArray, const struct FScriptDelegate& FilterPred);
	TArray<class ABtlCharacterBase*> STATIC_FilterForwardUnitList(class ABtlCharacterBase* Actor, TArray<class ABtlCharacterBase*> UnitList);
	void STATIC_DestroyUnitAll();
	void STATIC_DestroyUnit(class ABtlCharacterBase* Unit);
	int STATIC_CountIfUnitArray(TArray<class ABtlCharacterBase*> CountArray, const struct FScriptDelegate& CountPred);
	void STATIC_ClearSmashCondition();
	void STATIC_ClearAbnormalAll(class ABtlCharacterBase* Unit);
	void STATIC_ClearAbnormal(class ABtlCharacterBase* Unit, EAbnormalType Type);
	void BtlUnitSortDelegate__DelegateSignature(class ABtlCharacterBase* Lhs, class ABtlCharacterBase* Rhs, bool* Result);
	void BtlUnitFilterDelegate__DelegateSignature(class ABtlCharacterBase* Unit, bool* Result);
	void STATIC_BackTemporaryList();
};


// Class Arise.BtlUnitEventHandle
// 0x0010 (0x0038 - 0x0028)
class UBtlUnitEventHandle : public UObject
{
public:
	struct FScriptMulticastDelegate                    Dispatcher;                                               // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitEventHandle");
		return ptr;
	}


	void Invoke();
};


// Class Arise.BtlUnitScript
// 0x0090 (0x00B8 - 0x0028)
class UBtlUnitScript : public UBtlRuntimeObjectBase
{
public:
	TArray<struct FName>                               LoadingMysticArts;                                        // 0x0028(0x0010) (ZeroConstructor, Transient)
	TMap<struct FString, class UBtlUnitEventHandle*>   EventHandleContainer;                                     // 0x0038(0x0050) (ZeroConstructor)
	bool                                               bStartWithTickEnabled;                                    // 0x0088(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET
	TArray<struct FString>                             DebugMenuFlexibleNotifyBeginCommands;                     // 0x0090(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             DebugMenuFlexibleNotifyEndCommands;                       // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitScript");
		return ptr;
	}


	void StartUnlimitedOverlimitRequest();
	void StartOverlimitRequest();
	void SendFlexibleNotifyToMetaScript(int UserInteger, float UserFloat, const struct FString& UserString, const struct FLinearColor& UserColor);
	void SendCommandToStateMachine(const struct FString& Command, bool Force);
	void ReinforcementRequest(const struct FBtlUnitID& SpawnUnitId, int SpawnNum, int LimitUnitNum, float IntervalTime, float IntervalAngle, bool bIsEnableWatchSpawner);
	void Received_OnLoadingPhase();
	void Received_OnLoadComplateMystic();
	void OnWaitDeathStrokeEnd();
	void OnWaitDeathStrokeBegin();
	void OnWaitDeathStroke(float DeltaTime);
	void OnTick(float DeltaTime);
	void OnSuccessJustGuard();
	void OnSuccessJustAvoid();
	void OnStrikeAttackDown(class ABtlCharacterBase* Attacker, const struct FName& ArtsLabel);
	void OnSpawnMagic(const struct FBtlArtsData& MagicData);
	void OnScriptResume();
	void OnScriptPause();
	void OnRequestArtsMagicOverride(const struct FName& ArtsLabel, struct FName* Result, bool* IgnoreArtsCost);
	void OnRequestArtsMagicLabelOverride(const struct FName& ArtsLabel, struct FName* Result);
	void OnReceiveUnitMessage(const struct FString& Message, class UObject* UserData);
	void OnReceiveFireSword(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnReceiveDamageOverride(float InDamageValue, class UBtlSphereComponent* ReceiveCollision, class ABtlCharacterBase* AttackUnit, class UShapeComponent* AttackCollision, const struct FBtlArtsData& AttackArts, float* NewDamageValue);
	void OnReceiveDamage(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision, int Damage, bool IsCoreBreak, bool* IsReactionOverride);
	void OnPreReceiveDamage();
	void OnPostSpawnMagic(class ABtlMagicActor* SpawnMagic);
	void OnPlayableMystic(struct FName* MysticLabel);
	void OnLoadingPhase();
	void OnLoadComplateMystic();
	void OnInputUniqueAction(class AAriseBasePlayerController* PlayerController, const struct FName& ArtsLabel, struct FName* Result);
	void OnHealPowerOverride(const struct FName& ArtsLabel, bool* Override, float* NewPowerValue);
	void OnGiveDamage(class UShapeComponent* AttackCollision, const struct FBtlArtsData& AttackArts, class ABtlCharacterBase* ReceiveUnit, class UBtlSphereComponent* ReceiveCollision, int Damage);
	void OnGetDownSec(float* DownSec);
	void OnGetBoostAttackSub(struct FName* Result);
	void OnGetBoostAttackAirSub(struct FName* Result);
	void OnGetBoostAttackAir(struct FName* Result);
	void OnGetBoostAttack(struct FName* Result);
	void OnFrozenAction();
	void OnFlexibleNotifyEnd(int UserInteger, float UserFloat, const struct FString& UserString, const struct FLinearColor& UserColor, class UObject* UserObject);
	void OnFlexibleNotifyBegin(int UserInteger, float UserFloat, const struct FString& UserString, const struct FLinearColor& UserColor, class UObject* UserObject);
	void OnFlexibleBoolNotify(const struct FString& Label, bool Value);
	void OnFilterComboArts(const struct FBtlArtsData& ArtsData, bool* Result);
	void OnEndStrikeSmash(const struct FBtlStrikeSmashEndParam& Param);
	void OnEndSpecialStrike(const struct FBtlSpecialStrikeEndParam& Param);
	void OnEndPlay();
	void OnEndMystic(const struct FBtlMysticEndParam& Param);
	void OnEndEvent(const struct FBtlCutSceneEndParam& Param);
	void OnDecideWin();
	void OnDecideLose();
	void OnDeadCinematicEvent();
	void OnDeadAction();
	void OnDead();
	void OnCutsceneResetAnimation(const struct FName& ArtsLabel);
	void OnCutsceneFinalizeAnimation(const struct FName& SequenceName);
	void OnCutsceneDelayFinalize(const struct FName& SequenceName);
	void OnComboNext(const struct FName& PrevArts, bool* Override, struct FName* NextArts);
	void OnChantMagic(const struct FBtlArtsData& MagicData);
	bool OnChantCompleted(const struct FBtlArtsData& ArtsData);
	void OnChangeState(EBattleActionState NowState, EBattleActionState PreState);
	void OnBreakSuperAvoid(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBreakRush(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBreakFlying(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBreakChant(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBreakArmor(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBoostAttackTraits(class UShapeComponent* AttackCollision, const struct FBtlArtsData& AttackArts, class ABtlCharacterBase* ReceiveUnit, class UBtlSphereComponent* ReceiveCollision, bool* bIsSuccessBoostBreak);
	void OnBeginStrikeSmash(const struct FBtlStrikeSmashBeginParam& Param);
	void OnBeginSpecialStrike(const struct FBtlSpecialStrikeBeginParam& Param);
	void OnBeginPlay();
	void OnBeginMystic(const struct FBtlMysticBeginParam& Param);
	void OnBeginEvent(const struct FBtlCutSceneBeginParam& Param);
	void OnBeginAttack(const struct FBtlArtsData& ArtsData);
	void OnAttackDamageOverride(float InDamageValue, class UShapeComponent* AttackCollision, const struct FBtlArtsData& AttackArts, class ABtlCharacterBase* ReceiveUnit, class UBtlSphereComponent* ReceiveCollision, bool bIsGuard, bool bIsCritical, bool bIsWeakness, bool bIsResistance, float* NewDamageValue);
	void OnArtsMagicOverride(const struct FName& ArtsLabel, struct FName* Result, float* CastSec, bool* IgnoreArtsCost);
	struct FName GetUnitID();
	class ABtlCharacterBase* GetUnit();
	class UBtlStatusComponent* GetStatus();
	class UBtlUnitScriptComponent* GetScriptComponent();
	TMap<struct FName, class ULevelSequence*> GetLoadingMystic();
	class ULevelSequence* GetFirstLoadingMystic();
	class UBtlUnitEventHandle* GetEventHandleByString(const struct FString& Label);
	class UBtlUnitEventHandle* GetEventHandle(EBtlUnitEventType Type);
	class UBlackboardComponent* GetBlackboard();
	class UBtlAnimInstance* GetAnimInstance();
	class UBtlActionProcessor* GetActionProcessor();
	void EndOverlimitRequest();
	void CanStrikeAttackDown(class ABtlCharacterBase* Attacker, const struct FName& ArtsLabel, bool* Enabled);
	void CanStepAction(bool* Enabled);
	void CanAttackAction(const struct FBtlArtsData& ArtsData, bool* Enabled);
};


// Class Arise.BtlUnitScriptComponent
// 0x0018 (0x0110 - 0x00F8)
class UBtlUnitScriptComponent : public UActorComponent
{
public:
	class UClass*                                      ScriptClass;                                              // 0x00F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBtlUnitScript*                              ScriptInstance;                                           // 0x0100(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0108(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitScriptComponent");
		return ptr;
	}


	void StopScript();
	void RunScript(class UClass* InScriptClass);
	void ResumeScript();
	void RestartScript();
	void PauseScript();
	void OnWaitDeathStrokeEnd();
	void OnWaitDeathStrokeBegin();
	void OnWaitDeathStroke(float DeltaTime);
	void OnTick(float DeltaTime);
	void OnSuccessJustGuard();
	void OnSuccessJustAvoid();
	void OnStrikeAttackDown(class ABtlCharacterBase* Attacker, const struct FName& ArtsLabel);
	void OnSpawnMagic(const struct FBtlArtsData& MagicData);
	void OnScriptResume();
	void OnScriptPause();
	void OnRequestArtsMagicOverride(const struct FName& ArtsLabel, struct FName* Result, bool* IgnoreArtsCost);
	void OnRequestArtsMagicLabelOverride(const struct FName& ArtsLabel, struct FName* Result);
	void OnReceiveUnitMessage(const struct FString& Message, class UObject* UserData);
	void OnReceiveFireSword(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnReceiveDamage(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision, int Damage, bool IsCoreBreak, bool* IsReactionOverride);
	void OnPreReceiveDamage();
	void OnPlayableMystic(struct FName* MysticLabel);
	void OnInputUniqueAction(class AAriseBasePlayerController* PlayerController, const struct FName& ArtsLabel, struct FName* Result);
	void OnHealPowerOverride(const struct FName& ArtsLabel, bool* Override, float* NewPowerValue);
	void OnGiveDamage(class UShapeComponent* AttackCollision, const struct FBtlArtsData& AttackArts, class ABtlCharacterBase* ReceiveUnit, class UBtlSphereComponent* ReceiveCollision, int Damage);
	void OnGetDownSec(float* DownSec);
	void OnGetBoostAttackSub(struct FName* Result);
	void OnGetBoostAttackAirSub(struct FName* Result);
	void OnGetBoostAttackAir(struct FName* Result);
	void OnGetBoostAttack(struct FName* Result);
	void OnFrozenAction();
	void OnFlexibleNotifyEnd(int UserInteger, float UserFloat, const struct FString& UserString, const struct FLinearColor& UserColor, class UObject* UserObject);
	void OnFlexibleNotifyBegin(int UserInteger, float UserFloat, const struct FString& UserString, const struct FLinearColor& UserColor, class UObject* UserObject);
	void OnFlexibleBoolNotify(const struct FString& Label, bool Value);
	void OnEndStrikeSmash(const struct FBtlStrikeSmashEndParam& Param);
	void OnEndSpecialStrike(const struct FBtlSpecialStrikeEndParam& Param);
	void OnEndPlay();
	void OnEndMystic(const struct FBtlMysticEndParam& Param);
	void OnEndEvent(const struct FBtlCutSceneEndParam& Param);
	void OnDecideWin();
	void OnDecideLose();
	void OnDeadAction();
	void OnDead();
	void OnCutsceneResetAnimation(const struct FName& ArtsLabel);
	void OnCutsceneFinalizeAnimation(const struct FName& SequenceName);
	void OnCutsceneDelayFinalize(const struct FName& SequenceName);
	void OnComboNext(const struct FName& PrevArts, bool* Override, struct FName* NextArts);
	void OnChangeState(EBattleActionState NowState, EBattleActionState PreState);
	void OnBreakSuperAvoid(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBreakRush(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBreakFlying(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBreakChant(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBreakArmor(class ABtlCharacterBase* Attacker, class UShapeComponent* AttackerCollision, const struct FBtlArtsData& ArtsData, class UBtlSphereComponent* ReceiveCollision);
	void OnBoostAttackTraits(class UShapeComponent* AttackCollision, const struct FBtlArtsData& AttackArts, class ABtlCharacterBase* ReceiveUnit, class UBtlSphereComponent* ReceiveCollision, bool* bIsSuccessBoostBreak);
	void OnBeginStrikeSmash(const struct FBtlStrikeSmashBeginParam& Param);
	void OnBeginSpecialStrike(const struct FBtlSpecialStrikeBeginParam& Param);
	void OnBeginPlay();
	void OnBeginMystic(const struct FBtlMysticBeginParam& Param);
	void OnBeginEvent(const struct FBtlCutSceneBeginParam& Param);
	bool IsValidScript();
	bool IsRunningScript();
	bool IsPauseScript();
	class UBtlUnitScript* GetScriptInstance();
};


// Class Arise.BtlUnitSizeComponent
// 0x0010 (0x0590 - 0x0580)
class UBtlUnitSizeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      DrawColor;                                                // 0x0580(0x0004) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              Radius;                                                   // 0x0584(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Height;                                                   // 0x0588(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x058C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitSizeComponent");
		return ptr;
	}


	float GetShapeScale();
	float GetScaledRadius();
	float GetScaledHeight();
};


// Class Arise.BtlUnitSkillScriptBase
// 0x0008 (0x0088 - 0x0080)
class UBtlUnitSkillScriptBase : public UBtlCommonSkillScriptBase
{
public:
	class ABtlCharacterBase*                           BattleUnit;                                               // 0x0080(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitSkillScriptBase");
		return ptr;
	}


	class ABtlCharacterBase* GetUnit();
};


// Class Arise.BtlUnitDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlUnitDataClass : public UXmlDatabaseBase
{
public:
	struct FBtlUnitDataList                            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlUnitDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BtlVoiceHandle
// 0x00C0 (0x00E8 - 0x0028)
class UBtlVoiceHandle : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnEndVoice;                                               // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ABtlVoiceManager*                            VoiceManager;                                             // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class ABtlCharacterBase*                           Speaker;                                                  // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FBtlVoiceMessageCommand                     Command;                                                  // 0x0048(0x0048) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	struct FBtlVoiceMessageCommand                     InterruptedCommand;                                       // 0x0090(0x0048) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	EBtlVoiceHandleState                               State;                                                    // 0x00D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bStopRequested;                                           // 0x00D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00DA(0x0006) MISSED OFFSET
	class UPostEventInfoBase*                          VoiceEventHandle;                                         // 0x00E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlVoiceHandle");
		return ptr;
	}


	void StopVoice(float InterpTimeSec);
	void SetHandleState(EBtlVoiceHandleState NewState);
	void Received_PlayVoice();
	void PlaySoundEvent(const struct FString& EventName);
	void OnFinalize();
	void NotifyEndVoice();
	void NotifyBeginVoice();
	void NextPlayVoice(bool* bEndMessage);
	bool IsVisible();
	bool IsPlaying();
	int GetVoiceIndex();
	struct FString GetVoiceEventLabel(const struct FBtlVoiceMessageCommand& MessageCommand);
	void GetVoiceData(struct FBtlVoiceData* VoiceData);
	EBtlVoiceHandleState GetState();
	class UMessageData* GetMessageData();
	void BtlEndVoiceSignature__DelegateSignature(const struct FBtlVoiceMessageCommand& Command, bool Success);
};


// Class Arise.BtlVoiceManager
// 0x0110 (0x0440 - 0x0330)
class ABtlVoiceManager : public ABtlBasicManagerBase
{
public:
	class UEnum*                                       BtlVoiceCharaIDEnum;                                      // 0x0330(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEnum*                                       BtlVoiceStateEnum;                                        // 0x0338(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEnum*                                       BtlVoiceCondition;                                        // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  VoiceAddinDataTable;                                      // 0x0348(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  CharaIdTable;                                             // 0x0350(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0358(0x0010) MISSED OFFSET
	TMap<EBtlVoiceState, struct FBtlVoiceConditionDataCache> CacheIdLabel;                                             // 0x0368(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<struct FBtlSpeakerData>                     SpeakerArray;                                             // 0x03B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	TArray<struct FBtlVoiceLottery>                    LotteryArray;                                             // 0x03C8(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FBtlVoiceLottery>                    ResultVoiceLotteries;                                     // 0x03D8(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	bool                                               bIgnoreVisibleVoice;                                      // 0x03E8(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIgnoreDerivedVoice;                                      // 0x03E9(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03EA(0x0002) MISSED OFFSET
	float                                              LastTalkTimer;                                            // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	TArray<EBtlVoiceCharaID>                           IgnoreArts;                                               // 0x03F0(0x0010) (ZeroConstructor, Transient)
	TArray<EBtlVoiceCharaID>                           OutfieldCharaID;                                          // 0x0400(0x0010) (ZeroConstructor, Transient)
	bool                                               bIsEnableBattleVoiceSystem;                               // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      IsEnableBattleVoiceSystemCategoryBit;                     // 0x0411(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0412(0x0006) MISSED OFFSET
	TArray<class UBtlScenarioVoiceAsyncPolicy*>        ScenarioVoiceRequestArray;                                // 0x0418(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	class UBtlVoiceRecorder*                           VoiceRecorder;                                            // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0430(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlVoiceManager");
		return ptr;
	}


	void VoiceUnitFilterPredicate__DelegateSignature(class ABtlCharacterBase* Speaker, class ABtlCharacterBase* Character, const struct FString& Label, EBtlVoiceTarget Target, bool* Result);
	struct FDictionaryText VoiceLotteryBattleResult();
	struct FBtlVoiceLottery VoiceLottery(TArray<struct FBtlVoiceLottery> LotteryTarget, bool bIgnoreFilter, bool* Result);
	void VoiceLabelUnitCache();
	void VoiceFilterPredicate__DelegateSignature(class ABtlCharacterBase* Speaker, class ABtlCharacterBase* Who, class ABtlCharacterBase* ToWhom, const struct FString& ConditionArgs, bool* Result);
	void VoiceCommonCheckDelegate__DelegateSignature(const struct FString& Label, const struct FBtlVoiceInfoData& VoiceInfo, const struct FBtlVoiceConditionData& Condition, class ABtlCharacterBase* VoiceSpeaker, bool* Result);
	void SortLotteryPriority(TArray<struct FBtlVoiceLottery>* Lottery);
	void SetSpeakerVoiceHandle(class ABtlCharacterBase* Character, class UBtlVoiceHandle* Handle);
	void SetIgnoreLottery(class ABtlCharacterBase* Characterm, bool Disable);
	void SetBattleVoiceSystem(bool Enable, EBtlVoiceEnableFalgBit Category);
	void RequestVoiceNormalAttack(class ABtlCharacterBase* Attacker);
	bool RequestVoiceLottery(TArray<struct FBtlVoiceLottery> LotteryArray);
	class UBtlVoiceHandle* RequestVoiceByLottery(const struct FBtlVoiceLottery& Lottery);
	class UBtlVoiceHandle* RequestVoiceByIndex(int VoiceIndex, class ABtlCharacterBase* Speaker, class ABtlCharacterBase* Who, class ABtlCharacterBase* ToWhom, bool ForceChatVisible, bool ForceRequest);
	class UBtlVoiceHandle* RequestVoice_DatabaseLabel(const struct FBtlVoice_DatabaseLabel& Label, class ABtlCharacterBase* Speaker, bool ForceChatVisible);
	class UBtlVoiceHandle* RequestVoice(const struct FString& Label, class ABtlCharacterBase* Speaker, bool ForceChatVisible);
	void RegisterReplaceChara(EBtlVoiceCharaID Original, EBtlVoiceCharaID Replace);
	void RegisterOutfieldCharaID(EBtlVoiceCharaID CharaID);
	void RegisterMiddleJoinCharaID(EBtlVoiceCharaID CharaID);
	void PreInitializeBattleData();
	void PostInitializeBattleData();
	class UBtlVoiceHandle* PlayVoice(const struct FBtlVoiceLottery& VoiceLottery);
	class UBtlScenarioVoiceAsyncPolicy* PlayScenarioVoice(const struct FBtlVoice_DatabaseLabel& BeginVoiceLabel);
	void OnUnitSpawned(class ABtlCharacterBase* Unit, bool Reinforcement);
	void OnEndVoiceMessageCommand(const struct FBtlVoiceMessageCommand& Command, bool Success);
	void OnEndBattlePauseImpl();
	void OnDestroyedSpeakerCharacter(class AActor* DestroyedActor);
	void OnBeginBattlePauseImpl();
	bool IsVoiceTargetPartyIDCheck_Character(EBtlVoiceTarget VoiceTarget, class ABtlCharacterBase* Character);
	bool IsVoiceTargetPartyIDCheck(EBtlVoiceTarget VoiceTarget, EArisePartyID PartyId);
	bool IsRelationshipCheck(const struct FBtlVoiceData& VoiceData);
	bool IsPlayVoice();
	bool IsPlaySpeakerVoice(class ABtlCharacterBase* Character);
	bool IsPlayScVoice();
	bool IsPlayingVisibleVoice();
	bool IsPlayingTalkVoice();
	bool IsPlayingScenarioVoice();
	bool IsExistisSpeakerCharacter(EBtlVoiceCharaID ID, class ABtlCharacterBase* Character);
	bool IsCheckVoiceTargetType(class ABtlCharacterBase* Character, const struct FString& VoiceLabel, EBtlVoiceTarget VoiceTarget, class ABtlCharacterBase* VoiceSpeaker);
	void GetVoiceLotteryByPredicate(const struct FBtlVoiceCommand& Command, const struct FScriptDelegate& UnitFilter, const struct FScriptDelegate& VoiceFilter, TArray<struct FBtlVoiceLottery>* VoiceList);
	TArray<struct FBtlVoiceLottery> GetVoiceLotteries(EBtlVoiceState State, EBtlVoiceCondition Condition);
	TArray<class ABtlCharacterBase*> GetSpeakerCharacterByMessageData(class UMessageData* MessageData, class ABtlCharacterBase* MainSpeaker, bool IgnoreRival);
	TArray<class ABtlCharacterBase*> GetSpeakerCharacterById(EBtlVoiceCharaID ID);
	TArray<struct FBtlVoiceLottery> GetResultVoiceLotteries();
	void GetDerivedVoiceLotteryByPredicate(int SourceVoiceIndex, class ABtlCharacterBase* Who, class ABtlCharacterBase* ToWhom, const struct FScriptDelegate& UnitFilter, const struct FScriptDelegate& VoiceFilter, TArray<struct FBtlVoiceLottery>* VoiceList);
	TArray<struct FBtlVoiceLottery> GetDerivedVoiceLotteries(int VoiceIndex);
	TArray<struct FString> FilterVoiceData_WidthID(EBtlVoiceState State, class ABtlCharacterBase* Character, const struct FScriptDelegate& ConditionDelegate);
	TArray<struct FBtlVoiceData> FilterVoiceData(EBtlVoiceState State, class ABtlCharacterBase* Character, const struct FScriptDelegate& ConditionDelegate);
	void EndScenarioVoiceCheck(int VoiceIndex, bool Interrupted);
	void DerivedVoiceFilterPredicate__DelegateSignature(int SourceVoiceIndex, class ABtlCharacterBase* Speaker, class ABtlCharacterBase* Who, class ABtlCharacterBase* ToWhom, const struct FString& ConditionArgs, bool* Result);
	void DebugVoiceCheck(TArray<struct FString> Args);
	void DebugPlayBattleVoice(TArray<struct FString> Args);
	class UBtlVoiceHandle* CreateVoiceHandle(class ABtlCharacterBase* Unit);
	bool CanPlayVoice(const struct FBtlVoiceData& VoiceData, class ABtlCharacterBase* SpeakerUnit);
	int BPF_GetVoiceIndex(const struct FBtlVoice_DatabaseLabel& VoiceLabel);
	bool BPF_GetVoiceDataByIndex(int Index, struct FBtlVoiceData* VoiceData);
	bool BPF_GetVoiceData(const struct FBtlVoice_DatabaseLabel& Label, struct FBtlVoiceData* VoiceData);
	bool BPE_AppendVoiceLottery(TArray<struct FBtlVoiceLottery> Lotteries);
	void BattleVoiceSystem(bool Enable);
	void AnalyzeVoiceData(int StartIndex, float RunMilliseconds, bool* bComplated, int* ContinueIndex);
	void AddVoiceIgnoreArts(EBtlVoiceCharaID CharaID);
	void AddVoiceHistoryByLabel(int VoiceIndex);
};


// Class Arise.BtlVoiceRecorder
// 0x0100 (0x0128 - 0x0028)
class UBtlVoiceRecorder : public UObject
{
public:
	struct FBtlVoiceRecord                             VoiceHistoryRecord;                                       // 0x0028(0x0050)
	TMap<EBtlVoiceUsage, struct FBtlVoiceRecord>       VoiceUsageContainer;                                      // 0x0078(0x0050) (ZeroConstructor)
	TMap<EBtlVoiceState, struct FBtlVoiceCategoryState> CategoryStateContainer;                                   // 0x00C8(0x0050) (ZeroConstructor)
	TArray<float>                                      IntervalTimePatterns;                                     // 0x0118(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlVoiceRecorder");
		return ptr;
	}


	void SetTimePattern(TArray<float> TimePattern);
	void RegisterLockCondition(EBtlVoiceState Category, EBtlVoiceCondition Condition, EBtlVoiceUsage SingleVoiceLimit, EBtlVoiceUsage MultipleVoiceLimit);
	void OnLevelChangedInPlayerFree();
	void OnLevelChanged(const struct FString& OldMapName, const struct FString& NewMapName);
	void OnEndLoad(EAriseSaveResult Result);
	void OnEndBattle();
	bool IsTimePatternRegistered();
	void Initialize(class UBtlEventDispatcher* BattleEventDispatcher);
	float GetTimeBySlot(int Slot);
	struct FString GetPlayedVoiceLabel(EBtlVoiceCharaID VoiceCharaID, int Depth);
	void ClearByUsage(EBtlVoiceUsage Usage);
	bool CanVoiceUsed(const struct FBtlVoiceData& VoiceData);
	void AddPlayedVoice(const struct FBtlVoiceData& VoiceData);
};


// Class Arise.BtlScenarioVoiceAsyncPolicy
// 0x0040 (0x0068 - 0x0028)
class UBtlScenarioVoiceAsyncPolicy : public UObject
{
public:
	TArray<int>                                        VoiceIndices;                                             // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	struct FScriptMulticastDelegate                    OnInterrupted;                                            // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCompleted;                                              // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinalized;                                              // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlScenarioVoiceAsyncPolicy");
		return ptr;
	}

};


// Class Arise.BtlVoiceValidationHandle
// 0x0008 (0x0030 - 0x0028)
class UBtlVoiceValidationHandle : public UObject
{
public:
	bool                                               bConversationSubunits;                                    // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlVoiceValidationHandle");
		return ptr;
	}

};


// Class Arise.BtlVoiceDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UBtlVoiceDataClass : public UXmlDatabaseBase
{
public:
	struct FBtlVoiceDataList                           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlVoiceDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.BTS_BtlBPBase
// 0x0010 (0x00A8 - 0x0098)
class UBTS_BtlBPBase : public UBTService_BlueprintBase
{
public:
	struct FString                                     Describe;                                                 // 0x0098(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BTS_BtlBPBase");
		return ptr;
	}

};


// Class Arise.BTT_BtlBPBase
// 0x0018 (0x00B8 - 0x00A0)
class UBTT_BtlBPBase : public UBTTask_BlueprintBase
{
public:
	struct FString                                     Describe;                                                 // 0x00A0(0x0010) (Edit, ZeroConstructor)
	bool                                               IgnoreAbort;                                              // 0x00B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BTT_BtlBPBase");
		return ptr;
	}

};


// Class Arise.BuildInfo
// 0x0010 (0x0038 - 0x0028)
class UBuildInfo : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BuildInfo");
		return ptr;
	}


	bool IsGame();
	bool IsEditor();
	struct FString GetVersion();
	struct FString GetTargetPlatform();
	struct FString GetReleaseVersion();
	struct FString GetPackageType();
	struct FString GetGameType();
	struct FString GetCreateDate();
	struct FString GetBuildConfiguration();
};


// Class Arise.CameraFadeComponent
// 0x0010 (0x0590 - 0x0580)
class UCameraFadeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      DrawColor_FadeIn;                                         // 0x0580(0x0004) (IsPlainOldData)
	struct FColor                                      DrawColor_FadeOut;                                        // 0x0584(0x0004) (IsPlainOldData)
	float                                              Radius_FadeIn;                                            // 0x0588(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Offset_FadeOut;                                           // 0x058C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CameraFadeComponent");
		return ptr;
	}


	float GetShapeScale();
	float GetScaledRadius_FadeOut();
	float GetScaledRadius_FadeIn();
};


// Class Arise.CanvasPanel3D
// 0x0010 (0x0138 - 0x0128)
class UCanvasPanel3D : public UCanvasPanel
{
public:
	float                                              RotAxisX;                                                 // 0x0128(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RotAxisY;                                                 // 0x012C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RotAxisZ;                                                 // 0x0130(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0134(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CanvasPanel3D");
		return ptr;
	}


	void SetRotAxisZ(float InRotAxisZ);
	void SetRotAxisY(float InRotAxisY);
	void SetRotAxisX(float InRotAxisX);
};


// Class Arise.DlcTssSlotData
// 0x0000 (0x0028 - 0x0028)
class UDlcTssSlotData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.DlcTssSlotData");
		return ptr;
	}

};


// Class Arise.TSSHttp
// 0x0090 (0x00B8 - 0x0028)
class UTSSHttp : public UObject
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0028(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TSSHttp");
		return ptr;
	}

};


// Class Arise.MyTestTimer
// 0x0008 (0x0030 - 0x0028)
class UMyTestTimer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MyTestTimer");
		return ptr;
	}

};


// Class Arise.CEBankReqQueue
// 0x0060 (0x0088 - 0x0028)
class UCEBankReqQueue : public UObject
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0028(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CEBankReqQueue");
		return ptr;
	}

};


// Class Arise.CEBankManager
// 0x0368 (0x0390 - 0x0028)
class UCEBankManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0028(0x00A8) MISSED OFFSET
	class UCEBankReqQueue*                             SysReqQueue;                                              // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCEBankReqQueue*                             KPIReqQueue;                                              // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCEBankReqQueue*                             TSSReqQueue;                                              // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2A8];                                     // 0x00E8(0x02A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CEBankManager");
		return ptr;
	}

};


// Class Arise.CharacterAttachmentConvDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UCharacterAttachmentConvDatabase : public UXmlDatabaseBase
{
public:
	struct FCharacterAttachmentConvDataCollection      Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CharacterAttachmentConvDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.CharacterDisableFaceBlendDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UCharacterDisableFaceBlendDatabase : public UXmlDatabaseBase
{
public:
	struct FCharacterDisableFaceBlendDataCollection    Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CharacterDisableFaceBlendDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.CharacterFootstep
// 0x00D8 (0x0100 - 0x0028)
class UCharacterFootstep : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GroundBorder;                                             // 0x0030(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DecalSize;                                                // 0x0034(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bMirrorDecal;                                             // 0x0040(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bGrounded;                                                // 0x0041(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0042(0x0006) MISSED OFFSET
	struct FHitResult                                  HitResultGround;                                          // 0x0048(0x0088) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              TraceOffset;                                              // 0x00D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	class ACharacter*                                  Character;                                                // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x00E0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CharacterFootstep");
		return ptr;
	}


	void K2_PlayFootstepMark(class UMaterialInterface* DecalMaterial);
};


// Class Arise.CharacterFootstepEventInterface
// 0x0000 (0x0028 - 0x0028)
class UCharacterFootstepEventInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CharacterFootstepEventInterface");
		return ptr;
	}


	void OnFootstepTakeOff(const struct FCharacterFootstepTakeOffEventArgs& Args);
	void OnFootstepPutOn(const struct FCharacterFootstepPutOnEventArgs& Args);
};


// Class Arise.CharacterFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UCharacterFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CharacterFunctionLibrary");
		return ptr;
	}


	struct FText STATIC_GetScenarioCharacterCaption(const struct FString& CharacterID);
};


// Class Arise.CharacterSkeletalMeshComponent
// 0x0020 (0x0C00 - 0x0BE0)
class UCharacterSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0BE0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CharacterSkeletalMeshComponent");
		return ptr;
	}


	bool K2_SetClothingPhysicsProperties(int ActorIndex, const struct FCharacterClothingPhysicsProperties& PhysicsProperties);
	struct FCharacterClothingPhysicsProperties K2_GetClothingPhysicsProperties(int ActorIndex);
};


// Class Arise.CharacterSpawnTestActor
// 0x0008 (0x0330 - 0x0328)
class ACharacterSpawnTestActor : public AActor
{
public:
	struct FName                                       ChrID;                                                    // 0x0328(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CharacterSpawnTestActor");
		return ptr;
	}

};


// Class Arise.ClickableWidgetBase
// 0x0048 (0x0250 - 0x0208)
class UClickableWidgetBase : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0208(0x0008) MISSED OFFSET
	int                                                UniqueId;                                                 // 0x0210(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsSelected;                                               // 0x0214(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsEnabled;                                                // 0x0215(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsActive;                                                 // 0x0216(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0217(0x0001) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHoveredEvent;                                           // 0x0218(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClickedEvent;                                           // 0x0228(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FText                                       DebugText;                                                // 0x0238(0x0018) (BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ClickableWidgetBase");
		return ptr;
	}


	void SetDebugText(const struct FText& Text);
	void Activate(bool sw);
};


// Class Arise.ClickableWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class UClickableWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ClickableWidgetInterface");
		return ptr;
	}


	bool OnUnselected();
	bool OnSelected();
	bool OnDeselected();
};


// Class Arise.CollectionHelpDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UCollectionHelpDatabase : public UXmlDatabaseBase
{
public:
	struct FHelpDataList                               Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CollectionHelpDatabase");
		return ptr;
	}


	bool IsEnableIndex_DataList(int Index);
};


// Class Arise.CollectionKeywordDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UCollectionKeywordDatabase : public UXmlDatabaseBase
{
public:
	struct FKeywordDataList                            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CollectionKeywordDatabase");
		return ptr;
	}

};


// Class Arise.CollectionPlayRecordDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UCollectionPlayRecordDatabase : public UXmlDatabaseBase
{
public:
	struct FPlayRecordDataList                         Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CollectionPlayRecordDatabase");
		return ptr;
	}

};


// Class Arise.CollectionSupport
// 0x0000 (0x0028 - 0x0028)
class UCollectionSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CollectionSupport");
		return ptr;
	}


	TArray<struct FPlayRecordData> STATIC_SortPlayRecordDataList(TArray<struct FPlayRecordData> DataList);
	void STATIC_SortEnemyData(int Type, TArray<struct FBtlUnitData>* InOutUnitData);
	int STATIC_GetPlayRecordValue(const struct FString& Label);
	EPlayRecordList STATIC_GetPlayRecordID(int ID);
	TArray<struct FPlayRecordData> STATIC_GetPlayRecordDataList();
	TArray<struct FKeywordData> STATIC_GetKeywordDataList();
	struct FKeywordData STATIC_GetKeywordData(const struct FString& Label);
	TArray<struct FHelpData> STATIC_GetHelpDataList();
	bool STATIC_GetHelpDataById(int ID, struct FHelpData* HelpData);
	struct FHelpData STATIC_GetHelpData(const struct FString& Label);
	TArray<struct FRodData> STATIC_GetFishingRodDataList();
	struct FRodData STATIC_GetFishingRodData(int ID);
	TArray<struct FLureData> STATIC_GetFishingLureDataList();
	struct FLureData STATIC_GetFishingLureData(int ID);
	TArray<struct FFishData> STATIC_GetFishDataList();
	struct FFishData STATIC_GetFishData(const struct FString& Label);
	int STATIC_GetEnemyColectionMaxCount();
	void STATIC_GetEnemyColectionData(TArray<struct FBtlUnitData>* OutUnitData);
	struct FString STATIC_FormatIntToHumanReadable(int Value, bool IsCurrency);
};


// Class Arise.ConfigBgmDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UConfigBgmDataClass : public UXmlDatabaseBase
{
public:
	struct FConfigBgmDataList                          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ConfigBgmDataClass");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.ConfigDataClass
// 0x0010 (0x01C8 - 0x01B8)
class UConfigDataClass : public UXmlDatabaseBase
{
public:
	struct FConfigDataList                             Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ConfigDataClass");
		return ptr;
	}

};


// Class Arise.CookingPointDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UCookingPointDatabase : public UXmlDatabaseBase
{
public:
	struct FCookingPointDatabaseRow                    Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CookingPointDatabase");
		return ptr;
	}

};


// Class Arise.RecipeCookDatabase
// 0x0030 (0x01E8 - 0x01B8)
class URecipeCookDatabase : public UXmlDatabaseBase
{
public:
	struct FCookingRecipeDatabaseRow                   Database;                                                 // 0x01B8(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.RecipeCookDatabase");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.UMGCustomDrawUtil
// 0x0000 (0x0028 - 0x0028)
class UUMGCustomDrawUtil : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.UMGCustomDrawUtil");
		return ptr;
	}


	struct FVector2D STATIC_TransformPointFromPaintContext(const struct FVector2D& Point, struct FPaintContext* Context);
	struct FSlateTrapezoid STATIC_MakeSlateTrapezoid(TArray<struct FSlateVertexMinimum> InVerts, TArray<int> InIndexes);
	struct FVector2D STATIC_GetLocalSizeFromPaintContext(struct FPaintContext* Context);
	void STATIC_DrawStaticTrapezoid(const struct FSlateBrush& Brush, const struct FSlateTrapezoid& SlateTrapezoid, struct FPaintContext* Context);
	void STATIC_DrawDynamicTrapezoid(const struct FSlateBrush& Brush, TArray<struct FSlateVertexMinimum> InVerts, TArray<int> InIndexes, struct FPaintContext* Context);
	void STATIC_DrawCustomVerts(class USlateBrushAsset* Brush, TArray<struct FSlateVertexBP> InVerts, TArray<int> InIndexes, struct FPaintContext* Context);
};


// Class Arise.DebugMenuActorBase
// 0x0000 (0x0328 - 0x0328)
class ADebugMenuActorBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.DebugMenuActorBase");
		return ptr;
	}


	void SetDebugMenuIntValue(const struct FString& UserData, int Value);
	void SetDebugMenuFloatValue(const struct FString& UserData, float Value);
	void SetDebugMenuEnumValue(const struct FString& UserData, int Value);
	void SetDebugMenuBoolValue(const struct FString& UserData, bool on);
	void SetDBPDebugMenuBoolValue(const struct FString& UserData, bool on);
	int GetDebugMenuIntValue(const struct FString& UserData);
	float GetDebugMenuFloatValue(const struct FString& UserData);
	void GetDebugMenuEnumValue(const struct FString& UserData, int* Result);
	bool GetDebugMenuBoolValue(const struct FString& UserData);
	bool GetDBPDebugMenuBoolValue(const struct FString& UserData);
	bool DBM_RegisterValueInt(const struct FString& Title, const struct FName& PropertyName, int Min, int Max, int Step, EDebugMenuIntegerStyle Style, int SeparateCount, const struct FString& SeparateChar);
	bool DBM_RegisterValuefloat(const struct FString& Title, const struct FName& PropertyName, float Min, float Max, float Step);
	bool DBM_RegisterValueEnumWithType(const struct FString& Title, const struct FName& EnumName, const struct FName& PropertyName);
	bool DBM_RegisterValueEnum(const struct FString& Title, const struct FName& PropertyName);
	bool DBM_RegisterValueBoolean(const struct FString& Title, const struct FName& PropertyName);
	void DBM_RegisterSubMenu_DataTableRows(const struct FString& Title, class UDataTable* DataTable, const struct FScriptDelegate& OnDecide);
	void DBM_RegisterDBPBoolean(const struct FString& Title, const struct FName& DBPName);
	void DBM_RegisterButton_DataTableRows(const struct FString& Title, class UDataTable* DataTable, const struct FScriptDelegate& OnDecide);
};


// Class Arise.BtlMagicAsset
// 0x00B8 (0x00E8 - 0x0030)
class UBtlMagicAsset : public UDataAsset
{
public:
	bool                                               bInfinite;                                                // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              LifeTime;                                                 // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DestoryFlags;                                             // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EBtlMagicSpawnCandidateTarget                      SpawnCandidateTarget;                                     // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsReCycleMagicActor;                                     // 0x003D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	TArray<struct FBtlMagicTimeline>                   Timeline;                                                 // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               IsUseSlowSpellerIgnore;                                   // 0x0050(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsUseStopSpellerIgnore;                                   // 0x0051(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EBtlMagicVisiableAdjust                            VisiableAdjust;                                           // 0x0052(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x0053(0x0005) MISSED OFFSET
	struct FBtlArts_XmlDatatableLabel                  OverrideArtsLabel;                                        // 0x0058(0x0008) (Edit, DisableEditOnInstance)
	class UClass*                                      OwnerActorClass;                                          // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLocationCenter;                                          // 0x0068(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FName                                       SpawnLocationSocket;                                      // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	EBtlMagicLocationType                              SpawnLocationType;                                        // 0x0078(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	struct FVector                                     SpawnLocationOffset;                                      // 0x007C(0x000C) (IsPlainOldData)
	struct FName                                       SpawnRotationSocket;                                      // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)
	EBtlMagicRotationType                              SpawnRotationType;                                        // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	struct FRotator                                    SpawnRotationOffset;                                      // 0x0094(0x000C) (IsPlainOldData)
	uint32_t                                           InstanceMemorySize;                                       // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsFollowLocation;                                        // 0x00A4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	struct FBtl_MagicSpawnLocationParam                SpawnLocation;                                            // 0x00A8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                               bIsFollowRotation;                                        // 0x00C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	struct FBtl_MagicSpawnRotationParam                SpawnRotation;                                            // 0x00D0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.BtlMagicAsset");
		return ptr;
	}


	bool IsTaskType(const struct FName& Identifier, class UClass* Class);
	int GetTaskNum(const struct FName& Identifier);
};


// Class Arise.DebugMenu_UserInterface
// 0x0000 (0x0028 - 0x0028)
class UDebugMenu_UserInterface : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.DebugMenu_UserInterface");
		return ptr;
	}


	void STATIC_DBM_UIM_WindowModeCmd();
	void STATIC_DBM_UIM_WindowMode();
	void STATIC_DBM_UIM_VSync();
	void STATIC_DBM_UIM_UIElementsVisibility(const struct FScriptDelegate& Refresh);
	void STATIC_DBM_UIM_ShowCurrentLanguage();
	void STATIC_DBM_UIM_SetMenuPauseMode();
	void STATIC_DBM_UIM_SelectVoiceLanguage();
	void STATIC_DBM_UIM_SelectCurrentLanguage();
	void STATIC_DBM_UIM_SafeZone();
	void STATIC_DBM_UIM_ResolutionCmd();
	void STATIC_DBM_UIM_Resolution();
	void STATIC_DBM_UIM_PlayGo();
	void STATIC_DBM_UIM_PF_HUD_MasterVisibility();
	void STATIC_DBM_UIM_NaviMapOrthoWidth();
	void STATIC_DBM_UIM_NaviMapIconForceDraw(const struct FScriptDelegate& SetValueCallback);
	void STATIC_DBM_UIM_NaviMapCaptureMode();
	void STATIC_DBM_UIM_MinimapRotationMode();
	void STATIC_DBM_UIM_LocationMapShowName();
	void STATIC_DBM_UIM_FPSLimit();
	void STATIC_DBM_UIM_ButtonIcon();
	void STATIC_DBM_UIM_ApplicationScale();
};


// Class Arise.DebugParameterDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UDebugParameterDatabase : public UXmlDatabaseBase
{
public:
	struct FDebugParamDescCollection                   Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.DebugParameterDatabase");
		return ptr;
	}

};


// Class Arise.DebugWindow
// 0x0010 (0x0038 - 0x0028)
class UDebugWindow : public UObject
{
public:
	struct FString                                     WindowName;                                               // 0x0028(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.DebugWindow");
		return ptr;
	}


	void Save(float X, float Y, float W, float H);
	bool Load(float* X, float* Y, float* W, float* H);
};


// Class Arise.DummyItemDataList
// 0x0000 (0x0028 - 0x0028)
class UDummyItemDataList : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.DummyItemDataList");
		return ptr;
	}


	void STATIC_SortData(int SortType);
	void STATIC_RemoveData(int Index);
	void STATIC_Refresh(EMenuItemCategory Category, int SortType);
	void STATIC_Initialize();
	int STATIC_GetNum();
	struct FDummyItemData STATIC_GetData(int Index);
};


// Class Arise.DebugMenu_AliasSkill
// 0x0000 (0x0028 - 0x0028)
class UDebugMenu_AliasSkill : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.DebugMenu_AliasSkill");
		return ptr;
	}


	void STATIC_DBM_UIM_SkillSet();
	void STATIC_DBM_UIM_SkillLearn();
	void STATIC_DBM_UIM_Alias();
};


// Class Arise.EncountAssetLibrary
// 0x0000 (0x0028 - 0x0028)
class UEncountAssetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountAssetLibrary");
		return ptr;
	}


	void STATIC_UnloadSymbolModelAll(bool bForce);
	void STATIC_UnloadSymbolModel(const struct FString& ID, bool bForce);
	void STATIC_UnloadSymbolAll(bool bForce);
	void STATIC_UnloadSymbol(const struct FString& ID, bool bForce);
	void STATIC_LoadAsyncSymbolModel(const struct FString& ID);
	void STATIC_LoadAsyncSymbol(const struct FString& ID);
	bool STATIC_IsLoadCompleteSymbolModel(const struct FString& ID);
	bool STATIC_IsLoadCompleteSymbol(const struct FString& ID);
	class UObject* STATIC_GetSymbolModel(const struct FString& ID, const struct FName& ComponentName);
	class UClass* STATIC_GetSymbolClass(const struct FString& ID);
	void STATIC_ExportEncountSymbolAssetLog();
	void STATIC_DumpLoadingSymbolModel(TArray<struct FString>* Dump);
	void STATIC_DumpLoadingSymbol(TArray<struct FString>* Dump);
	bool STATIC_ContainsLoadSymbolModel(const struct FString& ID);
	bool STATIC_ContainsLoadSymbol(const struct FString& ID);
};


// Class Arise.PFEnSymCollisionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFEnSymCollisionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymCollisionLibrary");
		return ptr;
	}


	void STATIC_RemovePFEnSymOverlapCollision(class UPFEnSymSphereComponent* A, class USceneComponent* B);
	void STATIC_ClearPFEnSymOverlapCollisionAll();
	void STATIC_AddPFEnSymOverlapCollision(class UPFEnSymSphereComponent* A, class USceneComponent* B);
};


// Class Arise.PFPlacementObject
// 0x0000 (0x0328 - 0x0328)
class APFPlacementObject : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementObject");
		return ptr;
	}

};


// Class Arise.PFPlacementSerializer
// 0x0058 (0x0380 - 0x0328)
class APFPlacementSerializer : public APFPlacementObject
{
public:
	struct FString                                     actorId;                                                  // 0x0328(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	struct FString                                     OverrideLocationName;                                     // 0x0338(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     DlcName;                                                  // 0x0348(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<EPFPlacementSerialize>                 SerializeType;                                            // 0x0358(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0359(0x0007) MISSED OFFSET
	struct FString                                     DatabaseKey;                                              // 0x0360(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     Keyword;                                                  // 0x0370(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementSerializer");
		return ptr;
	}

};


// Class Arise.EncountGroup
// 0x00A8 (0x0428 - 0x0380)
class AEncountGroup : public APFPlacementSerializer
{
public:
	struct FEncountSymbolGroupData                     Condision;                                                // 0x0380(0x0050) (Edit, BlueprintVisible, EditConst)
	struct FString                                     LocationName;                                             // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bNoRespawn;                                               // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bBossImpl;                                                // 0x03E1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSpawnLock;                                               // 0x03E2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      Priority;                                                 // 0x03E3(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET
	TArray<class APFEnSymPlacement*>                   ReservedRespawnSymbols;                                   // 0x03E8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bSpawned;                                                 // 0x03F8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET
	TArray<class ACharacter*>                          ChildActors;                                              // 0x0400(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FEncountAreaInfo                            SpawnAreaInfo;                                            // 0x0410(0x0008) (BlueprintVisible)
	struct FEncountAreaInfo                            BattleAreaInfo;                                           // 0x0418(0x0008) (BlueprintVisible)
	bool                                               bPreloadBtlAssetNative;                                   // 0x0420(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUnloadBtlAssetNative;                                    // 0x0421(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0422(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountGroup");
		return ptr;
	}


	bool SpawnProcess();
	void SpawnPostProcess(class APFEncountSymbol* Symbol, class APFEnSymPlacement* Placement);
	void SpawnEncountSymbol();
	void ReplaceEncountSymbol();
	void RebuildEncountSymbol();
	void OutputParameter(struct FEncountSymbolGroupParamData* Output);
	bool IsSpawnRangePlayer();
	bool IsSpawnRange(class UAreaComponent* AreaComponent);
	void GroundEncountSymbol();
	void GetPlacementChildren(TArray<class APFEnSymPlacement*>* Placements);
	void DeleteSymbols();
	void DeletePlacementChildren();
	void BPE_UnloadBtlAsset();
	void BPE_Spawn();
	void BPE_LoadBtlAsset();
	bool BPE_IsLoadedSymbolAsset();
	bool BPE_IsFollow();
	bool BPE_IsFadeOut();
	bool BPE_IsCanSpawn();
	void BPE_FadeOut();
	void BPE_ExecFadeOut();
};


// Class Arise.EncountAssetManager
// 0x00A0 (0x00C8 - 0x0028)
class UEncountAssetManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0028(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountAssetManager");
		return ptr;
	}

};


// Class Arise.EncountSymbolFindedParamDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UEncountSymbolFindedParamDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FEncountSymbolFindedParamDatabase           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountSymbolFindedParamDatabaseObject");
		return ptr;
	}

};


// Class Arise.EncountSymbolGroupParamDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UEncountSymbolGroupParamDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FEncountSymbolGroupParamDatabase            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountSymbolGroupParamDatabaseObject");
		return ptr;
	}

};


// Class Arise.EncountSymbolLayerParamDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UEncountSymbolLayerParamDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FEncountSymbolLayerParamDatabase            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountSymbolLayerParamDatabaseObject");
		return ptr;
	}

};


// Class Arise.EncountSymbolLinkParamDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UEncountSymbolLinkParamDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FEncountSymbolLinkParamDatabase             Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountSymbolLinkParamDatabaseObject");
		return ptr;
	}

};


// Class Arise.EncountSymbolParamDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UEncountSymbolParamDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FEncountSymbolParamDatabase                 Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountSymbolParamDatabaseObject");
		return ptr;
	}

};


// Class Arise.EncountSymbolSpawnParamDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UEncountSymbolSpawnParamDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FEncountSymbolSpawnParamDatabase            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountSymbolSpawnParamDatabaseObject");
		return ptr;
	}

};


// Class Arise.EncountSymbolStatusDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UEncountSymbolStatusDatabase : public UXmlDatabaseBase
{
public:
	struct FEnSymStatusParamList                       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountSymbolStatusDatabase");
		return ptr;
	}

};


// Class Arise.EncountSymbolGroupDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UEncountSymbolGroupDatabase : public UXmlDatabaseBase
{
public:
	struct FEncountSymbolGroupDatabaseRow              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountSymbolGroupDatabase");
		return ptr;
	}

};


// Class Arise.EncountSymbolLayerDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UEncountSymbolLayerDatabase : public UXmlDatabaseBase
{
public:
	struct FEncountSymbolLayerDatabaseRow              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountSymbolLayerDatabase");
		return ptr;
	}

};


// Class Arise.EndingSceneController
// 0x0000 (0x0048 - 0x0048)
class UEndingSceneController : public UGameSceneController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EndingSceneController");
		return ptr;
	}

};


// Class Arise.EnemyEncountBase
// 0x0000 (0x0208 - 0x0208)
class UEnemyEncountBase : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnemyEncountBase");
		return ptr;
	}


	void C_IsOutBox(const struct FVector2D& InIconPos, const struct FBox2D& InBox2D, struct FVector2D* OutPos, bool* OutIsLeft, bool* OutIsRight, bool* OutIsTop, bool* OutIsBottom);
	struct FVector2D C_GetMoveValue(const struct FVector2D& InReferencePos, const struct FVector2D& InIconPos, const struct FRotator& InCameraRotator);
	void C_GetIconPositions(const struct FVector2D& InMoveValue, const struct FBox2D& InBox2D, struct FVector2D* OutFixPos, bool* OutIsLeft, bool* OutIsRight, bool* OutIsTop, bool* OutIsBottom);
};


// Class Arise.EnvQueryContext_PFEnSymGetFollowSymbols
// 0x0000 (0x0028 - 0x0028)
class UEnvQueryContext_PFEnSymGetFollowSymbols : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryContext_PFEnSymGetFollowSymbols");
		return ptr;
	}

};


// Class Arise.EnvQueryContext_PFEnSymGetRotateYaw
// 0x0000 (0x0028 - 0x0028)
class UEnvQueryContext_PFEnSymGetRotateYaw : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryContext_PFEnSymGetRotateYaw");
		return ptr;
	}

};


// Class Arise.EnvQueryContext_PFEnSymGetSymbolDestinations
// 0x0000 (0x0028 - 0x0028)
class UEnvQueryContext_PFEnSymGetSymbolDestinations : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryContext_PFEnSymGetSymbolDestinations");
		return ptr;
	}

};


// Class Arise.EnvQueryContext_PFEnSymGetSymbols
// 0x0000 (0x0028 - 0x0028)
class UEnvQueryContext_PFEnSymGetSymbols : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryContext_PFEnSymGetSymbols");
		return ptr;
	}

};


// Class Arise.EnvQueryContext_PFEnSymGetTarget
// 0x0000 (0x0028 - 0x0028)
class UEnvQueryContext_PFEnSymGetTarget : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryContext_PFEnSymGetTarget");
		return ptr;
	}

};


// Class Arise.EnvQueryGenerator_Arise_BtlBase
// 0x0008 (0x0088 - 0x0080)
class UEnvQueryGenerator_Arise_BtlBase : public UEnvQueryGenerator_ProjectedPoints
{
public:
	bool                                               Projected_OnBattleFloor;                                  // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               Filter_InBattleArea;                                      // 0x0081(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0082(0x0002) MISSED OFFSET
	float                                              Filter_InBattleAreaSizeOffset;                            // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryGenerator_Arise_BtlBase");
		return ptr;
	}

};


// Class Arise.EnvQueryGenerator_Arise_Cone
// 0x0020 (0x00A8 - 0x0088)
class UEnvQueryGenerator_Arise_Cone : public UEnvQueryGenerator_Arise_BtlBase
{
public:
	float                                              AngleOffset;                                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PointsDistance;                                           // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConeDegrees;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                AngleStep;                                                // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                PointStep;                                                // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                StartPointStep;                                           // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseForwardVectorPlayerController;                         // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryGenerator_Arise_Cone");
		return ptr;
	}

};


// Class Arise.EnvQueryGenerator_Arise_Cones
// 0x0018 (0x00A0 - 0x0088)
class UEnvQueryGenerator_Arise_Cones : public UEnvQueryGenerator_Arise_BtlBase
{
public:
	TArray<struct FEnvQueryGenerator_Arise_ConeData>   Cones;                                                    // 0x0088(0x0010) (Edit, ZeroConstructor)
	bool                                               UseForwardVectorPlayerController;                         // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryGenerator_Arise_Cones");
		return ptr;
	}

};


// Class Arise.EnvQueryGenerator_Arise_Sphere
// 0x0018 (0x00A0 - 0x0088)
class UEnvQueryGenerator_Arise_Sphere : public UEnvQueryGenerator_Arise_BtlBase
{
public:
	int                                                CircleNum;                                                // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CircleDistance;                                           // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                AngleStepNum;                                             // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Scale;                                                    // 0x0094(0x000C) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryGenerator_Arise_Sphere");
		return ptr;
	}

};


// Class Arise.EnvQueryGenerator_PFEnSymCone
// 0x00D0 (0x0150 - 0x0080)
class UEnvQueryGenerator_PFEnSymCone : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderFloatValue                   AlignedPointsDistance;                                    // 0x0080(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   ConeDegrees;                                              // 0x00B0(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   AngleStep;                                                // 0x00E0(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   Range;                                                    // 0x0110(0x0030) (Edit, DisableEditOnInstance)
	class UClass*                                      CenterActor;                                              // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIncludeContextLocation : 1;                              // 0x0148(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryGenerator_PFEnSymCone");
		return ptr;
	}

};


// Class Arise.EnvQueryGenerator_PFEnSymSimpleGrid
// 0x0010 (0x00F8 - 0x00E8)
class UEnvQueryGenerator_PFEnSymSimpleGrid : public UEnvQueryGenerator_SimpleGrid
{
public:
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypeQueries;                                        // 0x00E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryGenerator_PFEnSymSimpleGrid");
		return ptr;
	}

};


// Class Arise.EnvQueryGenerator_Sphere
// 0x0010 (0x0098 - 0x0088)
class UEnvQueryGenerator_Sphere : public UEnvQueryGenerator_Arise_BtlBase
{
public:
	int                                                CircleNum;                                                // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CircleDistance;                                           // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                AngleStepNum;                                             // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryGenerator_Sphere");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_Arise_ArtsRange
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_Arise_ArtsRange : public UEnvQueryTest
{
public:
	class UClass*                                      Context;                                                  // 0x01C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_Arise_ArtsRange");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_Arise_SemiautoArtsRange
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_Arise_SemiautoArtsRange : public UEnvQueryTest
{
public:
	class UClass*                                      Context;                                                  // 0x01C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_Arise_SemiautoArtsRange");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_ArtsRange
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_ArtsRange : public UEnvQueryTest
{
public:
	class UClass*                                      Context;                                                  // 0x01C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_ArtsRange");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_FilterQuerierCapsuleDistance
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_FilterQuerierCapsuleDistance : public UEnvQueryTest
{
public:
	float                                              Rate;                                                     // 0x01C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_FilterQuerierCapsuleDistance");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_FilterQuerierUnderGround
// 0x0000 (0x01C0 - 0x01C0)
class UEnvQueryTest_FilterQuerierUnderGround : public UEnvQueryTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_FilterQuerierUnderGround");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_FilterUnitSize
// 0x0000 (0x01C0 - 0x01C0)
class UEnvQueryTest_FilterUnitSize : public UEnvQueryTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_FilterUnitSize");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_FlyHeight
// 0x0000 (0x01C0 - 0x01C0)
class UEnvQueryTest_FlyHeight : public UEnvQueryTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_FlyHeight");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_LeaveEnemies
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_LeaveEnemies : public UEnvQueryTest
{
public:
	float                                              FollowerDistance;                                         // 0x01C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreSmallMassUnit;                                      // 0x01C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_LeaveEnemies");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_LeaveFollowers
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_LeaveFollowers : public UEnvQueryTest
{
public:
	float                                              FollowerDistance;                                         // 0x01C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreSmallMassUnit;                                      // 0x01C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_LeaveFollowers");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_Obstacle
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_Obstacle : public UEnvQueryTest
{
public:
	class UClass*                                      Context;                                                  // 0x01C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_Obstacle");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_PFEnSymOverlap
// 0x0028 (0x01E8 - 0x01C0)
class UEnvQueryTest_PFEnSymOverlap : public UEnvQueryTest
{
public:
	struct FEnvOverlapData                             OverlapData;                                              // 0x01C0(0x0020) (Edit, DisableEditOnInstance)
	bool                                               bOnlyQuerier;                                             // 0x01E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSkipQuerier;                                             // 0x01E1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x01E2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_PFEnSymOverlap");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_PFEnSymPathfinding
// 0x0010 (0x0248 - 0x0238)
class UEnvQueryTest_PFEnSymPathfinding : public UEnvQueryTest_Pathfinding
{
public:
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypeQueries;                                        // 0x0238(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_PFEnSymPathfinding");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_PFEnSymRandomRange
// 0x0000 (0x01C0 - 0x01C0)
class UEnvQueryTest_PFEnSymRandomRange : public UEnvQueryTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_PFEnSymRandomRange");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_PositioningTargetRange
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_PositioningTargetRange : public UEnvQueryTest
{
public:
	float                                              Range;                                                    // 0x01C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseTacticsFarRange;                                       // 0x01C4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_PositioningTargetRange");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_PreviousVector
// 0x0000 (0x01C0 - 0x01C0)
class UEnvQueryTest_PreviousVector : public UEnvQueryTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_PreviousVector");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_RoutePath
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_RoutePath : public UEnvQueryTest
{
public:
	class UClass*                                      Context;                                                  // 0x01C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_RoutePath");
		return ptr;
	}

};


// Class Arise.EnvQueryTest_UnitDirection
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_UnitDirection : public UEnvQueryTest
{
public:
	EBtlUnitDirectionType                              Direction;                                                // 0x01C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EnvQueryTest_UnitDirection");
		return ptr;
	}

};


// Class Arise.EQSDebugPawn
// 0x0000 (0x07E0 - 0x07E0)
class AEQSDebugPawn : public AEQSTestingPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EQSDebugPawn");
		return ptr;
	}


	class UEnvQuery* GetEQS();
	void EQSQuery();
};


// Class Arise.EsadAsset
// 0x0008 (0x0030 - 0x0028)
class UEsadAsset : public UObject
{
public:
	class UAnimBlueprint*                              Asset;                                                    // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EsadAsset");
		return ptr;
	}

};


// Class Arise.EscdAsset
// 0x0008 (0x0030 - 0x0028)
class UEscdAsset : public UObject
{
public:
	class UBlueprint*                                  Asset;                                                    // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EscdAsset");
		return ptr;
	}

};


// Class Arise.EventActor
// 0x0000 (0x0328 - 0x0328)
class AEventActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EventActor");
		return ptr;
	}

};


// Class Arise.EventComponent
// 0x02B0 (0x0500 - 0x0250)
class UEventComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0250(0x0018) MISSED OFFSET
	TArray<int>                                        _AssetLoadStates;                                         // 0x0268(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0xB8];                                      // 0x0278(0x00B8) MISSED OFFSET
	struct FEventNo                                    EventName;                                                // 0x0330(0x0010) (Edit, BlueprintVisible, EditConst)
	struct FString                                     EventOptionName;                                          // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FScenarioConditionNamed>             ScenarioConditions;                                       // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bAutoChangedScenarioConditionUpdate;                      // 0x0360(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLoop;                                                    // 0x0361(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0362(0x0002) MISSED OFFSET
	int                                                PlaybackRangeCameraCut;                                   // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     PlaybackRangeCameraName;                                  // 0x0368(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bOverridePreFade;                                         // 0x0378(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	float                                              bOverridePreFadeTime;                                     // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHasExtendPostEventEncount;                               // 0x0380(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0381(0x0007) MISSED OFFSET
	struct FEventExtendPostEventEncount                ExtendPostEventEncount;                                   // 0x0388(0x0030) (Edit, BlueprintVisible)
	bool                                               bSkipPostEventChangeVisual;                               // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	class ULevelSequence*                              PlayableMasterSequencer;                                  // 0x03C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ULevelSequence*                              PlayableSubSequencer;                                     // 0x03C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ULevelSequencePlayer*                        CurrentMainSequencePlayer;                                // 0x03D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ULevelSequencePlayer*                        CurrentSubSequencePlayer;                                 // 0x03D8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUsePlaybackRange;                                        // 0x03E0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	int                                                PlaybackRangeStartFrame;                                  // 0x03E4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	int                                                PlaybackRangeEndFrame;                                    // 0x03E8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnChangedScenarioConditionNotify;                         // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bChangeTransform;                                         // 0x0400(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0xF];                                       // 0x0401(0x000F) MISSED OFFSET
	struct FTransform                                  PlayingTransform;                                         // 0x0410(0x0030) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	class ALevelSequenceActor*                         PlayedLevelSequenceActor;                                 // 0x0440(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ALevelSequenceActor*                         PlayedSubLevelSequenceActor;                              // 0x0448(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bMainEventEnd;                                            // 0x0450(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bInPlaySpawnCheck;                                        // 0x0451(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableEventSkip;                                        // 0x0452(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EEventAssetType                                    AssetType;                                                // 0x0453(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bLevelSequenceLoaded;                                     // 0x0454(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	bool                                               bLevelSequenceManualLoad;                                 // 0x0455(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	bool                                               bStreamLevelManualLoad;                                   // 0x0456(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x0457(0x0001) MISSED OFFSET
	class ULevelSequence*                              LevelSequence;                                            // 0x0458(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             LevelSequencePath;                                        // 0x0460(0x0018) (Edit, BlueprintVisible)
	struct FSoftObjectPath                             StreamLevelPath;                                          // 0x0478(0x0018) (Edit, BlueprintVisible)
	TArray<struct FString>                             SubSequencePaths;                                         // 0x0490(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData10[0x28];                                      // 0x04A0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Arise.EventComponent.ScriptPath
	struct FString                                     ScriptUserString;                                         // 0x04C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class AActor*                                      TargetActor;                                              // 0x04D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	float                                              PreloadDistance;                                          // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	struct FString                                     ParentActorName;                                          // 0x04E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData12[0x8];                                       // 0x04F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EventComponent");
		return ptr;
	}


	void UnloadRequest();
	void SetPlayTransform(const struct FTransform& PlayTransform, bool bUse);
	bool SeekTo(int frame);
	void ResetLoadState();
	void PrestreamTexturesOfRequestedActors(float InSeconds, const struct FLatentActionInfo& LatentInfo);
	void PrestreamTexturesOfFirstShotCharacters(float InSeconds, const struct FLatentActionInfo& LatentInfo);
	void PrestreamTexturesOfAllCharacters();
	bool PreLoadAllStringDictionaries();
	bool PreLoadAllCharacters();
	bool PlaySubSequencer(bool bStart);
	bool PlayNextSequencer();
	bool PlayMainSequencer();
	void OnChangedScenarioFlag(int Flag, bool bValid);
	void OnChangedScenarioCounter(int counter, int Prev);
	void OnChangedScenarioCondition();
	void LoadRequest();
	bool IsUnloaded();
	bool IsSatisfyScenarioCondition();
	bool IsLoadedNextSequencer();
	bool IsLoaded();
	bool IsFirstShotCharactersPreloaded();
	bool IsCharacterPreloaded();
	bool IsAllStringDictionariesPreloaded();
	int GetPlayingSequencerNo();
	int GetPlayingEndFrame();
	int GetPlayingCurFrame();
	int GetMaxSequencerCount();
	struct FName GeStreamLevelName();
	bool DoMessageSkip();
	bool ActivateCurrentSequencer();
};


// Class Arise.EventDebugSettingsDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UEventDebugSettingsDatabase : public UXmlDatabaseBase
{
public:
	struct FEventDebugSettingsList                     Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EventDebugSettingsDatabase");
		return ptr;
	}

};


// Class Arise.EventFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UEventFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EventFunctionLibrary");
		return ptr;
	}


	bool STATIC_TryGetEventPlayWorldTime(const struct FString& iEventId, TArray<float>* OutWorldTimes);
	void STATIC_GetEventSceneList(const struct FString& iEpisode, TArray<int>* OutSceneList);
	class AEventManager* STATIC_GetEventManager();
	void STATIC_GetEventListByRegex(const struct FString& iPattern, TArray<struct FString>* OutEventList);
	void STATIC_GetEventEpisodeList(TArray<struct FString>* OutEpisodeList);
	bool STATIC_GetEventEncountData(int ScenarioCounter, struct FPostEventEncountData* EventEncountData);
};


// Class Arise.EventManager
// 0x02B8 (0x05E0 - 0x0328)
class AEventManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0328(0x0068) MISSED OFFSET
	struct FEventSettings                              EventSettings;                                            // 0x0390(0x00F8) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bShowPreFade;                                             // 0x0488(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowPostFade;                                            // 0x0489(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x048A(0x0002) MISSED OFFSET
	float                                              PreFadeSec;                                               // 0x048C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PostFadeSec;                                              // 0x0490(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                PreFadeColor;                                             // 0x0494(0x0010) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                PostFadeColor;                                            // 0x04A4(0x0010) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bHidePlayerPreEvent;                                      // 0x04B4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideNpcPreEvent;                                         // 0x04B5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideEnemyPreEvent;                                       // 0x04B6(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideGimmicPreEvent;                                      // 0x04B7(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bMapReloadPostEvent;                                      // 0x04B8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bNpcReplacePostEvent;                                     // 0x04B9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bContinueEvent;                                           // 0x04BA(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoSave;                                                // 0x04BB(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPostHpRecover;                                           // 0x04BC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPostPlayInnSE;                                           // 0x04BD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bWhiteFadeOut;                                            // 0x04BE(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x04BF(0x0001) MISSED OFFSET
	struct FEventEncountInfo                           EncountInfo;                                              // 0x04C0(0x0048) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bGoBackTitle;                                             // 0x0508(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0509(0x0007) MISSED OFFSET
	class AStreamLevelLoader*                          StreamLevelLoader;                                        // 0x0510(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UObject*                                     PersitantLevel;                                           // 0x0518(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnComponentEventFinalizeNotify;                           // 0x0520(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentPostEventProcessNotify;                        // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0xA0];                                      // 0x0540(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EventManager");
		return ptr;
	}


	void ResetOpenedQuestName();
	void ResetError();
	bool PlayEventComponent(class UEventComponent* eventComp);
	void OnScriptEnd();
	void OnEventPlayEnd(bool bForce);
	bool IsEnableSystemPause();
	EEventPlayState GetPlayState();
	struct FString GetPlayingEventName();
	struct FString GetOpenedQuestName();
	bool EventSkipForBattle();
	void ClearEncountBgm();
	void BPE_ShowNowLoading(bool bShow);
	void BPE_RunScript(class UClass* ScriptClass, const struct FString& ScriptUserString, class AActor* scriptOwnerActor);
	void BPE_PreEvent(EEventPlayState playState);
	void BPE_PlayMovie(const struct FString& EventNo);
	void BPE_PlayLongChat(const struct FString& EventNo);
	void BPE_PlayEvent(class UEventComponent* EventComponent);
	void BPE_OnPreFade();
	void BPE_MapChange(const struct FString& MapName, const struct FString& LocatorName, int oldSceCounter, int newSceCounter);
	void BPE_EndEvent();
	void BPE_Encount(const struct FString& EncountGroupName, const struct FString& BattleMapName, int newxScenarioCounter);
	void BPE_BattleStartRequest();
};


// Class Arise.EventNoDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UEventNoDatabase : public UXmlDatabaseBase
{
public:
	struct FEventNoDatabaseArray                       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EventNoDatabase");
		return ptr;
	}

};


// Class Arise.EventSettingsDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UEventSettingsDatabase : public UXmlDatabaseBase
{
public:
	struct FEventSettingsList                          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EventSettingsDatabase");
		return ptr;
	}

};


// Class Arise.FaceAttachmentConvDatabase_ARI
// 0x0010 (0x01C8 - 0x01B8)
class UFaceAttachmentConvDatabase_ARI : public UXmlDatabaseBase
{
public:
	struct FFaceAttachmentConvDataCollection_ARI       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FaceAttachmentConvDatabase_ARI");
		return ptr;
	}

};


// Class Arise.FarmFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFarmFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FarmFunctionLibrary");
		return ptr;
	}


	void STATIC_UpdateFarmStatus(int FarmTime);
	void STATIC_UpdateFarmAnimalStatus(int FarmTime);
};


// Class Arise.FastTravelControlDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UFastTravelControlDatabase : public UXmlDatabaseBase
{
public:
	struct FFastTravelControlDataCollection            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FastTravelControlDatabase");
		return ptr;
	}

};


// Class Arise.Fish
// 0x0178 (0x01A0 - 0x0028)
class UFish : public UObject
{
public:
	unsigned char                                      UnknownData00[0x144];                                     // 0x0028(0x0144) MISSED OFFSET
	float                                              FeedMindPoint;                                            // 0x016C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastAddPoint;                                             // 0x0170(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AttackMindPoint;                                          // 0x0174(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     FishName;                                                 // 0x0178(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	float                                              FishSize;                                                 // 0x0188(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FishActivity;                                             // 0x018C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MindDownInterval;                                         // 0x0190(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MindDownSpeed;                                            // 0x0194(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLureMatch;                                               // 0x0198(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0199(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Fish");
		return ptr;
	}


	void ResetMindDownTimer(float resetTime);
	bool EvaluateLureAction(ELureAction actType, bool bTimingError, float* Point, bool* bActionMatch, bool* bComboAction);
	void AddLurePoint(ELureType LureType, ELureAction actType, float AddPoint);
	void AddHotSpotBounus(const struct FString& tarGetFish, float addFeedMindPoint, float addFishActivity);
};


// Class Arise.FishAnimInstance
// 0x0020 (0x0490 - 0x0470)
class UFishAnimInstance : public UASAnimInstance
{
public:
	class UAnimSequence*                               AnimSequenceM;                                            // 0x0470(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               AnimSequenceS;                                            // 0x0478(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ASBlendRate;                                              // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0484(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishAnimInstance");
		return ptr;
	}

};


// Class Arise.FishGroup
// 0x0018 (0x0340 - 0x0328)
class AFishGroup : public AActor
{
public:
	TArray<class UFish*>                               Fishs;                                                    // 0x0328(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              LureMatchBounsRate;                                       // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x033C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishGroup");
		return ptr;
	}


	void Update(float Tick, float mindDownRate);
	void SpawnFishs(const struct FString& AreaName, int Nums, int timeZoneId, int lureId);
	void SpawnFishDebug(const struct FString& FishName, int timeZoneId);
	void AddLurePoint(float Point, ELureType LureType, ELureAction actType);
};


// Class Arise.FishingDatabase
// 0x0090 (0x0248 - 0x01B8)
class UFishingDatabase : public UXmlDatabaseBase
{
public:
	struct FFishingData                                Database;                                                 // 0x01B8(0x0090) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishingDatabase");
		return ptr;
	}

};


// Class Arise.FishingFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFishingFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishingFunctionLibrary");
		return ptr;
	}


	void STATIC_PlaySystemSE(class UObject* WorldContextObject, EFishingSE seid);
	void STATIC_PlaySceneSE(class UObject* WorldContextObject, EFishingSE seid, const struct FVector& pos);
	bool STATIC_GetShortChatTextID(EFishScScene SceneID, int DetailID, TArray<struct FString>* Result);
	struct FString STATIC_GetShortChatTextGroup(const struct FString& TextID);
	struct FString STATIC_GetSEEventName(EFishingSE seid);
	bool STATIC_GetFishModelDataById(const struct FString& FishId, struct FFishModelData* Out);
	struct FString STATIC_GetFishingLureCombo(const struct FString& FishId);
	class UFishingDatabase* STATIC_GetFishingDatabase();
};


// Class Arise.FishingHotSpot
// 0x0030 (0x0358 - 0x0328)
class AFishingHotSpot : public AActor
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0328(0x0004) MISSED OFFSET
	EFishingHotSpotType                                SpotType;                                                 // 0x032C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x032D(0x0003) MISSED OFFSET
	float                                              EffectiveRadius;                                          // 0x0330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EFishType                                          BounusFishType;                                           // 0x0334(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0335(0x0003) MISSED OFFSET
	float                                              ActiveTime;                                               // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SleepTime;                                                // 0x033C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SleepRndRate;                                             // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bActive;                                                  // 0x0344(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bActiveTime;                                              // 0x0345(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDynamicSpotActive;                                       // 0x0346(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0347(0x0001) MISSED OFFSET
	struct FVector                                     DynamicSpotLocation;                                      // 0x0348(0x000C) (BlueprintVisible, Transient, IsPlainOldData)
	float                                              DynamicSpotSize;                                          // 0x0354(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishingHotSpot");
		return ptr;
	}


	void UpdateDynamicSpot(float Tick, unsigned char FishingState);
	void Update(float Tick);
	void OnFishingDeactive();
	void OnFishingActive(class AActor* FishingController);
	struct FString GetBounusFishName();
	void BPE_UpdateDynamicSpot(float Tick, unsigned char FishingState);
	void BPE_OnFishingDeactive();
	void BPE_OnFishingActive(class AActor* FishingController);
};


// Class Arise.FishingLineMesh
// 0x0060 (0x0388 - 0x0328)
class AFishingLineMesh : public AActor
{
public:
	struct FVector                                     StartPoint;                                               // 0x0328(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     EndPoint;                                                 // 0x0334(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              Slackness;                                                // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LineWidth;                                                // 0x0344(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DecayRate;                                                // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GravityRate;                                              // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterSurfaceHeight;                                       // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableUpdate;                                             // 0x0354(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0355(0x0003) MISSED OFFSET
	class UProceduralMeshComponent*                    ProceduralMesh;                                           // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<struct FFishingLineNode>                    Nodes;                                                    // 0x0360(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0370(0x0010) MISSED OFFSET
	int                                                DivideNum;                                                // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              LengthRate;                                               // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishingLineMesh");
		return ptr;
	}


	void UpdateLineMesh();
	void UpdateLine(float DeltaTime);
	void SetLinePoints(TArray<struct FVector> Points, float DeltaTime);
	void ResetLine();
	void CreateLineMesh(int Divide);
};


// Class Arise.FishingPadProcess
// 0x0000 (0x0338 - 0x0338)
class AFishingPadProcess : public AInputExtInputProcessBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishingPadProcess");
		return ptr;
	}

};


// Class Arise.FishingRewardItemDatabaseObject
// 0x0020 (0x01D8 - 0x01B8)
class UFishingRewardItemDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FFishingRewardItemDatabase                  Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishingRewardItemDatabaseObject");
		return ptr;
	}

};


// Class Arise.FishingSettingComponent
// 0x0010 (0x0260 - 0x0250)
class UFishingSettingComponent : public USceneComponent
{
public:
	struct FString                                     AreaName;                                                 // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishingSettingComponent");
		return ptr;
	}

};


// Class Arise.ShortChatManager
// 0x0040 (0x0368 - 0x0328)
class AShortChatManager : public AActor
{
public:
	class UShortChatTimerTrigger*                      TimerTrigger;                                             // 0x0328(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0330(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatManager");
		return ptr;
	}


	void StartShortChat(const struct FString& FaceIcon, const struct FString& Speaker, const struct FText& Text);
	void ResumeShortChatUI();
	void ResumeShortChat();
	bool RequestShortChat_MessageList(bool bForce, TArray<class UMessageData*> MessageList, int Priority);
	bool RequestShortChat_Message_Callback(bool bForce, class UMessageData* Message, int Priority, const struct FScriptDelegate& Start, const struct FScriptDelegate& End);
	bool RequestShortChat_Message(bool bForce, class UMessageData* Message, int Priority);
	bool RequestShortChat_Callback(bool bForce, const struct FString& GroupID, const struct FString& Ep, const struct FString& Scene, int Priority, const struct FScriptDelegate& Start, const struct FScriptDelegate& End, const struct FVector& Location);
	bool RequestShortChat(bool bForce, const struct FString& GroupID, const struct FString& Ep, const struct FString& Scene, int Priority, const struct FVector& Location);
	void PauseShortChat();
	void Pause();
	void OnReadyEvent();
	void OnInitEvent();
	void OnGoBackTitle();
	void OnChangeState(EAriseGameState ChangedState, bool NewState);
	void OnChangeScene(unsigned char ChangedScene);
	void OnChangeDisplayScene(unsigned char ChangedScene, unsigned char OldScene);
	bool IsPlaying();
	bool HasRequestSpecified(const struct FString& SCID);
	bool HasRequest();
	struct FString GetCurrentLocation();
	void EndShortChat(bool bAbort);
	class UShortChatTimerTrigger* CreateTimerTrigger(class UClass* Class);
	void CleanupScenario();
	void CleanupPriority();
};


// Class Arise.FishShortChatManager
// 0x0000 (0x0368 - 0x0368)
class AFishShortChatManager : public AShortChatManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FishShortChatManager");
		return ptr;
	}

};


// Class Arise.EncountManager
// 0x00C8 (0x03F0 - 0x0328)
class AEncountManager : public AActor
{
public:
	TArray<struct FEncoutSymbolInfo>                   EncountSymbolInfos;                                       // 0x0328(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UEncountAssetManager*                        AssetManager;                                             // 0x0338(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TArray<class AEncountGroup*>                       SpawnedGroups;                                            // 0x0340(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class AActor*>                              SpawnedSymbols;                                           // 0x0350(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class AActor*>                              SpawnedMAPOBJ;                                            // 0x0360(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0370(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    BattleBonusFeverEvent;                                    // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              EncountGauge;                                             // 0x0390(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLockEncount;                                             // 0x0394(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0395(0x0002) MISSED OFFSET
	bool                                               bLockUnloadBattleAsset;                                   // 0x0397(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLockEntry;                                               // 0x0398(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0399(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypeQueries;                                        // 0x03A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x10];                                      // 0x03B0(0x0010) MISSED OFFSET
	TArray<struct FString>                             MakeEncountGroupNames;                                    // 0x03C0(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x20];                                      // 0x03D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.EncountManager");
		return ptr;
	}


	void SetEncountSymbolInfo_State(const struct FString& actorId, EEncountSymbolState InState);
	void SetEncountSymbolInfo_Rare(const struct FString& actorId, bool bEnable);
	bool SetEncountSymbolInfo(const struct FString& SymbolName, const struct FEncoutSymbolInfo& SymbolInfo);
	void SetEncountLock(bool bEnable);
	void ResumeSpawnedSymbol();
	void ResetBattleBonus();
	void RemoveSpawnedSymbol(class AActor* InActor);
	void RemoveSpawnedGroups(class AEncountGroup* InGroup);
	void RemoveEncountSymbolByInvalidLevel();
	void RemoveEncountGroup(const struct FName& Name);
	void PrintRareGroupLog();
	void PlayNotifySound(float ReactDistance);
	void PauseSpawnedSymbol();
	void OnResetEncountGauge();
	void OnPlayEvent();
	bool OnGetSurroundEncountMAPOBJNames(class AActor* InMAPOBJ, struct FBtlEncountGroupParam* Param);
	bool OnGetSurroundEncountGroupNames(TArray<struct FString> EncountGroupNames, class AEncountGroup* InGroup, struct FBtlEncountGroupParam* Param, struct FString* EncountGroupName);
	void OnGetInteractionProhibitedRange(float* ReactHorizontalDistance, float* ReactVerticalDistance);
	bool OnGetEncountGroupNames(const struct FString& AutoSymbolName, class AEncountGroup* InGroup, struct FBtlEncountGroupParam* Param, struct FString* EncountGroupName);
	void OnGetEncountGaugeSubParams(float* EnableHighSpeedRange, float* LowSpeed, float* HighSpeed);
	void OnGetEncountGaugeAddParams(float* GaugeMagnify, float* DistanceAdjust, float* ReactDistance);
	void OnChangeState(EAriseGameState ChangedState, bool NewState);
	void OnChangeDisplayScene(unsigned char ChangedScene, unsigned char OldScene);
	void MaketEncountGroupParam(const struct FString& AutoSymbolName, class AActor* Encounting, float ReactDistance, float ReactHeight, TArray<struct FBtlEncountGroupParam>* OutParams);
	bool IsValidEncountGroup(const struct FName& Name);
	bool IsInCautionRangeCheck(class AActor* Symbol, float Range, float Height);
	bool IsFollowing();
	bool IsFever();
	bool IsDistanceSymbolGroupPC(float ReactDistance);
	bool IsCaution();
	float GetViewDistanceMagnify();
	float GetViewAngleMagnify();
	void GetSymbolsWithinCautionRange(TArray<class AActor*>* OutSymbols);
	int GetSymbolsNumWithinCautionRange();
	void GetSpawendSymbolDistance(TArray<struct FString>* NearSymbols);
	float GetSearchRangeMagnify();
	int GetRiskValue(int Value, int HighRisk, int LowRisk, int GEq, int A, int B);
	class AEncountGroup* GetNearSymbolGroup();
	class APFEncountSymbol* GetNearSymbol(TArray<class AActor*> Symbols);
	class APFEncountSymbol* GetNearSpawnedSymbol();
	bool GetMaxSymbolLevel(TArray<class AEncountGroup*> Groups, int* Level);
	void GetFollowingSymbols(TArray<class AActor*>* FollowingSymbols);
	EEncountSymbolState GetEncountSymbolInfo_State(const struct FString& actorId);
	bool GetEncountSymbolInfo_Rare(const struct FString& actorId);
	bool GetEncountSymbolInfo_3(const struct FString& actorId, struct FEncoutSymbolInfo* Info);
	bool GetEncountSymbolInfo(const struct FString& SymbolName, struct FEncoutSymbolInfo* SymbolInfo);
	void GetEncountGroup(TArray<struct FName>* Group);
	void GetDistanceSymbolGroupSurround(class AActor* Sender, float ReactDistance, float ReactHeight, TArray<class AEncountGroup*>* OutGroups);
	void GetDistanceEncountMAPOBJSurround(class AActor* Sender, float ReactDistance, float ReactHeight, TArray<class AActor*>* OutMapObjs);
	void EncountLink(class APFEncountSymbol* SenderSymbol);
	void ClearEncountSymbolInfo();
	void ClearEncountGroup();
	void CheckWaitSymbolAssetsLoadedForMapJump(bool* bOutWait);
	void BPE_OutCamp();
	void BPE_OnChangeDisplayScene(EAriseGameScene ChangedScene, EAriseGameScene OldScene);
	bool BPE_IsLoadedSymbolAssets();
	void BPE_GetMinimapRange(float* OutRange, float* OutHeight);
	int BPE_GetLevelDiffValue();
	float BPE_GetEncountSurroundHeight();
	float BPE_GetEncountSurroundDistance();
	float BPE_GetBattleBonusEndValue();
	float BPE_GetBattleBonusDeduction();
	void AddSpawnedSymbol(class AActor* InActor);
	void AddSpawnedGroups(class AEncountGroup* InGroup);
	bool AddEncountSymbol_3(const struct FString& actorId);
	void AddEncountSymbol(const struct FString& SymbolName, const struct FName& OwnerLevelName);
	void AddEncountGroup(const struct FName& Name);
};


// Class Arise.GameSceneManager
// 0x0068 (0x0090 - 0x0028)
class UGameSceneManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET
	TArray<class UGameSceneController*>                GameSceneControllers;                                     // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FSceneInfo>                          PrevSceneBuffer;                                          // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0060(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWakeupScene;                                            // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeDisplayScene;                                     // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.GameSceneManager");
		return ptr;
	}

};


// Class Arise.GarbageCollectionManager
// 0x0050 (0x0078 - 0x0028)
class UGarbageCollectionManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0028(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.GarbageCollectionManager");
		return ptr;
	}


	void SetEnabled(EGCManagerUsage Usage, bool bInNewEnabled);
	void SetBorder(EGCManagerUsage Usage, const struct FGarbageParam& NewBorder);
	void ResetBaseline(EGCManagerUsage Usage);
	bool IsEnabled(EGCManagerUsage Usage);
	void Initialize();
	float GetUseMemSize();
	float GetUseLimitMemSize(EGCManagerUsage InUsage);
	EGCManagerCondition GetGCCondition(EGCManagerUsage InUsage);
	float GetFreeMemSize();
	void DoGarbageIfNeed(EGCManagerUsage Usage);
};


// Class Arise.GameFunctionMounter
// 0x0028 (0x0350 - 0x0328)
class AGameFunctionMounter : public AActor
{
public:
	EFunctionMountState                                MountState;                                               // 0x0328(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0329(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMounted;                                                // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnMounted;                                              // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.GameFunctionMounter");
		return ptr;
	}


	EFunctionMountState GetState();
	void DoUnMount();
	void DoMount();
};


// Class Arise.GenericAnimationFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UGenericAnimationFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.GenericAnimationFunctionLibrary");
		return ptr;
	}


	void STATIC_SetAnimationTimeFloat(float baseTick, int repeat, struct FGenericAnimationFloat* animBase);
	void STATIC_SetAnimationTimeArrayFloat(float baseTick, int repeat, struct FGenericAnimationArrayFloat* animBase);
	bool STATIC_AnimateFloat(float Tick, struct FGenericAnimationFloat* animF);
	bool STATIC_AnimateArrayFloat(float Tick, struct FGenericAnimationArrayFloat* animAF);
};


// Class Arise.CPP_LayerIconBase
// 0x0040 (0x0248 - 0x0208)
class UCPP_LayerIconBase : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0208(0x0030) MISSED OFFSET
	struct FVector                                     WorldPosition;                                            // 0x0238(0x000C) (BlueprintVisible, IsPlainOldData)
	int                                                CurrentIconIndex;                                         // 0x0244(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.CPP_LayerIconBase");
		return ptr;
	}


	void SetIconIndex(unsigned char Index);
	void SetIcon(EMapIconType IconType);
	struct FString GetLocatorName();
	struct FVector GetLocation();
	bool GetIconIndex(EMapIconType IconType, unsigned char* Index);
};


// Class Arise.IconLayerCommonDataBase
// 0x0060 (0x0088 - 0x0028)
class UIconLayerCommonDataBase : public UObject
{
public:
	struct FVector2D                                   CanvasSize;                                               // 0x0028(0x0008) (BlueprintVisible, IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x0030(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MapNorthYaw;                                              // 0x0034(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               RotateByCamera;                                           // 0x0038(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsRectangle;                                              // 0x0039(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	struct FVector                                     CenterLocation;                                           // 0x003C(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    MapRotation;                                              // 0x0048(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     PlayerPosition;                                           // 0x0054(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    PlayerRotation;                                           // 0x0060(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     CameraPosition;                                           // 0x006C(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    CameraRotation;                                           // 0x0078(0x000C) (BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.IconLayerCommonDataBase");
		return ptr;
	}


	void UpdateIcons(TArray<class UCPP_LayerIconBase*> Widgets, bool IsClip);
	bool UpdateFootprintIcons(TArray<class UCPP_LayerIconBase*> Widgets, TArray<struct FNavimapFootprintData> iList, bool IsClip, float Margin);
	void UpdateEnemyIcons(TArray<class UCPP_LayerIconBase*> Widgets, bool IsClip, float Margin);
	bool UpdateCommonIconsForLocamap(TArray<class UCPP_LayerIconBase*> Widgets, TArray<struct FLocatorInfo> arrayLocator, TArray<unsigned char>* VisibledIconTypes);
	bool UpdateCommonIcons(TArray<class UCPP_LayerIconBase*> Widgets, TArray<struct FLocatorInfo> arrayLocator, bool IsClip, float Margin);
	bool IsOutOfCircle(const struct FVector2D& Point, const struct FVector2D& Center, float Radius, struct FVector2D* Edge);
	bool IsOutOfBox2D(const struct FVector2D& Point, const struct FBox2D& rect, struct FVector2D* Edge);
	bool FindCommonIcon(TArray<class UCPP_LayerIconBase*> Widgets, const struct FString& Name, class UCPP_LayerIconBase** Widget);
	void CalcLocatorLocation(const struct FVector2D& In, struct FVector* Out);
	void CalcIconLocation(const struct FVector& In, struct FVector2D* Out, bool* IsOutOfWidget, struct FVector2D* Edge);
};


// Class Arise.IconLayerEnemyBase
// 0x0000 (0x0208 - 0x0208)
class UIconLayerEnemyBase : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.IconLayerEnemyBase");
		return ptr;
	}


	void C_UpdateIconImages(class AEncountManager* InManager, class UIconLayerCommonDataBase* InIconLayerCommonData, float InCautionHeight, float InCautionRange, const struct FString& InCurrentLocationName, TArray<class UWidget*> InOutIconImages, TArray<class UWidget*> InOutBossImages);
	bool C_UpdateIcon(class UIconLayerCommonDataBase* InCommonData, class AActor* InEname, TArray<class UWidget*> InImages, int InIndex);
	void C_AllSetVisibility(TArray<class UWidget*> InImages, ESlateVisibility InVisibility);
};


// Class Arise.MenuImageZoom
// 0x0000 (0x0028 - 0x0028)
class UMenuImageZoom : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuImageZoom");
		return ptr;
	}


	void STATIC_InitImageZoomParam(class UImage* Image, const struct FString& ParamName, struct FImageZoomParam* OutData);
	void STATIC_ImageReset(struct FImageZoomParam* InOutData);
	void STATIC_ImageMove(const struct FVector2D& Move, float Zoom, struct FImageZoomParam* InOutData);
};


// Class Arise.InitStatusDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UInitStatusDatabase : public UXmlDatabaseBase
{
public:
	struct FInitStatusDatabaseRow                      Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.InitStatusDatabase");
		return ptr;
	}


	bool IsEnableIndex_Status(int Index);
};


// Class Arise.ItemDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UItemDatabase : public UXmlDatabaseBase
{
public:
	struct FItemDatabaseRow                            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ItemDatabase");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.ItemLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ItemLibrary");
		return ptr;
	}


	void STATIC_UnloadDatabase_Item();
	void STATIC_LoadDatabase_Item();
	bool STATIC_IsValidItem(int ItemID);
	int STATIC_GetItemUniqueID(int ItemID);
	void STATIC_GetItemTextByLabel(const struct FName& Label, struct FText* Name, struct FText* Explanation);
	void STATIC_GetItemText(int ID, struct FText* Name, struct FText* Explanation);
	struct FText STATIC_GetItemPictureID(int ID);
	void STATIC_GetItemNameByLabel(const struct FName& Label, struct FText* Name);
	void STATIC_GetItemName(int ID, struct FText* Name);
	void STATIC_GetItemMaterialText(int ID, struct FDictionaryText* Location);
	struct FName STATIC_GetItemLabel(int ItemID);
	void STATIC_GetItemIDsByCategory(EItemCategory ItemCategory, bool* Valid, TArray<int>* ID);
	int STATIC_GetItemIdFromUniqueID(int ItemUniqueId);
	int STATIC_GetItemIdByLabel(const struct FName& Label);
	void STATIC_GetItemExplanationByLabel(const struct FName& Label, struct FText* Explanation);
	void STATIC_GetItemExplanation(int ID, struct FText* Explanation);
	void STATIC_GetItemDictionaryText(int ID, struct FDictionaryText* Name, struct FDictionaryText* Explanation);
	void STATIC_GetItemDatasByCategory(EItemCategory ItemCategory, bool* Valid, TArray<struct FItemData>* Data);
	bool STATIC_GetItemDataFromUniqueID(int ItemUniqueId, struct FItemData* Data);
	bool STATIC_GetItemDataFromDLCName(const struct FString& DlcName, TArray<struct FItemData>* outList);
	void STATIC_GetItemDataByLabel(const struct FName& Label, bool* Valid, struct FItemData* Data);
	void STATIC_GetItemDataAndTextByLabel(const struct FName& Label, bool* Valid, struct FText* Name, struct FText* Explanation, struct FItemData* Data);
	void STATIC_GetItemDataAndText(int ID, bool* Valid, struct FText* Name, struct FText* Explanation, struct FItemData* Data);
	void STATIC_GetItemData(int ID, bool* Valid, struct FItemData* Data);
	void STATIC_GetAllItemID(TArray<int>* Datas);
	void STATIC_GetAllItemData(TArray<struct FItemData>* Datas);
};


// Class Arise.ItemRecipeLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemRecipeLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ItemRecipeLibrary");
		return ptr;
	}


	bool STATIC_IsEnableRecipeCreate_Weapon(const struct FString& RecipeLabel);
	bool STATIC_IsEnableRecipeCreate_Accessory(const struct FString& RecipeLabel);
	void STATIC_GetVisibledRecipe_Weapon(TArray<struct FOpenRecipeData>* Recipes);
	void STATIC_GetRecipeText_Weapon(const struct FString& Label, struct FDictionaryText* RecipeName, struct FDictionaryText* Explanation);
	void STATIC_GetRecipeText_Accessory(int AccItemID, struct FDictionaryText* RecipeName, struct FDictionaryText* Explanation);
	bool STATIC_GetRecipe_Weapon(const struct FString& WeaponID, struct FRecipeWeaponData* Recipe);
	bool STATIC_GetRecipe_Accessory(TArray<struct FRecipeAccessoryData>* Recipe);
	void STATIC_GetCookRecipeDataFromLabel(const struct FString& Label, struct FCookingRecipe* CookRecipe);
	void STATIC_EnableRecipeCursor_Weapon(const struct FString& RecipeLabel);
	void STATIC_EnableRecipeCursor_Accessory(const struct FString& RecipeLabel);
	void STATIC_EnableRecipeCreate_Weapon(const struct FString& RecipeLabel);
	void STATIC_EnableRecipeCreate_Accessory(const struct FString& RecipeLabel);
};


// Class Arise.ListBoxAnimationInterface
// 0x0000 (0x0028 - 0x0028)
class UListBoxAnimationInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ListBoxAnimationInterface");
		return ptr;
	}


	void OnWidgetCreated();
};


// Class Arise.ListBoxHelper
// 0x0050 (0x0078 - 0x0028)
class UListBoxHelper : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<class UClickableWidgetBase*>                WidgetArray;                                              // 0x0030(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	int                                                SelectedIndex;                                            // 0x0040(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsActive;                                                 // 0x0044(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    ActivateDelegate;                                         // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SelectedProcedure;                                        // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     debugStr;                                                 // 0x0068(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ListBoxHelper");
		return ptr;
	}


	bool Up();
	bool SetTop();
	bool SetBottom();
	void Select(int iNewIndex);
	bool ScrollUp();
	bool ScrollDown();
	void Refresh();
	bool PageUp();
	bool PageDown();
	bool PadControl_InvalidRS(class AMenuPadProcess* PadProcess);
	void Initialize(class UAriseListBox* TargetBox);
	bool Down();
	bool DefaultPadControl(class AMenuPadProcess* PadProcess);
	class UListBoxHelper* STATIC_CreateInstance(class UAriseListBox* TargetBox);
	void Clear();
	void AddWidget(class UClickableWidgetBase* iWidget, int UniqueId);
	void Activate(bool sw);
};


// Class Arise.ListBoxItem
// 0x0018 (0x0220 - 0x0208)
class UListBoxItem : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0208(0x000C) MISSED OFFSET
	int                                                SortValue;                                                // 0x0214(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UListBoxWork*                                Owner;                                                    // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ListBoxItem");
		return ptr;
	}


	void SetSortValue(int Value);
};


// Class Arise.ListBoxItemFunction
// 0x0000 (0x0028 - 0x0028)
class UListBoxItemFunction : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ListBoxItemFunction");
		return ptr;
	}


	void STATIC_ListPanelItemSort(class UPanelWidget* PanelWidget, bool IsAscending);
	void STATIC_ListBoxItemSort(bool IsAscending, TArray<class UListBoxItem*>* Item);
};


// Class Arise.ListBoxRefineHelper
// 0x0050 (0x0078 - 0x0028)
class UListBoxRefineHelper : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<class UClickableWidgetBase*>                WidgetArray;                                              // 0x0030(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	int                                                SelectedIndex;                                            // 0x0040(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsActive;                                                 // 0x0044(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    ActivateDelegate;                                         // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SelectedProcedure;                                        // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     debugStr;                                                 // 0x0068(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ListBoxRefineHelper");
		return ptr;
	}


	bool Up();
	bool SetTop();
	bool SetBottom();
	void Select(int iNewIndex, bool skipScroll);
	void Refresh();
	bool PageUp();
	bool PageDown();
	void Initialize(class UAriseListBoxRefine* TargetBox);
	bool Down();
	bool DefaultPadControl(class AMenuPadProcess* PadProcess);
	class UListBoxRefineHelper* STATIC_CreateInstance(class UAriseListBoxRefine* TargetBox);
	void Clear();
	void Activate(bool sw);
};


// Class Arise.HttpTestActor
// 0x0028 (0x0350 - 0x0328)
class AHttpTestActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0328(0x0010) MISSED OFFSET
	int                                                dbgid;                                                    // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	struct FString                                     puid;                                                     // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.HttpTestActor");
		return ptr;
	}

};


// Class Arise.ListBoxWork
// 0x0048 (0x0070 - 0x0028)
class UListBoxWork : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0028(0x0004) MISSED OFFSET
	int                                                CursorIndex;                                              // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0030(0x0004) MISSED OFFSET
	bool                                               IsCursorLoop;                                             // 0x0034(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1B];                                      // 0x0035(0x001B) MISSED OFFSET
	class UAriseListBox*                               TargetBox;                                                // 0x0050(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnFocusMove;                                              // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ListBoxWork");
		return ptr;
	}


	void TickWork(float AddTime, class AMenuPadProcess* PadData, bool* IsLoop);
	void SetSelectItem(class UWidget* TargetWidget);
	void SetFocusItem(class UWidget* TargetWidget, bool IsForce);
	void SetFocus(int FocusIndex);
	void Reset();
	bool RemoveItemIndex(int Index);
	bool RemoveItem(class UWidget* Widget);
	void MultiSelectArray(TArray<int> IndexList, bool IsSelect);
	void MultiSelect(int Index, bool IsSelect);
	void IsMouseSelect(bool* IsSelect, int* SelectIndex);
	bool IsListLoop();
	int GetScrollTopIndex();
	int GetItemCount();
	class UWidget* GetItem(int Index);
	int GetFocusIndex();
	int GetCursorIndex();
	int FindItem(class UWidget* Widget);
	class UListBoxWork* STATIC_CreateInstance();
	void ClearMultiSelect();
	int AddItem(class UWidget* Widget);
};


// Class Arise.ListBoxItemDataFunction
// 0x0000 (0x0028 - 0x0028)
class UListBoxItemDataFunction : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ListBoxItemDataFunction");
		return ptr;
	}


	void ItemDataChange(const struct FListWidgetInitData& WidgetInitData);
};


// Class Arise.LLM_AccessInterface
// 0x0000 (0x0028 - 0x0028)
class ULLM_AccessInterface : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LLM_AccessInterface");
		return ptr;
	}


	void STATIC_LLM_SetSceneTag(const struct FString& SceneTagName);
	void STATIC_LLM_RemoveSceneTag(const struct FString& SceneTagName);
	bool STATIC_LLM_IsEnabled();
	TArray<struct FString> STATIC_LLM_GetSceneTagList();
	float STATIC_LLM_GetAllocSizeBySceneTag(EAriseLLMTag Tag, const struct FString& SceneTagName);
	float STATIC_LLM_GetAllocSize(EAriseLLMTag Tag);
	void STATIC_LLM_ClearSceneTag();
};


// Class Arise.LoadingScreenDatabase
// 0x0010 (0x01C8 - 0x01B8)
class ULoadingScreenDatabase : public UXmlDatabaseBase
{
public:
	struct FLoadingScreenDataCollection                Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LoadingScreenDatabase");
		return ptr;
	}

};


// Class Arise.ListBoxItemInterface
// 0x0000 (0x0028 - 0x0028)
class UListBoxItemInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ListBoxItemInterface");
		return ptr;
	}


	bool SetCursorFocus(bool IsFocusable);
	bool OnMouseFocus();
	bool OnMouseCursor();
	int GetSortValue();
};


// Class Arise.LocationChangeArea
// 0x0020 (0x0348 - 0x0328)
class ALocationChangeArea : public AActor
{
public:
	struct FString                                     OwnerMapName;                                             // 0x0328(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     LocationName;                                             // 0x0338(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LocationChangeArea");
		return ptr;
	}

};


// Class Arise.LocationMapManager
// 0x0228 (0x0550 - 0x0328)
class ALocationMapManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0328(0x00F8) MISSED OFFSET
	TMap<struct FString, class UStaticMesh*>           meshAssets;                                               // 0x0420(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TMap<struct FString, struct FLocatorInfo>          Locators;                                                 // 0x0470(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<struct FLocatorInfo>                        StaticLocators;                                           // 0x04C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TMap<struct FString, bool>                         FastTravelStateMap;                                       // 0x04D0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	struct FScriptMulticastDelegate                    EventOnAddLocator;                                        // 0x0520(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EventOnRemoveLocator;                                     // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EventCollectStaticLocator;                                // 0x0540(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LocationMapManager");
		return ptr;
	}


	void STATIC_VerifyMapLinkOpenNext();
	bool UnloadNaviMesh(const struct FString& LocationName);
	void STATIC_SetSavedLocationName(const struct FString& LocationName);
	void SetMapIconFilterValue(EMapIconType Key, bool Value);
	void SetMapIconFilter(TMap<EMapIconType, bool>* Filter);
	void STATIC_SetForceOpen(bool sw);
	void RemoveLocatorByType(unsigned char LocatorType);
	void RemoveLocatorAll();
	void RemoveLocator(const struct FString& LocatorName);
	bool OverwriteStaticLocator(const struct FString& LocatorName, unsigned char LocatorType);
	void MakeLocationDataTree();
	bool LoadNaviMesh2(const struct FString& LocationName, const struct FScriptDelegate& loadedDelegate);
	bool LoadNaviMesh(const struct FString& LocationName);
	bool IsSafeRegion(const struct FString& RegionName);
	bool IsOpenedLocation(const struct FString& LocationName);
	bool IsLoaded(const struct FString& LocationName);
	bool STATIC_IsForceOpen();
	bool IsFastTravelDisabledLocation();
	bool IsDisabledFastTravelLocation(const struct FString& LocationName);
	class UWorldMapDatabase* STATIC_GetWorldmapDatabase();
	void GetSafeRegionNameList(TArray<struct FString>* RegionNameList);
	bool GetNaviMeshs(const struct FString& LocationName, TArray<class UStaticMesh*>* Meshs);
	bool GetMapLinksWithSelection(const struct FString& LocationName, const struct FVector& Position, bool IsCheck, TArray<struct FMapLinkInfo>* MapLinkInfoList, int* Index);
	bool GetMapLinks(const struct FString& LocationName, TArray<struct FMapLinkInfo>* MapLinkInfoList);
	TMap<EMapIconType, bool> GetMapIconFilter();
	void GetLocatorsByUsage(EIconDataUsage Usage, TArray<struct FLocatorInfo>* arrayLocator);
	void GetLocators(unsigned char FilterType, TArray<struct FLocatorInfo>* arrayLocator);
	bool GetLocationData_C(const struct FString& LocationName, struct FMapLocationData* LocationData);
	void GetAreaData(const struct FString& RegionName, TMap<struct FString, struct FAreaData>* AreaDataMap);
	void CollectStaticLocator(const struct FString& LocatorName);
	bool CheckFastTravelDisabledLocation(const struct FString& iLocation);
	void AddStaticLocator(const struct FString& LocatorName, unsigned char LocatorType, const struct FVector& LocatorPosition, float LocatorRange, float locatorDist);
	void AddLocator(const struct FString& LocatorName, unsigned char LocatorType, const struct FVector& LocatorPosition, float LocatorRange, float locatorDist);
};


// Class Arise.LogFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class ULogFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LogFunctionLibrary");
		return ptr;
	}


	void STATIC_PrintString(class UObject* WorldContextObject, EAriseLogCategory Category, const struct FString& Message);
	class ALoggerManager* STATIC_GetLoggerManager(class UObject* WorldContextObject);
	class ULogger* STATIC_GetLogger(class UObject* WorldContextObject, EAriseLogCategory Category);
};


// Class Arise.Logger
// 0x0010 (0x0038 - 0x0028)
class ULogger : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.Logger");
		return ptr;
	}


	void Print(const struct FString& Message);
	void AddOutputFile(const struct FString& FilePath);
};


// Class Arise.LoggerManager
// 0x0050 (0x0378 - 0x0328)
class ALoggerManager : public AActor
{
public:
	TMap<EAriseLogCategory, class ULogger*>            Loggers;                                                  // 0x0328(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LoggerManager");
		return ptr;
	}


	void Print(EAriseLogCategory Category, const struct FString& Message);
	class ULogger* GetLogger(EAriseLogCategory Category);
	void AddOutputFile(EAriseLogCategory Category, const struct FString& FilePath);
};


// Class Arise.LoginSceneController
// 0x0000 (0x0048 - 0x0048)
class ULoginSceneController : public UGameSceneController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LoginSceneController");
		return ptr;
	}

};


// Class Arise.LongChatCharacter
// 0x0020 (0x0920 - 0x0900)
class ALongChatCharacter : public AAriseBuildCharacter
{
public:
	class UClass*                                      AnimClass;                                                // 0x0900(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptDelegate                             OnForceTeleport;                                          // 0x0908(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)
	EArisePartyID                                      PartyId;                                                  // 0x0918(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0919(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LongChatCharacter");
		return ptr;
	}


	void StopVoice();
	void SetLookat(float Angle, float Alpha, float Speed);
	void SetForceTeleport(bool bEnable);
	void SetEyelidParam(bool bEnable, const struct FString& PoseName, float BlendTime, bool bAddtive);
	void SetComponentTickEvenWhenPaused(bool Enabled);
	bool PlayVoice(const struct FString& VoiceLabel);
	class UAchCharacterVoiceComponent* GetVoiceComponent();
	class UAchCharacterFixTeleportComponent* GetFixTeleportComponent();
	void FacialEnable(bool bEnable);
	void AutoEyeBlinkEnable(bool bEnable);
};


// Class Arise.LongChatDatabase
// 0x0010 (0x01C8 - 0x01B8)
class ULongChatDatabase : public UXmlDatabaseBase
{
public:
	struct FLongChatList                               Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LongChatDatabase");
		return ptr;
	}

};


// Class Arise.LongChatLauncher
// 0x0000 (0x0328 - 0x0328)
class ALongChatLauncher : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LongChatLauncher");
		return ptr;
	}

};


// Class Arise.LongChatManager
// 0x0030 (0x0358 - 0x0328)
class ALongChatManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0328(0x0008) MISSED OFFSET
	TArray<struct FString>                             PlayLongChatQue;                                          // 0x0330(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst)
	float                                              TitleDispTime;                                            // 0x0340(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                OneTimeMaxStack;                                          // 0x0344(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0348(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LongChatManager");
		return ptr;
	}


	bool RemoveQue(const struct FString& LongchatName);
	void ConvertQueIDToPlayQue(TArray<struct FString>* LongChatQue);
	void Clear();
	bool AddQue(const struct FString& LongchatName);
};


// Class Arise.LongChatPlayAreaBase
// 0x0010 (0x0338 - 0x0328)
class ALongChatPlayAreaBase : public AActor
{
public:
	struct FString                                     LongchatName;                                             // 0x0328(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LongChatPlayAreaBase");
		return ptr;
	}

};


// Class Arise.LongChatSceneBuilder
// 0x0108 (0x0430 - 0x0328)
class ALongChatSceneBuilder : public AActor
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0328(0x0058) MISSED OFFSET
	struct FString                                     LongchatName;                                             // 0x0380(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst)
	struct FLongchatName                               EditLongChatName;                                         // 0x0390(0x0010) (Edit, BlueprintVisible)
	TArray<struct FString>                             SpawnCharIDs;                                             // 0x03A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     ScriptPath;                                               // 0x03B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     StringPath;                                               // 0x03C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     AssetPath;                                                // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TMap<struct FString, class UDataTable*>            animAssets;                                               // 0x03E0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LongChatSceneBuilder");
		return ptr;
	}


	void UnloadAsset();
	void PreStreamTexturesOfCharacters(float InSeconds, TArray<class ACharacter*> EntryCharacters, const struct FLatentActionInfo& LatentInfo);
	void LoadAsset(const struct FString& BaseAssetPath);
	bool IsLoadedAsset();
	struct FSoftObjectPath GetAnimSequencePath(const struct FString& charId, const struct FString& animId);
	class UClass* GetAnimInstanceClass(const struct FString& _AnimAssetPath);
};


// Class Arise.LongChatFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class ULongChatFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LongChatFunctionLibrary");
		return ptr;
	}


	void STATIC_UpdateLongChatPlayQue(const struct FString& LocationName, TArray<struct FString>* HitList);
	void STATIC_PostPlayLongChat(const struct FString& LongchatName);
	void STATIC_OpenLongChatDatabaseEditor();
	void STATIC_MargePostDofSettings(const struct FPostProcessSettings& baseSetting, const struct FPostProcessSettings& addSetting, struct FPostProcessSettings* dstSetting);
	bool STATIC_IsSatisfyLongChatPlayCondition(const struct FString& InLongChatName);
	float STATIC_GetMaxVoiceTime(class UDataTable* Table, const struct FString& VoiceID);
	int STATIC_GetMaxPlayableLongchatCount();
	bool STATIC_GetLongChatScripts(const struct FSoftObjectPath& refAsset, TArray<struct FLongChatScript>* loadedArray);
	bool STATIC_GetLongChatNamesByRegex(const struct FString& iPattern, TArray<struct FString>* chatNameNames);
	bool STATIC_GetLongChatNames(TArray<struct FString>* chatNameNames);
	class UTexture* STATIC_GetLongChatBGTexture(const struct FSoftObjectPath& ObjectPath);
	void STATIC_GetLongChatAnimList(const struct FSoftObjectPath& basePath, const struct FString& charcterID, TArray<struct FString>* AnimList);
	void STATIC_CopyPostProcessSettings(const struct FPostProcessSettings& srcSetting, struct FPostProcessSettings* dstSetting);
};


// Class Arise.LvExpDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class ULvExpDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FLvExpDatabase                              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LvExpDatabaseObject");
		return ptr;
	}

};


// Class Arise.LvStatusDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class ULvStatusDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FLvStatusDatabase                           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LvStatusDatabaseObject");
		return ptr;
	}

};


// Class Arise.MainQuestObject
// 0x0010 (0x01C8 - 0x01B8)
class UMainQuestObject : public UXmlDatabaseBase
{
public:
	struct FMainQuestObjectList                        Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MainQuestObject");
		return ptr;
	}

};


// Class Arise.MapAnimalAnimInstance
// 0x0020 (0x0490 - 0x0470)
class UMapAnimalAnimInstance : public UASAnimInstance
{
public:
	class UASStateMachine*                             StateMachine;                                             // 0x0470(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UASAnimationSet*                             AnimationSet;                                             // 0x0478(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MovementBlendSpaceValue;                                  // 0x0480(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TurnBlendSpaceValue;                                      // 0x0484(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0488(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapAnimalAnimInstance");
		return ptr;
	}


	void InitializeAnimation();
};


// Class Arise.MapEffect
// 0x0000 (0x0328 - 0x0328)
class AMapEffect : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapEffect");
		return ptr;
	}

};


// Class Arise.MapFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UMapFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapFunctionLibrary");
		return ptr;
	}


	void STATIC_RefMapOrderDatabase(const struct FSoftObjectPath& refAsset, TArray<struct FMapOrder>* resDatabase);
	struct FString STATIC_PerseMapName(const struct FString& LevelPathName);
	void STATIC_OpenWorldMapEditor();
	void STATIC_OpenPassBlockEditor();
	void STATIC_OpenMapLocatorEditor();
	void STATIC_OpenMapLinkEditor();
	bool STATIC_K2_IsDevelopmentMapOrderLevelExists(class UObject* WorldContextObject, const struct FString& MapName);
	bool STATIC_IsTownMap(const struct FString& LocationName);
	bool STATIC_IsSatisfyScenarioConditionAtFastTravelPoint(const struct FString& LocatorName);
	bool STATIC_IsClearedMap(const struct FString& MapName);
	bool STATIC_IsActorAnyAffiliationLevel(class AActor* Actor, TArray<struct FName> LevelNames);
	bool STATIC_IsActorAffiliationLevel(class AActor* Actor, const struct FName& LevelName);
	class UWorldMapDatabase* STATIC_GetWorldmapDatabase();
	bool STATIC_GetRerootMapLinkPosition(const struct FString& srcMap, const struct FString& locName, const struct FVector& playerPos, struct FVector* maplinkpos);
	bool STATIC_GetMapStruct(const struct FString& MapNames, struct FMapName* oMapStruct);
	struct FString STATIC_GetMapRegion(const struct FString& MapNames);
	void STATIC_GetMapOrderDatabase(class UXmlDatabaseBase* Table, TArray<struct FMapOrder>* SelectedMapOrderArray);
	bool STATIC_GetMapNames(TArray<struct FString>* MapNames);
	class UDataTable* STATIC_GetMapNameDatabase();
	class UMapLocatorDatabase* STATIC_GetMapLoactorDatabase();
	class UMapLinkDatabase* STATIC_GetMaplinkDatabase();
	bool STATIC_GetLocatorUniqueNames(const struct FString& MapName, TArray<struct FString>* mapLocators);
	bool STATIC_GetLocatorNames(const struct FString& MapName, TArray<struct FString>* mapLocators);
	bool STATIC_GetLocationNamesInLevel(const struct FString& LevelName, TArray<struct FString>* mapLocations);
	TArray<float> STATIC_GetGameTimelineByName(const struct FString& AreaName);
	class UFastTravelControlDatabase* STATIC_GetFastTravelControlDatabase();
	void STATIC_GetAllLocatorInWorld(TArray<class AMapLocator*>* OutActors);
	bool STATIC_FindNearestMapLink(const struct FVector& playerPos, const struct FString& srcMap, const struct FString& dstMap, struct FString* NearMapName);
	bool STATIC_FindMapLinkPosition(const struct FVector& playerPos, const struct FString& locName, const struct FString& srcMap, const struct FString& dstMap, struct FVector* maplinkpos);
	bool STATIC_CheckOpenFastTravelPointByScenarioCondition(TArray<struct FString>* openLocations);
};


// Class Arise.MapIconDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UMapIconDatabase : public UXmlDatabaseBase
{
public:
	struct FMapIconDataList                            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapIconDatabase");
		return ptr;
	}

};


// Class Arise.MapLinkDatabase
// 0x0020 (0x01D8 - 0x01B8)
class UMapLinkDatabase : public UXmlDatabaseBase
{
public:
	struct FMapLinkList                                Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapLinkDatabase");
		return ptr;
	}

};


// Class Arise.MapLocatorDatabase
// 0x0020 (0x01D8 - 0x01B8)
class UMapLocatorDatabase : public UXmlDatabaseBase
{
public:
	struct FMapLocatorList                             Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapLocatorDatabase");
		return ptr;
	}


	bool IsEnableIndex_MapLocatorDataArray(int Index);
	bool IsEnableIndex_MapConnectDataArray(int Index);
};


// Class Arise.MapNameDatabase
// 0x0020 (0x01D8 - 0x01B8)
class UMapNameDatabase : public UXmlDatabaseBase
{
public:
	struct FMapNameData                                Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapNameDatabase");
		return ptr;
	}

};


// Class Arise.MapOrderAssetDatabase
// 0x0020 (0x01D8 - 0x01B8)
class UMapOrderAssetDatabase : public UXmlDatabaseBase
{
public:
	struct FMapOrderAsset                              Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapOrderAssetDatabase");
		return ptr;
	}

};


// Class Arise.MapOrderManager
// 0x0080 (0x03A8 - 0x0328)
class AMapOrderManager : public AActor
{
public:
	TArray<struct FMapOrderUser>                       MapOrderUsers;                                            // 0x0328(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TMap<EMapOrderType, struct FName>                  MapOrderTypeMap;                                          // 0x0338(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    EventShowMap;                                             // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnloadStart;                                            // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapOrderManager");
		return ptr;
	}


	void STATIC_SortPriority(const struct FMapOrderUser& MapOrderUser, TArray<int> Priority, struct FMapOrderUser* SortedUser);
	void ShowMap_Internal(bool bShow, const struct FString& MapName, bool bBattleScene, bool bIgnoreAlwaysShow);
	void IsNeedCurrentScene(EMapOrderType MapOrderType, bool bCurrentBattleScene, bool* bNeed);
	void IsMapVisibled_Internal(const struct FString& MapName, bool bBattleScene, EMapOrderManager_MapVisibledResult* Result, struct FName* LevelNameOnError);
	void IsLoadMapOrderType(EMapOrderType iType, bool* IsLoad);
	bool IsChangeMapOrder(TArray<struct FMapOrder> MapOrderDatabase, int oldSceCounter, int newSceCounter);
	void GetMapOrderDatabaseAssetPath(const struct FString& MapName, bool Full, struct FString* Path, bool* bValid);
	void FindMapOrderUser(const struct FString& MapName, bool* bFound, struct FMapOrderUser* User);
	void DeleteGabageMap(TArray<struct FName> GabageMaps);
	void CleanupUser();
	void BPE_DoCleanup();
	void AnalyzeDatabase(TArray<struct FMapOrder> MapOrderDatabase, struct FMapOrderUser* MapOrderUser, TArray<struct FString>* LevelPath, TArray<int>* Priority);
};


// Class Arise.LureNote
// 0x0030 (0x0358 - 0x0328)
class ALureNote : public AActor
{
public:
	TArray<struct FStrLureNote>                        LureNote;                                                 // 0x0328(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<struct FStrLureNoteTimer>                   NoteTimeLine;                                             // 0x0338(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	float                                              StartWaitTime;                                            // 0x0348(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimelineLength;                                           // 0x034C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentTimelineLength;                                    // 0x0350(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentNoteId;                                            // 0x0354(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.LureNote");
		return ptr;
	}


	void UpdateTimline(float Tick);
	void RestartTimline();
	bool CreateLureNote(const struct FString& LureNoteDatatable, float inStartWaitTime, float inTimelineLength);
};


// Class Arise.MathLibrary
// 0x0000 (0x0028 - 0x0028)
class UMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MathLibrary");
		return ptr;
	}


	void STATIC_SwapFloat(float Value1, float Value2, float* Return1, float* Return2);
	void STATIC_ShuffleArrayBySeed(TArray<int> TargetArray, int ShuffleSeed);
	void STATIC_RangeXYVector(const struct FVector& Value, const struct FVector& Range, struct FVector* Left, struct FVector* Right);
	void STATIC_PointInFan(const struct FVector& Point, const struct FVector& FanCenter, float FanRadius, float FanAngle, const struct FVector& FanVector, bool* In);
	bool STATIC_IsProtrudesXYVector(const struct FVector& Value, const struct FVector& Left, const struct FVector& Right);
	bool STATIC_IsInsideXYVector(const struct FVector& Point, const struct FVector& Min, const struct FVector& Max);
	struct FVector STATIC_ClampXYVector(const struct FVector& Value, const struct FVector& Min, const struct FVector& Max);
	void STATIC_ActorInFan(class AActor* Actor, const struct FVector& FanCenter, float FanRadius, float FanAngle, const struct FVector& FanVector, bool* In);
};


// Class Arise.MenuAccessorySupport
// 0x0000 (0x0028 - 0x0028)
class UMenuAccessorySupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuAccessorySupport");
		return ptr;
	}


	void STATIC_UpdateAccessorySkillFilter();
	void STATIC_SynthesisExecute(int BaseUniqueID, TArray<int>* TargetIDList);
	void STATIC_SynthesisAutoSelect(int BaseUniqueID, int ItemType, int PrioritySlot, TArray<int>* SelectList);
	void STATIC_SortSynthesisItemList(int BaseUniqueID, int SortType, TArray<int>* UniqueIDList);
	void STATIC_SortSynthesisBaseList(int SortType, TArray<int>* UniqueIDList);
	void STATIC_SortAccessoryTransferData(int SortType, TArray<int>* InOutData);
	void STATIC_SortAccessoryMaterial(int SortType, TArray<int>* UniqueIDList);
	void STATIC_SortAccessoryIntensifyData(int SortType, TArray<struct FMenuAccessorySelectItem>* InOutData);
	void STATIC_SkillFilterAccessoryItem(TArray<struct FMenuAccFilterData>* FilterList, TArray<int>* UniqueIDList, TArray<int>* FilterIDList);
	bool STATIC_MakeAccessory(const struct FMenuAccessoryRecipeData& RecipeData, int MaterialID, int* MakeUniqueID);
	bool STATIC_IsMakeAccessory(const struct FMenuAccessoryRecipeData& RecipeData, bool TutorialMode, int* ErrorType);
	void STATIC_GetTargetMaterialList(int ItemID, TArray<int>* UniqueIDList);
	void STATIC_GetSynthesisEraseSkill(int BaseUniqueID, TArray<int>* SelectList, TArray<struct FItemAbilityWorkData>* EraseList);
	void STATIC_GetSynthesisBase(int BaseType, TArray<int>* UniqueIDList);
	void STATIC_GetSynthesisAddItem(int BaseUniqueID, int ItemType, TArray<int>* UniqueIDList);
	void STATIC_GetSkillText(int SkillID, struct FModifiedText* SkillText, struct FModifiedText* ExpText);
	void STATIC_GetRecipeDataList(TArray<struct FMenuAccessoryRecipeData>* outList);
	void STATIC_GetPreviewExpNum(int UniqueId, int AddExp, struct FMenuAccessoryExpData* OldExp, struct FMenuAccessoryExpData* PreviewExp);
	void STATIC_GetMaterialTypeList(int MaterialType, TArray<int>* UniqueIDList);
	void STATIC_GetMaterialItemBaseSkill(int ItemID, int* OutSkillID);
	void STATIC_GetAccessorySkillTypeList(int ListType, bool LvMaxSkip, bool TransferList, bool NoSkillSkip, TArray<int>* UniqueIDList);
	void STATIC_GetAccessorySkillText(int ItemID, int UniqueId, TArray<struct FModifiedText>* SkillText, TArray<struct FModifiedText>* ExpText);
	void STATIC_GetAccessorySkillID(int UniqueId, int slotno, int* OutSkillID);
	void STATIC_GetAccessorySkillFilterList(TArray<struct FMenuAccFilterData>* FilterList);
	void STATIC_GetAccessoryRecipeSkillTypeList(int ListType, TArray<struct FMenuAccessoryRecipeData>* outList);
	void STATIC_GetAccessoryRecipe(int BaseItemID, struct FMenuAccessoryRecipeData* OutRecipe);
	void STATIC_GetAccessoryRank(int UniqueId, int* Rank);
	void STATIC_GetAccessoryOpenSkillLevel(int UniqueId, int* OpenLevel);
	void STATIC_GetAccessoryMaxLvList(int ListType, TArray<struct FMenuAccessorySelectItem>* outList);
	void STATIC_GetAccessoryMakePreviewData(int MaterialItemID, int* OutRank, int* OutNextExp);
	void STATIC_GetAccessoryIntensifyList(int BaseUniqueID, int ItemType, TArray<struct FMenuAccessorySelectItem>* OutUniqueList);
	void STATIC_Debug_AddTestMaterialData();
	void STATIC_Debug_AddTestAccessoryData();
	float STATIC_CalcAccessoryPlusValue(struct FItemAbilityWorkData* AbilityData);
	void STATIC_CalcAccessoryExp(int BaseAccessoryID, TArray<int>* UniqueIDList, int* OutExp, int* OutGald);
	void STATIC_AddAccessoryExp(int UniqueId, int AddExp);
	bool STATIC_AccessorySkillTranslation(int BaseUniqueID, int BaseSlotIndex, int TransUniqueID, int TransSlotIndex);
};


// Class Arise.MenuActionStateBase
// 0x0008 (0x0030 - 0x0028)
class UMenuActionStateBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuActionStateBase");
		return ptr;
	}


	void K2_Tick(float DeltaSeconds, struct FName* NextState, bool* Restart);
	void K2_End(const struct FName& NextState);
	void K2_Begin(const struct FName& PrevState);
	class AMenuCharacter* GetOwnerCharacter();
};


// Class Arise.MenuAnimInstance
// 0x0040 (0x05A0 - 0x0560)
class UMenuAnimInstance : public UAriseAnimInstance
{
public:
	int                                                CharacterID;                                              // 0x0560(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0564(0x0004) MISSED OFFSET
	struct FString                                     NowStateName;                                             // 0x0568(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              AnimationTime;                                            // 0x0578(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MotionType;                                               // 0x057C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class AMenuCharacter*                              Model;                                                    // 0x0580(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MotionNo;                                                 // 0x0588(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsAppend;                                                 // 0x058C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x058D(0x0003) MISSED OFFSET
	int                                                SkipType;                                                 // 0x0590(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DLCType;                                                  // 0x0594(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0598(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuAnimInstance");
		return ptr;
	}


	void UpdateMotion();
	void OnVisible();
};


// Class Arise.MenuArenaSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuArenaSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuArenaSupport");
		return ptr;
	}


	void STATIC_MakeArenaRematchTimeText(int TimeData, struct FModifiedText* ModText);
	void STATIC_GetMenuPartyMemberID(TArray<EArisePartyID>* PartyList);
	void STATIC_GetMenuArenaPlayTime(int* Hour, int* Min, int* Sec);
	void STATIC_GetMenuArenaOpenList3(EArisePartyID PartyId, TArray<struct FName> FixDlcIDList, TArray<struct FName> RemoveDlcIDList, TArray<struct FMenuArenaData2>* OutData);
	void STATIC_GetMenuArenaOpenList2(EMenuArenaCategory ViewCategory, EArisePartyID PartyId, TArray<struct FMenuArenaData2>* OutData);
	void STATIC_GetMenuArenaOpenList(EMenuArenaCategory ViewCategory, EArisePartyID PartyId, TArray<struct FMenuArenaData>* OutData);
	void STATIC_GetArenaRematchTime(int ID, int* TimeData);
	void STATIC_CheckArenaType(const struct FString& MatchLabel, EArisePartyID* CharengerID, bool* Find, struct FName* DlcName);
};


// Class Arise.MenuArtsMovieDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UMenuArtsMovieDatabase : public UXmlDatabaseBase
{
public:
	struct FArtsMovieList                              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuArtsMovieDatabase");
		return ptr;
	}

};


// Class Arise.MenuArtsSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuArtsSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuArtsSupport");
		return ptr;
	}


	void STATIC_TestArtsGet_ARI();
	void STATIC_Test_AllArtsGet(EArisePartyID ID);
	void STATIC_SetOperateType(EOperationMode Mode);
	void STATIC_SetEquipArtsList(int CharacterID, EMenuArtsType ArtsType, const struct FName& ArtsLabel, int SlotIndex, int PageIndex);
	void STATIC_SetArtsUsableFlag(int CharacterID, const struct FName& ArtsLabel, bool UsableFlag);
	bool STATIC_IsOperateCharacter(int CharacterID);
	void STATIC_GetPlayerIDList(TArray<int>* IDList);
	EOperationMode STATIC_GetOperateType();
	void STATIC_GetMultiTargetArtsList(TArray<struct FName>* outList);
	void STATIC_GetMenuLearnTypeText(int CharacterID, const struct FName& ArtsLabel, struct FDictionaryText* OutText, bool* IsValid);
	EMenuArtsType STATIC_GetMenuArtsType(const struct FName& ArtsLabel);
	void STATIC_GetMenuArtsDataKPI(int CharacterID, struct FMenuArtsKPIData* CheckData);
	void STATIC_GetLearningArtsList(int CharacterID, EMenuArtsType ArtsType, TArray<struct FName>* outList);
	void STATIC_GetEquipArtsList(int CharacterID, EMenuArtsType ArtsType, int PageIndex, TArray<struct FName>* outList);
	bool STATIC_GetArtsUsableFlag(int CharacterID, const struct FName& ArtsLabel);
	EMenuArtsPositionType STATIC_GetArtsTypeIconValue(const struct FName& ArtsLabel);
	void STATIC_GetArtsPageNameText(int PageIndex, struct FDictionaryText* OutText);
	void STATIC_GetArtsName(const struct FName& ArtsLabel, struct FDictionaryText* OutText);
	void STATIC_GetArtsMoviePath(const struct FName& ArtsLabel, struct FSoftObjectPath* MoviePath);
	void STATIC_GetArtsDetail(int CharacterID, const struct FName& ArtsLabel, struct FMenuArtsDetail* OutDetail);
	void STATIC_DBM_UI_ArtsRegistSetup();
	void STATIC_CheckMenuDerivedArts(int CharacterID, const struct FName& ArtsLabel, EMenuArtsParentType* Type, struct FName* DerivedLabel);
	void STATIC_CheckMenuBattleUsableArts(int CharacterID, const struct FName& ArtsLabel, bool* Usable);
	void STATIC_CheckMenuArtsDataKPI(struct FMenuArtsKPIData* CheckData);
};


// Class Arise.MenuCampDatabase
// 0x00D0 (0x0288 - 0x01B8)
class UMenuCampDatabase : public UXmlDatabaseBase
{
public:
	struct FMenuCampData                               Database;                                                 // 0x01B8(0x00D0) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuCampDatabase");
		return ptr;
	}

};


// Class Arise.MenuCampEventActor
// 0x0008 (0x0330 - 0x0328)
class AMenuCampEventActor : public AActor
{
public:
	class UEventComponent*                             EventComponent;                                           // 0x0328(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuCampEventActor");
		return ptr;
	}


	void GetEventComponent(class UEventComponent** Event);
};


// Class Arise.MenuCampSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuCampSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuCampSupport");
		return ptr;
	}


	void STATIC_UpdateUseCampPoint(const struct FString& CampID);
	void STATIC_UpdateCampFavoriteEventTime();
	void STATIC_StopMenuShortChat(class AShortChatManager* Manager);
	void STATIC_SpawnCampCommonEventActor(EArisePartyID PartyId, class AMenuCampEventActor** EventActor, struct FString* PlayLabel);
	void STATIC_SetWidgetTickEnabled(class UUserWidget* TargetWidget, bool Enabled);
	void STATIC_SetCampShortchatReadFlag(const struct FString& SCLabel);
	void STATIC_SetCampFavoriteWaitTime(int Minute);
	void STATIC_SetCampBGWidget(class UUserWidget* Widget);
	void STATIC_RequestFinishCampShortChat(EArisePartyID PartyId);
	void STATIC_MenuDebug_AllOpenMovie(const struct FString& MovieDBPath);
	void STATIC_MenuDebug_AllOpenLongchat();
	bool STATIC_IsCampSCTalk();
	bool STATIC_IsAnyPartyMember();
	EArisePartyID STATIC_GetRandomPartyMember();
	void STATIC_GetMenuInnData(const struct FString& InnLabel, struct FInnData* OutData);
	void STATIC_GetMenuCampRecollectionData(int Type, const struct FString& MovieDBPath, TArray<struct FMenuCampRecollectData>* InOutData);
	void STATIC_GetCommonEventHiddenLevelList(const struct FString& CampArea, TArray<struct FString>* LevelList);
	void STATIC_GetCampWaitShortchatList(const struct FString& CampArea, TArray<struct FString>* SCLabelList);
	bool STATIC_GetCampTalkShortChat(const struct FString& CampActorID, struct FString* SCLabel);
	bool STATIC_GetCampSleepShortchatList(EArisePartyID PartyId, const struct FString& PrevEvent, struct FString* OutLabel);
	bool STATIC_GetCampShortchatList(EArisePartyID PartyId, const struct FString& PrevEvent, TArray<struct FString>* SCLabel);
	bool STATIC_GetCampPatternShortChat(const struct FString& Pattern, struct FString* SCLabel);
	bool STATIC_GetCampLCShortChat(EArisePartyID PartyId, struct FString* OutLabel);
	float STATIC_GetCampFirstWaitTime();
	bool STATIC_GetCampFirstCampPointShortChat(const struct FString& CampActorID, struct FString* SCLabel);
	bool STATIC_GetCampFirstCameraShortChat(EArisePartyID PartyId, struct FString* SCLabel);
	int STATIC_GetCampFavoriteWaitTime();
	void STATIC_GetCampFavoriteEventName(EArisePartyID PartyId, int Rank, struct FString* OutName);
	bool STATIC_GetCampFavorabilityEventNames(TArray<struct FString>* EventNames);
	void STATIC_GetCampFadeTime(const struct FString& Label, float* FadeTime);
	bool STATIC_GetCampCommonEventNames(TArray<struct FString>* EventNames);
	class UUserWidget* STATIC_GetCampBGWidget();
	EArisePartyID STATIC_GetCameraCharacter(const struct FString& CampID, const struct FString& CameraPrisetName);
	void STATIC_CheckFavorabilityAchievement(EArisePartyID PartyId);
	void STATIC_CheckCampStartupLongchat(const struct FString& CampAreaID, struct FString* LongchatName);
	bool STATIC_CheckCampLongchatAlias(const struct FString& LongchatName, EArisePartyID* PartyId, struct FString* AliasLabel);
	int STATIC_CheckCampFavoriteEvent(EArisePartyID PartyId, int AddPoint);
	void STATIC_CheckCampAfterLongchat(struct FString* LongchatName);
	void STATIC_CampFinishShortchatRequest(EArisePartyID PartyId);
};


// Class Arise.MenuCharacter
// 0x00B0 (0x0950 - 0x08A0)
class AMenuCharacter : public AAriseCharacterBase
{
public:
	struct FString                                     ModelID;                                                  // 0x08A0(0x0010) (Edit, ZeroConstructor)
	class UAriseCharacterBuildComponent*               CharacterBuildComponent;                                  // 0x08B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	bool                                               IsStatusScene;                                            // 0x08B8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x97];                                      // 0x08B9(0x0097) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuCharacter");
		return ptr;
	}


	void SetWeaponVisibility(bool Visible);
	void SetVisualWeaponVisibility(bool Visible);
	void SetupFacial();
	void SetStatusSceneFlag(bool Flag);
	void SetSceneType(EMenuModelPositionSaveType MotionType);
	void SetMotionNo(int MotionNo);
	void SetLocationWithActor(class AActor* BaseActor, const struct FVector& Location);
	void SetFacialData(const struct FString& ID, const struct FString& Name);
	void SetAnimationBP(class UClass* AnimInstance, int Type, int No);
	void ReleaseDirectLoadMesh();
	void PrevMotion();
	void NextMotion();
	void MotionCommand(const struct FString& Command, bool Force);
	bool LoadModelID(EArisePartyID TargetID, bool BlockLoad, int ItemID);
	bool LoadModel_VisualItemSelect(EArisePartyID TargetID, bool BlockLoad, TArray<int>* ItemIDList, TArray<int>* VariationList);
	bool LoadModel_ItemSelect(EArisePartyID TargetID, bool BlockLoad, TArray<int>* ItemIDList);
	bool LoadModel_DLC(EArisePartyID TargetID, int CostumeID, int HairID, int Attachment1, int Attachment2, int WeaponID, bool BlockLoad);
	bool LoadModel_Direct(const struct FString& TargetModelID, const struct FString& WeaponID);
	bool LoadModel(const struct FString& TargetModelID, bool BlockLoad);
	bool LoadAsset(EArisePartyID TargetID, const struct FString& FullPath, const struct FString& MotionPath);
	struct FName K2_GetMenuActionState();
	void K2_ChangeActionState(const struct FName& NewStateID, bool Restart);
	void K2_AddMenuActionStateTable(class UDataTable* DataTable);
	void K2_AddMenuActionState(const struct FName& StateId, class UClass* StateClass);
	EMenuModelPositionSaveType GetSceneType();
	EArisePartyID GetPartyId();
	int GetNowMotionNo();
	int GetInvisibleCount();
	void FacialCheck();
	void CheckAnimationWeaponVisible(class UAriseAnimInstance* AnimInstance);
	bool CheckActionButtonEnable();
	bool ChangeWeaponModel_DLC(int ItemID);
	bool ChangeWeaponModel(int ItemID);
	bool ChangeHairModel_DLC(int ItemID);
	bool ChangeHairModel(int ItemID);
	bool ChangeBodyModel_DLC(int ItemID);
	bool ChangeBodyModel(int ItemID);
	bool ChangeAttachment_DLC(int Index, int ItemID, int Variation);
	bool ChangeAttachment(int Index, int ItemID, int Variation);
};


// Class Arise.MenuCharacterManager
// 0x0048 (0x0070 - 0x0028)
class UMenuCharacterManager : public UObject
{
public:
	TArray<struct FMenuModelData>                      ModelData;                                                // 0x0028(0x0010) (ZeroConstructor)
	class APlayerController*                           OwnerPlayer;                                              // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class ACameraActor*                                MainCamera;                                               // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x21];                                      // 0x0048(0x0021) MISSED OFFSET
	EMenuModelPositionSaveType                         ModelPositionType;                                        // 0x0069(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x006A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuCharacterManager");
		return ptr;
	}


	void UpdateStatus(float UpdateTime);
	void UpdateCharacter_VisualItem(EArisePartyID PartyId, bool BlockLoad, TArray<int>* ItemIDList, TArray<int>* VariationList);
	void UpdateCharacter_PartyID(EArisePartyID PartyId, bool BlockRead, int WeaponID);
	void UpdateCharacter_Item(EArisePartyID PartyId, bool BlockLoad, TArray<int>* ItemIDList);
	void UpdateCharacter_DLC(EArisePartyID PartyId, int CostumeID, int HairID, int AttachmentID1, int AttachmentID2, int WeaponID);
	void UpdateCharacter(const struct FString& CharacterID, bool BlockRead);
	void STATIC_SortModelList(EMenuTopModelSortType SortType, TArray<class AMenuCharacter*>* ModelList);
	void SetWeaponVisibility(const struct FString& CharacterID, bool Visibility);
	void STATIC_SetShadowScaleParam(class UMaterialParameterCollection* ParameterCollection, float Param);
	void SetFlameSwordVisibility(bool Visible);
	void ReleaseAll();
	bool LoadPartyOrder(int Order, int WeaponID);
	bool LoadPartyID(EArisePartyID TargetID, int WeaponID);
	bool LoadDLC(EArisePartyID TargetID, int CostumeID, int HairID, int AttachmentID1, int AttachmentID2, int WeaponID);
	bool LoadDirect(EArisePartyID TargetID, const struct FString& ModelID, const struct FString& WeaponID);
	bool LoadCharacterID(const struct FString& CharacterID, int WeaponID);
	bool LoadAsset(EArisePartyID TargetID, const struct FString& FullPath, const struct FString& MotionPath);
	bool IsModelLoad();
	bool IsLoadComplete_PartyID(EArisePartyID PartyId);
	bool IsLoadComplete();
	void Initialize(class APlayerController* Player, EMenuModelPositionSaveType PositionType);
	class AMenuCharacter* GetCharacter_PartyID(EArisePartyID PartyId);
	class AMenuCharacter* GetCharacter_Order(int PartyOrder);
	class AMenuCharacter* GetCharacter_ID(const struct FString& CharacterID);
	class UMenuCharacterManager* STATIC_CreateMenuModelManager();
	bool ChangeWeaponModel(EArisePartyID PartyId, int ItemID, bool DLCMode);
	bool ChangeHairModel(EArisePartyID PartyId, int ItemID, bool DLCMode);
	bool ChangeBodyModel(EArisePartyID PartyId, int ItemID, bool DLCMode);
	bool ChangeAttachment(EArisePartyID PartyId, int Index, int ItemID, int Variation, bool DLCMode);
	void AppendMortion_Model(class AMenuCharacter* TargetModel, EMenuModelMotionType MotionType);
	void AppendMortion();
};


// Class Arise.MenuCommonFunction
// 0x0000 (0x0028 - 0x0028)
class UMenuCommonFunction : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuCommonFunction");
		return ptr;
	}


	void STATIC_UpdateArenaClearTime(const struct FName& Label, float ClearTime);
	void STATIC_Sub64(int BaseU, int BaseL, int SubU, int SubL, int RetL, int* RetU);
	void STATIC_SetCameraColor(class UCameraComponent* CameraComponent, const struct FVector& ColorData);
	void STATIC_ResetGarbageCollectionBaseline();
	void STATIC_PostEventAtMenu(const struct FString& EventName, const struct FVector& Location, class UObject* WorldContextObject, bool bAutoDestory);
	TMap<struct FName, int> STATIC_MergeInputMap(TMap<struct FName, int> iMap1, TMap<struct FName, int> iMap2);
	struct FString STATIC_MakeItemPictureTag(int ItemID);
	bool STATIC_IsAlphenMasked();
	int STATIC_GetPlayerIconIndex(EArisePartyID PartyId);
	struct FDictionaryText STATIC_GetPCNameStatic(EArisePartyID PartyId);
	struct FDictionaryText STATIC_GetPCNameDynamic(EArisePartyID PartyId);
	void STATIC_GetPanelWidgetChildList(class UPanelWidget* Panel, TArray<class UWidget*>* WidgetList);
	class UWidget* STATIC_GetOwnerWidget(class UWidget* Target);
	float STATIC_GetMenuCancelDisableTime();
	class ULevel* STATIC_GetLoadedLevel(class ULevelStreaming* StreamLevel);
	class AActor* STATIC_GetLevelScriptActor(class ULevelStreaming* StreamLevel);
	float STATIC_GetLastRenderTime(class AActor* Target);
	int STATIC_GetItemIconNo(int ItemID);
	void STATIC_GetInputConfigData(const struct FName& Label, struct FInputData* InputData);
	void STATIC_GetGuideLabelListKeyboard(int iCategory, TArray<struct FName>* aNameList);
	void STATIC_GetCustomizeLabelListKeyboard(int iCategory, TArray<struct FName>* aNameList);
	void STATIC_DoGarbageCollectionIfNeed();
	void STATIC_DisableSlateNavigation(bool isDisable);
	void STATIC_Debug_GetMenuIDList(TArray<struct FString>* IDList);
	void STATIC_Add64(int BaseU, int BaseL, int AddU, int AddL, int RetL, int* RetU);
};


// Class Arise.MenuCookSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuCookSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuCookSupport");
		return ptr;
	}


	void STATIC_OpenCookRecipeLabel(const struct FString& Label);
	void STATIC_OpenCookRecipe(int RecipeID);
	void STATIC_MenuCookExecute2(EArisePartyID CharacterID, int RecipeID, bool NoItem, EArisePartyID* SkillTarget);
	void STATIC_MenuCookExecute(EArisePartyID CharacterID, const struct FMenuKitchenData& Kitchen, int RecipeID, int CookNum);
	void STATIC_MenuCookCheckEffect(int RecipeID, EArisePartyID CharacterID, const struct FMenuKitchenData& Kitchen, bool* Effect1, bool* Effect2);
	void STATIC_IsValidRecipeLabel(const struct FString& Label, bool* Valid);
	void STATIC_IsValidRecipe(int RecipeID, bool* Valid);
	bool STATIC_IsOpenAnyCookRecipe();
	bool STATIC_IsMenuCookExecute2(int RecipeID, EArisePartyID CharacterID);
	int STATIC_IsMenuCookExecute(int RecipeID);
	void STATIC_GetMenuKitchenData(const struct FString& KitchenStr, struct FMenuKitchenData* OutData);
	void STATIC_GetMenuInnCookIDList(const struct FString& InnLabel, int CookCategory, TArray<struct FMenuInnRecipeData>* outList);
	void STATIC_GetMenuCookSkillLabel_Label(const struct FString& RecipeLabel, EArisePartyID CharacterID, struct FString* Skill1, struct FString* Skill2, float* SkillTime);
	void STATIC_GetMenuCookSkillLabel2(int RecipeID, TArray<EArisePartyID>* IDList, TArray<struct FModifiedText>* SkillText, float* SkillTime);
	void STATIC_GetMenuCookSkillLabel(int RecipeID, EArisePartyID CharacterID, struct FString* Skill1, struct FString* Skill2, float* SkillTime);
	void STATIC_GetMenuCookRecipeIDList(int CookCategory, TArray<int>* outList);
	int STATIC_GetMenuCookRecipeID(int ItemID);
	void STATIC_GetMenuCookRecipe(int RecipeID, struct FMenuCookItemData* CookRecipe);
	void STATIC_GetMenuCookPlayerStatus(TArray<struct FMenuCookPlayerStatus>* OutStatus);
	void STATIC_GetMenuCookLongchatName(int RecipeID, EArisePartyID CharacterID, TArray<struct FString>* NameList);
	void STATIC_GetMenuCookEndLongchatName(int RecipeID, EArisePartyID CharacterID, struct FString* LongchatName);
	void STATIC_GetMenuCookEffectText(int ItemID, TArray<struct FModifiedText>* OutText);
	void STATIC_GetCookTutorialText(int Step, struct FModifiedText* OutTitle, struct FModifiedText* OutExpText);
	void STATIC_GetCookSkillEffectText(int RecipeID, EArisePartyID SkillCharaID, bool AfterEffect, struct FModifiedText* OutText, int* ColorType, int* EffectTime, int* TimeColor);
	void STATIC_GetCookRecipe_Label(const struct FString& Label, struct FCookingRecipe* CookRecipe);
	void STATIC_GetCookRecipe(int RecipeID, struct FCookingRecipe* CookRecipe);
	void STATIC_GetCookCharacterSkillText(int CharacterID, struct FModifiedText* OutText);
	void STATIC_Debug_GetRecipeList(TArray<struct FString>* LabelList);
	bool STATIC_CheckInnCookSkill(int RecipeID, EArisePartyID CharacterID);
};


// Class Arise.MapPointHelper
// 0x00C8 (0x00F0 - 0x0028)
class UMapPointHelper : public UObject
{
public:
	TMap<int, struct FMapPoinWidgetData>               PointWidgetArray;                                         // 0x0028(0x0050) (BlueprintVisible, ZeroConstructor)
	TArray<class UUserWidget*>                         LineWidgetArray;                                          // 0x0078(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	int                                                SelectedID;                                               // 0x0088(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsActive;                                                 // 0x008C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    ActivateDelegate;                                         // 0x0090(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SelectedProcedure;                                        // 0x00A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ShowAnimationDelegate;                                    // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    HideAnimationDelegate;                                    // 0x00C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RefreshWidgetsDelegate;                                   // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     debugStr;                                                 // 0x00E0(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MapPointHelper");
		return ptr;
	}


	void ShowWidgets(bool bWithAnimation);
	bool SelectValid();
	void Select(int iNewIndex);
	void RegistPointWidget(class UClickableWidgetBase* iWidget, int UniqueId);
	void RegistLineWidget(class UUserWidget* iWidget, int UniqueId);
	void RefreshWidgets();
	void Refresh();
	void Initialize();
	void HideWidgets(bool bWithAnimation);
	bool DefaultPadControl(class AMenuPadProcess* PadProcess, float AxisX, float AxisY, float Margin, float Weight);
	class UMapPointHelper* STATIC_CreateInstance();
	void Clear();
	void Activate(bool sw);
};


// Class Arise.AriseMenuDlcTssSlotData
// 0x00B0 (0x00D8 - 0x0028)
class UAriseMenuDlcTssSlotData : public UDlcTssSlotData
{
public:
	int                                                slotno;                                                   // 0x0028(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Region;                                                   // 0x002C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                use;                                                      // 0x0030(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Language;                                                 // 0x0034(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET
	int                                                DataSize;                                                 // 0x0048(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<unsigned char>                              SlotBinaryDataBuffer;                                     // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FString                                     SlotStringDataBuffer;                                     // 0x0060(0x0010) (BlueprintVisible, ZeroConstructor)
	int                                                TssRespcode;                                              // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<unsigned char>                              SlotBinaryTArray;                                         // 0x0078(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x50];                                      // 0x0088(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseMenuDlcTssSlotData");
		return ptr;
	}


	TArray<unsigned char> GetSlotBinaryDataBuffer();
	void ConvertSlotDataTSharedToTArray();
	void CompleteLoadBinary(int tssslotno, TArray<unsigned char> Buf);
};


// Class Arise.AriseMenuDlcTssSlotDataLoader
// 0x0090 (0x00B8 - 0x0028)
class UAriseMenuDlcTssSlotDataLoader : public UObject
{
public:
	int                                                DlcTopInfoSlotNo;                                         // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                DlcNeutralInfoSlotNo;                                     // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                DlcNoticeInfoSlotNo;                                      // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                DlcPreviewInfoSlotNo;                                     // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	class UAriseMenuDlcTssSlotData*                    TopInfoSlot;                                              // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAriseMenuDlcTssSlotData*                    NeutralInfoSlot;                                          // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAriseMenuDlcTssSlotData*                    NoticeInfoSlot;                                           // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAriseMenuDlcTssSlotData*                    PreviewInfoSlot;                                          // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnDlcTopInfoLoadOnly;                                     // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDlcTopInfoLoad;                                         // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDlcNeutralInfoLoad;                                     // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDlcNoticeInfoLoad;                                      // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDlcPreviewInfoLoad;                                     // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDlcTSSLoadError;                                        // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseMenuDlcTssSlotDataLoader");
		return ptr;
	}


	void SetupDlcTSSLoadError();
	void LoadDlcTopInfoOnly(int slotno);
	void LoadDlcTopInfo(int slotno);
	void LoadCompleteDlcTopOnly(int slotno, const struct FString& DlcTopInfoString);
	void LoadCompleteDlcTop(int slotno, const struct FString& DlcTopInfoString);
	void LoadCompleteDlcPreview(int slotno, const struct FString& DlcPreviewInfoString);
	void LoadCompleteDlcNotice(int slotno, const struct FString& DlcNoticeInfoString);
	void LoadCompleteDlcNeutral(int slotno, const struct FString& DlcNeutralInfoString);
	void DlcTSSLoadError(int slotno, int respcode);
	void AriseDlcTSSLoadErrorDelegate__DelegateSignature(int slotno, int ErrorRespCode);
	void AriseDlcTopInfoLoadDelegate__DelegateSignature(const struct FAriseMenuDlcInfoTop& DataBuffer);
	void AriseDlcPreviewInfoLoadDelegate__DelegateSignature(const struct FAriseMenuDlcPreviewData& DataBuffer);
	void AriseDlcNoticeInfoLoadDelegate__DelegateSignature(const struct FAriseMenuNoticeArray& DataBuffer);
	void AriseDlcNeutralInfoLoadDelegate__DelegateSignature(const struct FAriseMenuDlcNeutraData& DataBuffer);
};


// Class Arise.TssSlotDataSupport
// 0x0178 (0x01A0 - 0x0028)
class UTssSlotDataSupport : public UObject
{
public:
	unsigned char                                      UnknownData00[0x148];                                     // 0x0028(0x0148) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBinaryLoadCompleteEventDispather;                       // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStringLoadCompleteEventDispather;                       // 0x0180(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTSSLoadErrorEventDispather;                             // 0x0190(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TssSlotDataSupport");
		return ptr;
	}


	void RemoveSlotData();
	struct FString GetStringSlotDataInfo(int slotno);
	TArray<unsigned char> GetBinarySlotDataInfo(int slotno);
};


// Class Arise.MenuDlcSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuDlcSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuDlcSupport");
		return ptr;
	}


	int STATIC_OpenRegionSloData();
	void STATIC_OpenDlcStoreWindow(class UObject* WorldContextObject);
	bool STATIC_IsExistSlotdata(int slotno);
	void STATIC_GetTssStringDataFromUseData(class UAriseMenuDlcTssSlotData* Slot);
	int STATIC_GetTssRegionNo();
	void STATIC_GetTssBinaryDataFromUseData(class UAriseMenuDlcTssSlotData* Slot);
	void STATIC_GetStringDataFromTSSSlot(class UAriseMenuDlcTssSlotData* Slot);
	bool STATIC_GetOpenablePresentFromPresentLabel(const struct FString& PresentLabel);
	struct FAriseMenuDlcRegionInfo STATIC_GetMenuDlcRegionInfo(const struct FString& JsonString);
	struct FAriseMenuDlcInfoTop STATIC_GetMenuDlcInfoTop(const struct FString& JsonString);
	struct FAriseMenuDlcPreviewData STATIC_GetMenuDlcInfoPreview(const struct FString& JsonString);
	TArray<struct FAriseMenuNoticeData> STATIC_GetMenuDlcInfoNotice(const struct FString& JsonString);
	struct FAriseMenuDlcNeutraData STATIC_GetMenuDlcInfoNeutral(const struct FString& JsonString);
	TArray<struct FString> STATIC_GetItemLabelByPresentLabel(const struct FString& PresentLabel);
	EMenuDlcItemCategory STATIC_GetDlcItemCategory(const struct FString& ItemLabel);
	EDLCPresentCategory STATIC_GetDlcCategoryFromPresentLabel(const struct FString& PresentLabel);
	void STATIC_GetBinaryDataFromTSSSlot(class UAriseMenuDlcTssSlotData* Slot);
	void STATIC_ClarRequestQue();
};


// Class Arise.MenuEquipmentSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuEquipmentSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuEquipmentSupport");
		return ptr;
	}


	void STATIC_SetVisualMysetData2(int CharacterID, int slotno, TArray<struct FMenuVisualData>* VisualDataList);
	void STATIC_SetVisualMysetData(int CharacterID, int slotno, TArray<int>* ItemIDList);
	void STATIC_SetItemLock(int ItemID, bool Flag);
	void STATIC_SetEquipMenuEquipDataList(int CharacterID, TArray<int> InItemIDList);
	void STATIC_SetEquipMenuEquipData(int CharacterID, int Index, int InItemID);
	void STATIC_RestoreEXNewVisualData();
	void STATIC_IsVisualAttachmentEquip(int CharacterID, int SlotIndex, struct FMenuVisualData* VisualData, bool* EquipOK);
	bool STATIC_IsItemLock(int ItemID);
	void STATIC_InitDummyItem();
	void STATIC_GetVisualMysetData2(int CharacterID, int slotno, TArray<struct FMenuVisualData>* VisualDataList);
	void STATIC_GetVisualMysetData(int CharacterID, int slotno, TArray<int>* ItemIDList);
	void STATIC_GetVisualListData2(int CharacterID, int SlotIndex, EMenuEquipItemSortType SortType, TArray<struct FMenuVisualData>* ItemList, int* EquipIndex);
	void STATIC_GetVisualListData(int CharacterID, int SlotIndex, EMenuEquipItemSortType SortType, TArray<int>* ItemIDList, int* EquipIndex);
	bool STATIC_GetVisualItemNameData(int ItemID, int Valiation, EArisePartyID PartyId, struct FModifiedText* OutNameData);
	void STATIC_GetStatusGaugeMax(int Level, bool HP, int* OutMax);
	void STATIC_GetMenuSkillText_Label(const struct FString& Label, struct FModifiedText* OutSkillText);
	void STATIC_GetMenuSkillText(int SkillID, struct FModifiedText* OutSkillText);
	void STATIC_GetItemSkillData_ModText(int ItemID, struct FModifiedText* OutSkillExplanation);
	void STATIC_GetItemRandomSkillData_ModText(int ItemID, TArray<struct FModifiedText>* OutSkillExplanation);
	void STATIC_GetItemRandomSkillData(int ItemID, TArray<struct FDictionaryText>* OutSkillExplanation);
	bool STATIC_GetItemNameData(int ItemID, struct FDictionaryText* OutNameData);
	bool STATIC_GetItemExplanationReplacedData(int ItemID, struct FModifiedText* OutExplanationData);
	bool STATIC_GetItemExplanationData(int ItemID, struct FDictionaryText* OutExplanationData);
	void STATIC_GetItemElementType(int ItemID, int* ElementType);
	void STATIC_GetItemDefaultSkill(int ItemID, struct FBtlSkillData* OutData);
	void STATIC_GetEquipVisualDataList(int CharacterID, TArray<struct FMenuVisualData>* OutData);
	void STATIC_GetEquipMenuItemStatus(int CharacterID, TArray<int> EquipItemList, struct FEquipMenuStatus* OutStatus);
	void STATIC_GetEquipMenuEquipDataList(int CharacterID, TArray<int>* OutItemIDList);
	void STATIC_GetEquipMenuEquipData(int CharacterID, int Index, int* OutItemID);
	void STATIC_GetEquipMenuBaseStatus(int CharacterID, bool OnEquipment, struct FEquipMenuStatus* OutStatus);
	void STATIC_GetEquipListData(int CharacterID, int ItemCategory, EMenuEquipItemSortType SortType, TArray<int>* ItemIDList, int* EquipIndex);
	void STATIC_EquipMenuItemSort(EMenuEquipItemSortType SortType, bool IsAccessory, TArray<int>* InOutIDList);
	void STATIC_Debug_VisualTestCall(int ItemID);
	void STATIC_CheckVisualMysetTextColor(int CharacterID, int Type, TArray<bool>* ColorChange);
	bool STATIC_CheckVisualMyset(int CharacterID, int slotno);
	void STATIC_Check_VisualChange_KPI(bool ExNewMode, struct FMenuVisualDataArray* VisualData);
	void STATIC_BackupEXNewVisualData();
};


// Class Arise.MenuCursorNameDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UMenuCursorNameDatabase : public UXmlDatabaseBase
{
public:
	struct FCursorDataCollection                       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuCursorNameDatabase");
		return ptr;
	}

};


// Class Arise.MenuFarmSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuFarmSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuFarmSupport");
		return ptr;
	}


	void STATIC_UpdatePFFarmAnimalTime();
	void STATIC_UpdateFarmData_Plant(int UpdateTimeU, int UpdateTimeL, TArray<struct FMenuFarmUpdateMessage>* OutMessage);
	void STATIC_UpdateFarmData_Animal(int UpdateTimeU, int UpdateTimeL, TArray<struct FMenuFarmUpdateMessage>* OutMessage);
	void STATIC_SetFarmAnimalSlotAnimalNum(int Index, int Num);
	void STATIC_SaveFarmUpdateTime();
	void STATIC_SaleFarmPlantSlot(int Index, int* OutItemID, int* OutSalePrice, int* OutItemNum);
	void STATIC_ResetPFFarmUpdateFlag();
	void STATIC_ResetPFFarmTalkItemTime(int FarmSlotNo, int Index);
	void STATIC_RemovePFFarmMouse(int FarmSlotNo, int Num);
	void STATIC_RemoveFarmSupportAnimalSlot(int Index);
	void STATIC_RemoveFarmAnimalSlot(int Index);
	void STATIC_RegistFarmPlantSlot(int Index, int ItemID, int FertilizerID);
	void STATIC_MakeFarmAnimalSlotData(int Index, int AnimalID);
	void STATIC_InitFarmPlantSlot(int Index);
	void STATIC_InitFarmAnimalFoodData(int Index, int FoodType);
	void STATIC_HarvestFarmPlantSlot(int Index, TArray<struct FFarmFoodstuffResult>* ItemList);
	void STATIC_GetPFFarmAnimal(TArray<struct FPFFarmAnimalData>* Animal);
	void STATIC_GetFarmSupportAnimalSlot(TArray<struct FMenuFarmSupportStockData>* Data);
	bool STATIC_GetFarmShortChatID(EPFAnimalNo AnimalNo, bool GetItem, struct FString* ShortChatID);
	void STATIC_GetFarmShopAnimalData(EFarmAnimalType Type, TArray<struct FMenuFarmAnimalShopData>* Data);
	void STATIC_GetFarmPlantTransferList(TArray<struct FMenuFarmTransferData>* Data);
	void STATIC_GetFarmPlantSlotIndex(int Index, struct FMenuFarmPlantStockData* Data);
	void STATIC_GetFarmPlantSlot(TArray<struct FMenuFarmPlantStockData>* Data);
	void STATIC_GetFarmPlantFertilizerList(TArray<struct FMenuFarmFertilizerData>* Data);
	int STATIC_GetFarmOpenSlotCount();
	void STATIC_GetFarmAnimalText(int AnimalID, struct FModifiedText* OutText, struct FModifiedText* OutExpText);
	void STATIC_GetFarmAnimalSlotIndex(int Index, struct FMenuFarmAnimalStockData* Data);
	void STATIC_GetFarmAnimalSlot(TArray<struct FMenuFarmAnimalStockData>* Data);
	void STATIC_GetFarmAnimalName(int AnimalID, struct FModifiedText* OutText);
	bool STATIC_GetFarmAnimalModelData(const struct FPFFarmAnimalData& AnimalData, struct FString* ModelID, struct FString* AnimSetPath, float* CollisionSize, float* CollisionWidthScale, float* CollisionOffset);
	void STATIC_GetFarmAnimalFoodData(int AnimalID, TArray<struct FMenuFarmFoodData>* FoodData);
	void STATIC_ExecFarmAnimalSale(int Index, int* OutAnimalID, int* OutAnimalNum, int* OutSalePrice);
	void STATIC_ExecFarmAnimalFoodChangeMulti(TArray<int> IndexList, struct FModifiedText* OutText, TArray<struct FFarmFoodstuffResult>* ItemResult);
	void STATIC_ExecFarmAnimalFoodChange(int Index, int* OutItemID, int* OutItemNum);
	void STATIC_Debug_SetFarmPlantTestData();
	void STATIC_Debug_SetFarmAnimalTestData();
	void STATIC_Debug_FarmAnimalGrowthComplete();
	void STATIC_ClearFarmAnimalSlot(int Index);
	bool STATIC_CheckPFGrowthCompletedAnimal();
	bool STATIC_CheckPFFarmUpdateFlag();
	void STATIC_CheckPFFarmNotice(bool* Notice, TArray<int>* AnimalIDList);
	bool STATIC_CheckFarmAlias_ZGU();
	bool STATIC_CheckAnimalHealth(int Index);
	void STATIC_AddFarmSupportAnimalSlot(int AnimalID);
};


// Class Arise.MenuFormationSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuFormationSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuFormationSupport");
		return ptr;
	}


	void STATIC_MenuFormatTest();
	void STATIC_MenuFormationSetData(TArray<struct FMenuFormationData>* InList);
	void STATIC_MenuFormationGetData(TArray<struct FMenuFormationData>* outList);
	void STATIC_MenuFormationGetArtsText(int PlayerID, struct FDictionaryText* OutName, struct FDictionaryText* OutExp1, struct FDictionaryText* OutExp2, int* IconNo);
	bool STATIC_MenuFormationEnableCheck(TArray<struct FMenuFormationData>* InData);
	bool STATIC_MenuFormationChangeIndex(int Index1, int Index2, TArray<struct FMenuFormationData>* InOutData);
	bool STATIC_MenuFormationChangeControll(int Index, TArray<struct FMenuFormationData>* InOutData);
};


// Class Arise.MenuFreeCursorSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuFreeCursorSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuFreeCursorSupport");
		return ptr;
	}


	bool STATIC_UpdateMouseModeCursor(class APlayerController* PlayerController, TEnumAsByte<EMouseCursor> Cursor);
	bool STATIC_CheckShouldMouseMode();
};


// Class Arise.InnDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UInnDatabase : public UXmlDatabaseBase
{
public:
	struct FInnDatabaseRow                             Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.InnDatabase");
		return ptr;
	}

};


// Class Arise.InputActionDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UInputActionDatabase : public UXmlDatabaseBase
{
public:
	struct FInputHelpActionList                        Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.InputActionDatabase");
		return ptr;
	}

};


// Class Arise.InputHelpDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UInputHelpDatabase : public UXmlDatabaseBase
{
public:
	struct FInputHelpList                              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.InputHelpDatabase");
		return ptr;
	}

};


// Class Arise.MenuItemSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuItemSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuItemSupport");
		return ptr;
	}


	int STATIC_UsingItemWork(int OrderIndex, int ItemID, struct FString* UsingText, struct FString* PlaySELabel);
	void STATIC_UpdateItemNewFlagMark(TArray<int>* IDList);
	void STATIC_SearchListUniqueID(int UniqueId, TArray<struct FMenuItemData>* InDataList, int* Index);
	void STATIC_SearchListItemID(int ItemID, TArray<struct FMenuItemData>* InDataList, TArray<int>* IndexList, int* HitCount);
	void STATIC_MenuItemSort(int SortType, TArray<struct FMenuItemData>* InOutSortList);
	bool STATIC_MenuItemFilter(int FilterType, TArray<struct FMenuItemData>* InItemList, TArray<struct FMenuItemData>* OutFilterList);
	void STATIC_MakeTrushMessage(int ItemID, int TrushNum, struct FString* Message, struct FString* MsgYes, struct FString* MsgNo);
	bool STATIC_IsUsingItem(int ItemID, int Order);
	void STATIC_IsUsableItem(int ItemID, int* UsableType, int* SubType);
	bool STATIC_IsUniqueItem(int ItemID);
	bool STATIC_IsTrashItem(int ItemID);
	void STATIC_GetMenuItemSortData_Lib(EMenuItemCategory Category, int SortType, int NewItemMax, TArray<struct FMenuItemData>* OutSortList);
	void STATIC_GetMenuItemSortData(EMenuItemCategory Category, int SortType, TArray<struct FMenuItemData>* InDataList, TArray<struct FMenuItemData>* OutSortList);
	void STATIC_GetMenuItemData(TArray<struct FMenuItemData>* OutDataList);
	void STATIC_GetMenuCookItemNumText(int ListNum, struct FModifiedText* OutText);
	void STATIC_GetMenuCharacterBadStatus(EArisePartyID PartyId, TArray<int>* OutStatus);
	void STATIC_GetMenuBattleItemSortData(int SortType, TArray<struct FMenuItemData>* OutSortList);
	void STATIC_GetItemSkillNameText(const struct FString& Label, struct FModifiedText* OutText);
	void STATIC_GetItemSkillLabel(int UniqueId, TArray<int>* ID, TArray<struct FString>* Label);
	bool STATIC_GetItemNewFlagMark(int ItemID);
	void STATIC_GetItemName(int ItemID, struct FString* OutItemName);
	void STATIC_GetItemBaseSkillLabel(int ItemID, int* ID, struct FString* Label);
	void STATIC_Debug_MakeDummyAccessory(int BaseItemID, int SkillNum, int* OutUniqueID);
	int STATIC_CheckMenuItemCategoryMax(EMenuItemCategory Category);
	void STATIC_CheckItemPlusStatus(EArisePartyID Target, EMenuCategoryUsingType UpStatus, int BaseNum, int* Result);
	bool STATIC_CheckItemClothes(int ItemID);
};


// Class Arise.MenuListDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UMenuListDatabase : public UXmlDatabaseBase
{
public:
	struct FMenuDataList                               Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuListDatabase");
		return ptr;
	}

};


// Class Arise.MenuManagerSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuManagerSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuManagerSupport");
		return ptr;
	}


	struct FString STATIC_SubstitutionTextList(const struct FString& BaseString, TArray<struct FString> TargetString, TArray<struct FString> Substitution);
	struct FString STATIC_SubstitutionText(const struct FString& BaseString, const struct FString& TargetString, const struct FString& Substitution);
	void STATIC_SetLevelVisibility(class APlayerController* Player, const struct FString& MenuLevelName, bool Visible);
	void STATIC_SetHelpVisibility(bool HelpVisibility);
	void STATIC_SetHelpString(const struct FString& HelpString);
	void STATIC_SetHelpData(const struct FString& Label);
	void STATIC_SaveValue(const struct FString& Key, int Value);
	void STATIC_SaveStringValue(const struct FString& Key, const struct FString& Value);
	void STATIC_RemoveMenuLight(const struct FString& Key, bool IsDestroyed);
	void STATIC_Release();
	void STATIC_RegistMenuLight(const struct FString& Key, class ALight* Light);
	void STATIC_PlayHelpFinishAnime();
	void STATIC_IsMouseAreaHitArray(const struct FVector2D& MousePosition, TArray<struct FMenuMouseHitArea>* HitArea, int* HitIndex, int* ReturnValue);
	bool STATIC_IsMouseAreaHit(const struct FVector2D& MousePosition, const struct FMenuMouseHitArea& HitArea);
	void STATIC_Initialize();
	void STATIC_GetWidgetAnimation(class UUserWidget* UserWidget, const struct FString& AnimationName, class UWidgetAnimation** AnimationData);
	int STATIC_GetValue(const struct FString& Key, bool IsRemove);
	struct FString STATIC_GetStringValue(const struct FString& Key, bool Remove);
	struct FText STATIC_GetStringDictionaryText(const struct FString& Group, const struct FString& DictionaryID);
	bool STATIC_GetResidentMenuWidgetPathes(TArray<struct FSoftClassPath>* WidgetPathes);
	void STATIC_GetMenuSEEventName(TEnumAsByte<EMenuSEType> SEType, struct FString* EventName);
	void STATIC_GetInputHelpActionString(const struct FString& Label, struct FModifiedText* oActionString, struct FName* Button);
	bool STATIC_GetHelpVisibility();
	void STATIC_GetHelpString(struct FString* HelpString, bool* IsChanged);
	bool STATIC_GetHelpFinishAnimeFlag();
	bool STATIC_FindMenuLight(const struct FString& Key, class ALight** Light);
	struct FMenuData STATIC_FindMenuData(const struct FString& MenuID);
	void STATIC_DigitNumText(int Num, int Digit, struct FString* OutString);
	void STATIC_BitSet(EWidgetUse Bit, bool on, int* Target);
	void STATIC_BitGet(int Target, EWidgetUse Bit, bool* on);
};


// Class Arise.MenuMapSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuMapSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuMapSupport");
		return ptr;
	}


	void STATIC_GetMapRegionNameFromArea(const struct FString& AreaName, struct FString* RegionName, bool* Valid);
	void STATIC_GetMapRegionName(const struct FString& LocationName, struct FString* RegionName, bool* Valid);
	void STATIC_GetMapRegionList(TArray<struct FString>* AreaNameList);
	void STATIC_GetMapLocationData(const struct FString& LevelName, struct FMapLocationData* LocationData, bool* Valid);
	void STATIC_GetMapAreaLocationNameList(const struct FString& AreaName, TArray<struct FString>* LocationNameList, bool* Valid);
	void STATIC_GetMapAreaListFromRegionName(const struct FString& RegionName, TArray<struct FString>* AreaNameList, bool* Valid);
	void STATIC_GetLocationDataFromName(const struct FString& LocationName, struct FMapLocationData* LocationData, bool* Valid);
};


// Class Arise.MenuPadProcess
// 0x00B0 (0x03E8 - 0x0338)
class AMenuPadProcess : public AInputExtInputProcessBase
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0338(0x0040) MISSED OFFSET
	struct FScriptDelegate                             TickFunc;                                                 // 0x0378(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x60];                                      // 0x0388(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuPadProcess");
		return ptr;
	}


	bool K2_IsTrigger(const struct FName& Key);
	bool K2_IsRepeat(const struct FName& Key);
	bool K2_IsRelease(const struct FName& Key);
	bool K2_IsPress(const struct FName& Key);
	bool K2_AddMouseTrigger(const struct FName& Key);
	bool K2_AddMouseRelease(const struct FName& Key);
	bool IsTrigger(TEnumAsByte<EMenuPad> Key);
	bool IsRepeat(TEnumAsByte<EMenuPad> Key);
	bool IsRelease(TEnumAsByte<EMenuPad> Key);
	bool IsPress(TEnumAsByte<EMenuPad> Key);
	bool IsInputMouseMove();
	bool IsAnyButtonPressed();
	bool Init();
	bool GetAssignablePadKeyPressed(TArray<EPadKeyId>* aSearchKeyIds, TArray<EPadKeyId>* aPressedKeyIds);
	void STATIC_GetAssignablePadKeyList(TArray<EPadKeyId>* oList);
	bool GetAssignableMouseKeyPressed(TArray<EKeyboardKeyId>* aSearchKeyIds, TArray<EKeyboardKeyId>* aPressedKeyIds);
	void STATIC_GetAssignableMouseKeyList(TArray<EKeyboardKeyId>* oList);
	bool GetAssignableKeyboardKeyPressed(TArray<EKeyboardKeyId>* aSearchKeyIds, TArray<EKeyboardKeyId>* aPressedKeyIds);
	void STATIC_GetAssignableKeyboardKeyList(TArray<EKeyboardKeyId>* oList);
};


// Class Arise.MenuQuestListSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuQuestListSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuQuestListSupport");
		return ptr;
	}


	void STATIC_UpdateSubquestLineupTime(const struct FQuestID& TargetQuest);
	void STATIC_SortMenuQuestData(const struct FString& PrioritizeID, int SortType, TArray<struct FQuestData>* InOutList);
	void STATIC_GetMenuQuestStepReplaced(struct FQuestStepData* Step, struct FModifiedText* OutModText);
	void STATIC_GetMenuQuestPurposeText(struct FQuestData* Quest, struct FDictionaryText* Step, struct FDictionaryText* Country, struct FDictionaryText* Area, bool* IsVisible);
	void STATIC_GetMenuQuestDetailTextReplaced(struct FQuestData* Quest, struct FModifiedText* OutModText);
	void STATIC_GetMenuQuestDetailText(struct FQuestData* Quest, struct FDictionaryText* OutDicText);
	void STATIC_GetMenuQuestDataFromID(const struct FString& QuestID, struct FQuestData* Data);
	void STATIC_GetMenuQuestData(int Country, int Type, TArray<struct FQuestData>* InAllList, TArray<struct FQuestData>* outList);
	void STATIC_GetMenuFastTravelNearArea(const struct FString& TargetArea, TArray<struct FString>* NearAreaList, int* TargetIndex);
	void STATIC_GetMenuCountryName(int CountryID, struct FDictionaryText* CountryText);
	void STATIC_GetMenuCountryList(TArray<int>* outList);
	void STATIC_GetMenuAllQuestData(TArray<struct FQuestData>* QuestList);
	void STATIC_Debug_QuestStepClear(const struct FString& QuestID, TArray<int> TargetStep);
	void STATIC_Debug_AllQuestOpen(bool StepOpen);
	void STATIC_DBM_UI_QuestFullOpenSetup();
};


// Class Arise.MenuSaveAccess
// 0x0000 (0x0028 - 0x0028)
class UMenuSaveAccess : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuSaveAccess");
		return ptr;
	}


	void STATIC_UpdateQuestCheckMark();
	void STATIC_SetWantedQuestMark(const struct FQuestMark& QuestMark);
	void STATIC_SetSubQuestUpdateTime_BP(int QuestNo, int UpdateTime);
	void STATIC_SetSubQuestMark(const struct FQuestMark& QuestMark);
	void STATIC_SetSkillMarkShowUI(EArisePartyID PartyId, bool IsShown);
	void STATIC_SetSkillMark(EArisePartyID PartyId, int AliasID, int SkillID);
	void STATIC_SetPlayableHelpTime(float Time);
	void STATIC_SetPlayableHelpID(int ID);
	void STATIC_SetModelPositionData(EArisePartyID PartyId, EMenuModelPositionSaveType Type, const struct FVector4& Data);
	void STATIC_SetModelMotionData(EArisePartyID PartyId, EMenuModelPositionSaveType Type, int MotionNo);
	void STATIC_SetMenuCursorIndex(const struct FName& Label, int Value);
	void STATIC_SetMainQuestMark(const struct FQuestMark& QuestMark);
	bool STATIC_SetLocatorIconAdjustTargetOffset(const struct FVector2D& Offset);
	bool STATIC_SetLocatorIconAdjustTarget(const struct FString& Target);
	void STATIC_SetKeyHelpTime(float Time);
	void STATIC_SetKeyHelpID(int ID);
	void STATIC_SetFormationControllID(int ID);
	void STATIC_SetFavorabilityCount(EArisePartyID PartyId, int Count);
	void STATIC_SetFarmPlantDataIndex(int Index, struct FFarmPlantSaveSlot* Data);
	void STATIC_SetFarmPlantData(TArray<struct FFarmPlantSaveSlot>* Data);
	void STATIC_SetFarmMessageData(int Type, TArray<struct FFarmMessageData>* Data);
	void STATIC_SetFarmForceMaxFlag(bool Flag);
	void STATIC_SetFarmForceAttackFlag(bool Flag);
	void STATIC_SetFarmCommonData(struct FFarmCommonSavedata* Data);
	void STATIC_SetFarmAnimalSupportDataIndex(int Index, struct FFarmAnimalSupportSaveSlot* Data);
	void STATIC_SetFarmAnimalSupportData(TArray<struct FFarmAnimalSupportSaveSlot>* Data);
	void STATIC_SetFarmAnimalDataIndex(int Index, struct FFarmAnimalSaveSlot* Data);
	void STATIC_SetFarmAnimalData(TArray<struct FFarmAnimalSaveSlot>* Data);
	void STATIC_SetDlcVersionCheckForceErrorFlag(bool Flag);
	void STATIC_SetDlcConnecionForceSuccessFlag(bool Flag);
	void STATIC_SetCookExecuteID(int RecipeID);
	void STATIC_SetAccessorySkillFilter(TArray<int>* Data);
	void STATIC_ResetMenuCursorIndexGroup(const struct FName& GroupLabel);
	void STATIC_ResetMenuCursorIndexAll();
	bool STATIC_IsSkillMarkShowUI(EArisePartyID PartyId);
	bool STATIC_IsShowPlayableHelp();
	bool STATIC_IsShowKeyHelp();
	bool STATIC_IsCookExecute(int RecipeID);
	void STATIC_GetWantedQuestMark(struct FQuestMark* QuestMark);
	int STATIC_GetSubQuestUpdateTime_BP(int QuestNo);
	void STATIC_GetSubQuestMark(struct FQuestMark* QuestMark);
	void STATIC_GetSkillMark(EArisePartyID PartyId, int* AliasID, int* SkillID);
	float STATIC_GetPlayableHelpTime();
	void STATIC_GetPlayableHelpID(int* ID);
	void STATIC_GetModelPositionData(EArisePartyID PartyId, EMenuModelPositionSaveType Type, struct FVector4* Data);
	int STATIC_GetModelMotionData(EArisePartyID PartyId, EMenuModelPositionSaveType Type);
	int STATIC_GetMenuCursorIndex(const struct FName& Label);
	void STATIC_GetMainQuestMark(struct FQuestMark* QuestMark);
	struct FVector2D STATIC_GetLocatorIconAdjustTargetOffset();
	struct FString STATIC_GetLocatorIconAdjustTarget();
	float STATIC_GetKeyHelpTime();
	void STATIC_GetKeyHelpID(int* ID);
	void STATIC_GetFormationControllID(int* ID);
	int STATIC_GetFavorabilityCount(EArisePartyID PartyId);
	int STATIC_GetFarmTrophyCount();
	bool STATIC_GetFarmPlantDataIndex(int Index, struct FFarmPlantSaveSlot* OutData);
	bool STATIC_GetFarmPlantData(TArray<struct FFarmPlantSaveSlot>* OutData);
	void STATIC_GetFarmMessageData(int Type, TArray<struct FFarmMessageData>* Data);
	bool STATIC_GetFarmForceMaxFlag();
	bool STATIC_GetFarmForceAttackFlag();
	bool STATIC_GetFarmCommonData(struct FFarmCommonSavedata* OutData);
	bool STATIC_GetFarmAnimalSupportDataIndex(int Index, struct FFarmAnimalSupportSaveSlot* OutData);
	bool STATIC_GetFarmAnimalSupportData(TArray<struct FFarmAnimalSupportSaveSlot>* OutData);
	bool STATIC_GetFarmAnimalDataIndex(int Index, struct FFarmAnimalSaveSlot* OutData);
	bool STATIC_GetFarmAnimalData(TArray<struct FFarmAnimalSaveSlot>* OutData);
	bool STATIC_GetDlcVersionCheckForceErrorFlag();
	bool STATIC_GetDlcConnecionForceSuccessFlag();
	void STATIC_GetCookExecuteIDList(TArray<int>* OutData);
	int STATIC_GetCookExecuteIDCount();
	void STATIC_GetAccessorySkillFilter(TArray<int>* OutData);
	void STATIC_ClearFarmMessageData(int Type);
	void STATIC_AddFavorabilityCount(EArisePartyID PartyId, int Count);
	bool STATIC_AddFarmAnimalSupportData(struct FFarmAnimalSupportSaveSlot* Data);
	void STATIC_AddAccessorySkillFilter(TArray<int>* Data);
};


// Class Arise.MenuSaveSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuSaveSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuSaveSupport");
		return ptr;
	}


	bool STATIC_IsSaveDataExist();
	bool STATIC_IsIncompatibleSaveData(int iSlotNo);
	bool STATIC_IsClearDataSaved(const struct FMenuSaveDataCondition& iOldCondition);
	bool STATIC_IsClearDataExist();
	ETitleDemoMovieType STATIC_GetTitleDemoMovieType(int Demo01Open, int Demo02Open);
	void STATIC_GetSortedSaveSlotList(bool bExcludeAutoSave, bool bExcludeEmpty, TArray<int>* SlotList);
	bool STATIC_GetSaveThumbneilData(struct FAriseSaveHeader* inHeaderData, TArray<unsigned char>* OutBuffer);
	struct FMenuSaveDataCondition STATIC_GetSaveDataSummary();
	int STATIC_GetLatestSaveDataSlot();
	struct FMenuSaveHeaderData STATIC_ConvertToSaveHeaderData(int inSlotIndex, const struct FAriseSaveHeader& inHeaderData);
};


// Class Arise.MenuShopSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuShopSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuShopSupport");
		return ptr;
	}


	void STATIC_UpdateItemWorkData(struct FItemWorkData* WorkData);
	void STATIC_SortShopItem(EMenuShopItemSortType SortType, TArray<struct FMenuShopItemData>* ItemList);
	bool STATIC_ShopSubItem(int ItemID, int Num);
	void STATIC_ShopMultiSale(TArray<int> SaleIDList);
	void STATIC_ShopClearWorkItem();
	int STATIC_ShopCalcMultiSaleValue(TArray<int> SaleIDList);
	bool STATIC_ShopAddItem(int ItemID, int Num, const struct FString& ShopID, const struct FString& ShopItemLabel);
	void STATIC_GetShopPreviewStatus(int CharacterID, int Weapon, int Armor, int Accessory, TArray<int>* OutStatus);
	void STATIC_GetShopPlayerStatus(int CharacterID, struct FMenuShopPlayerStatus* OutStatus);
	int STATIC_GetShopPartyMoney();
	void STATIC_GetShopPartyItemList(EMenuShopItemCategory ItemCategory, TArray<struct FMenuShopItemData>* ItemList);
	void STATIC_GetShopItemStatus(int ItemID, TArray<int>* OutStatus, TArray<int>* OutElement);
	void STATIC_GetShopItemNameText(int ItemID, struct FDictionaryText* OutText);
	void STATIC_GetShopItemList_str(const struct FString& ShopID, EMenuShopItemCategory ItemCategory, TArray<struct FMenuShopItemData>* ItemList);
	void STATIC_GetShopItemExpText(int ItemID, struct FDictionaryText* OutText);
	void STATIC_GetShopItemData_str(const struct FString& ShopID, int ItemID, bool* Valid, struct FMenuShopItemData* OutData);
	void STATIC_GetShopItemAbility(int ItemID, TArray<int>* OutSlotData);
	int STATIC_GetShopEquipTargetNo(int ItemID);
	void STATIC_GetShopEquipmentStatus(int Weapon, int Armor, int Accessory, struct FMenuShopPlayerStatus* BaseStatus, TArray<int>* OutStatus);
	void STATIC_GetRealizationItemList(TArray<int>* ItemIDList, int* SaleValue);
	void STATIC_Debug_ShopInit();
	void STATIC_DBM_UI_ShopStockDataReset();
};


// Class Arise.WeaponMakeSupport
// 0x0000 (0x0028 - 0x0028)
class UWeaponMakeSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.WeaponMakeSupport");
		return ptr;
	}


	bool STATIC_WeaponMakeCheck(int RecipeID, bool Tutorial, int* ErrorType);
	void STATIC_WeaponMakeAction(int RecipeID, bool IsEquipment);
	void STATIC_SortShopWeaponRecipe(EMenuWeaponRecipeSortType Type, TArray<int>* InList, TArray<int>* outList, TArray<struct FWeaponRecipeFlagData>* OutFlagList);
	bool STATIC_GetShopWeaponMakeFlag(int RecipeID);
	void STATIC_GetMenuRecipeIDList(int CharacterID, TArray<int>* OutIdList, TArray<struct FWeaponRecipeFlagData>* OutFlag);
	void STATIC_GetMenuRecipeData(int RecipeID, struct FRecipeWeaponData* OutData, struct FWeaponRecipeFlagData* OutFlag);
	void STATIC_GetMenuMaterialNameText(int TargetItemID, struct FDictionaryText* OutText);
	void STATIC_GetMenuMaterialHintText(int TargetItemID, struct FDictionaryText* OutText);
	void STATIC_EraseWeaponRecipeNewFlag(TArray<struct FString>* LabelList);
};


// Class Arise.MenuSkillPanelDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UMenuSkillPanelDatabase : public UXmlDatabaseBase
{
public:
	struct FMenuSkillPanelDataList                     Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuSkillPanelDatabase");
		return ptr;
	}

};


// Class Arise.MenuSkillSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuSkillSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuSkillSupport");
		return ptr;
	}


	bool STATIC_ResetMenuSkillPanelLayout(EArisePartyID CharaID, TArray<class UWidget*> TargetWidgets);
	class UMenuSkillPanelDatabase* STATIC_GetMenuSkillPanelDatabase();
	bool STATIC_GetMenuSkillPanelData(EMenuSkillPanelCategory Category, struct FMenuSkillPanelData* Data);
	bool STATIC_GetMenuSkillPanelAliasLabels(EArisePartyID CharaID, EMenuSkillPanelCategory Category, TArray<struct FString>* Labels);
	bool STATIC_GetMenuSkillPanelAliasCategory(EArisePartyID CharaID, const struct FString& AliasLabel, EMenuSkillPanelCategory* Category);
	void STATIC_GetLearnedSkillIdList(class UArisePCStatus* PCStatus, TArray<int>* outList);
	void STATIC_GetAliasLockedText(int AliasID, struct FModifiedText* OutText);
};


// Class Arise.MenuSoundDatabaseLibrary
// 0x0000 (0x0028 - 0x0028)
class UMenuSoundDatabaseLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuSoundDatabaseLibrary");
		return ptr;
	}


	struct FString STATIC_GetNativeLabel(const struct FString& Name);
};


// Class Arise.MenuSoundDataDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UMenuSoundDataDatabase : public UXmlDatabaseBase
{
public:
	struct FMenuSoundDataList                          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuSoundDataDatabase");
		return ptr;
	}

};


// Class Arise.MenuStatusSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuStatusSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuStatusSupport");
		return ptr;
	}


	void STATIC_StatusTextureUnload(struct FMenuStatusSceneData* StatusData);
	bool STATIC_StatusTextureLoad(int PreferredIndex, struct FMenuStatusSceneData* StatusData);
	bool STATIC_IsStatusTextureLoadComplete(int Index, struct FMenuStatusSceneData* StatusData, class UTexture2D** Texture);
	bool STATIC_GetStatusImagePathAndLayout(int CharacterID, int PartyNum, struct FSoftObjectPath* FilePath, struct FVector2D* pos, struct FVector2D* Scale);
	void STATIC_GetStatusImagePath(int CharacterID, struct FSoftObjectPath* FilePath);
	int STATIC_GetStatusImageNo(int CharacterID, int version);
	struct FString STATIC_GetStatusGuideText(int SceneState);
	struct FMenuStatusSceneData STATIC_GetMenuStatus(int CharacterID);
	struct FMenuStatusSceneData STATIC_GetMenuBaseStatus(int CharacterID);
	struct FString STATIC_GetIntroductionText(int CharacterID);
};


// Class Arise.MenuTacticsSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuTacticsSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuTacticsSupport");
		return ptr;
	}


	void STATIC_SetMenuTacticsDataByPreset(int Index, struct FMenuTacticsData* TacticsData);
	void STATIC_SetMenuTacticsDataByEdit(int Index, struct FMenuTacticsData* TacticsData);
	void STATIC_SetMenuTacticsData(int Index, struct FMenuTacticsData* TacticsData);
	bool STATIC_IsEqualTactics(struct FMenuTacticsData* TacticsData1, struct FMenuTacticsData* TacticsData2);
	bool STATIC_IsCollisionTacticsLineData(struct FMenuTacticsLineData* LineData);
	bool STATIC_IsChangePreset(struct FMenuTacticsData* TacticsData);
	bool STATIC_IsChangeMenuTacticsData(int Index, struct FMenuTacticsData* TacticsData);
	void STATIC_GetMenuTacticsText(const struct FString& Label, struct FDictionaryText* DicText);
	void STATIC_GetMenuTacticsSetText(const struct FString& Label, struct FDictionaryText* DicText);
	void STATIC_GetMenuTacticsNameLabel(TArray<struct FString>* LabelList);
	void STATIC_GetMenuTacticsExpText(const struct FString& Label, struct FDictionaryText* DicText);
	void STATIC_GetMenuTacticsDefaultLabel(TArray<struct FString>* LabelList);
	void STATIC_GetMenuTacticsDefaultData(const struct FString& TacticsLabel, struct FMenuTacticsData* DefaultData);
	void STATIC_GetMenuTacticsConditionLabel(TArray<struct FString>* LabelList);
	void STATIC_GetMenuTactics(int Index, struct FMenuTacticsData* OutData);
	int STATIC_GetMaxNumberTacticsLineData();
	void STATIC_GetGetMenuTacticsAdjustLabel(const struct FString& Action, TArray<struct FString>* LabelList);
	void STATIC_GetGetMenuTacticsActionLabel(const struct FString& Condition, TArray<struct FString>* LabelList);
};


// Class Arise.MenuTopDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UMenuTopDatabase : public UXmlDatabaseBase
{
public:
	struct FMenuTopDataList                            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuTopDatabase");
		return ptr;
	}

};


// Class Arise.MenuTopSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuTopSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuTopSupport");
		return ptr;
	}


	void STATIC_SetIconStatus(class UUserWidget* BaseWidget, TArray<class UUserWidget*> ChildList, float BaseMoveTime, TArray<class UWidgetTimeMove*>* OutMoveData);
	void STATIC_HealWork(float TargetRatio);
	void STATIC_HealPreview(float TargetRatio, struct FMenuTopHealPreview* Preview);
	bool STATIC_GetTopDataByID(EMenuTopID ID, struct FMenuTopData* Data);
	bool STATIC_GetTopDataByCrurrentChapter(struct FMenuTopData* Data);
};


// Class Arise.MenuWidgetSupport
// 0x0000 (0x0028 - 0x0028)
class UMenuWidgetSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MenuWidgetSupport");
		return ptr;
	}


	void STATIC_SortWidgetArrayInOrderOfNearToScreenPos(class UObject* WorldContextObject, const struct FVector2D& ScreenPos, TArray<class UWidget*>* Widgets);
	void STATIC_ReleaseWidgetSupport();
	bool STATIC_IsWidgetAndWidgetScreenOverlapWithRadius(class UObject* WorldContextObject, class UWidget* Widget0, class UWidget* Widget1, float Radius);
	bool STATIC_IsWidgetAndWidgetScreenOverlap(class UObject* WorldContextObject, class UWidget* Widget0, class UWidget* Widget1);
	bool STATIC_IsWidgetAndPosScreenOverlap(class UObject* WorldContextObject, class UWidget* Widget, const struct FVector2D& ScreenPos);
	bool STATIC_IsWidgetAndMouseScreenOverlap(class UObject* WorldContextObject, class UWidget* Widget);
	void STATIC_InitializeWidgetSupport();
	bool STATIC_GetWidgetWorldTransformInWidgetCompoennt(class UObject* WorldContextObject, class UWidget* Widget, class UWidgetComponent* WidgetComponent, struct FTransform* WorldTransform);
	bool STATIC_GetWidgetWorldLocationInWidgetCompoennt(class UObject* WorldContextObject, class UWidget* Widget, class UWidgetComponent* WidgetComponent, struct FVector* WorldLocation);
	struct FMargin STATIC_GetWidgetScreenRect(class UObject* WorldContextObject, class UWidget* Widget);
	bool STATIC_GetWidgetScreenPositionInWidgetCompoennt(class UObject* WorldContextObject, class UWidget* Widget, class UWidgetComponent* WidgetComponent, struct FVector2D* ScreenLocation);
	struct FVector2D STATIC_GetWidgetScreenPosition(class UObject* WorldContextObject, class UWidget* Widget);
	float STATIC_GetWidgetScreenLengthSquared(class UObject* WorldContextObject, class UWidget* Widget0, class UWidget* Widget1);
	struct FVector2D STATIC_GetWidgetScreenDistVector(class UObject* WorldContextObject, class UWidget* Widget0, class UWidget* Widget1);
	float STATIC_GetSafeZoneRatio();
	bool STATIC_GetRenderPositionInWidgetComponentFromWorldTransform(class UObject* WorldContextObject, class UWidgetComponent* WidgetComponent, const struct FTransform& WorldTransform, struct FVector2D* RenderPosition);
	struct FVector2D STATIC_GetAriseViewportSize(class UObject* WorldContextObject);
	bool STATIC_CalculateMouseWorldDirection(class APlayerController* Player, struct FVector* WorldDirection);
	bool STATIC_AriseProjectWorldLocationToScreen(class UObject* WorldContextObject, const struct FVector& WorldLocation, bool bPlayerViewportRelative, bool bSafeZone, struct FVector2D* ScreenLocation);
	bool STATIC_AriseDeprojectScreenPositionToWorld(class UObject* WorldContextObject, float ScreenX, float ScreenY, bool bSafeZone, struct FVector* WorldLocation, struct FVector* WorldDirection);
};


// Class Arise.MinimapIconInterface
// 0x0000 (0x0028 - 0x0028)
class UMinimapIconInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MinimapIconInterface");
		return ptr;
	}


	struct FVector GetIconLocation();
	struct FString GetIconImageDataName();
	float GetIconAngle();
};


// Class Arise.MinimapManager
// 0x0030 (0x0058 - 0x0028)
class UMinimapManager : public UObject
{
public:
	struct FVector2D                                   MapSize;                                                  // 0x0028(0x0008) (IsPlainOldData)
	struct FVector2D                                   MapCenter;                                                // 0x0030(0x0008) (IsPlainOldData)
	struct FVector                                     CenterLocation;                                           // 0x0038(0x000C) (IsPlainOldData)
	struct FRotator                                    MapRotation;                                              // 0x0044(0x000C) (IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsRotationMode;                                          // 0x0054(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MinimapManager");
		return ptr;
	}


	void STATIC_UnloadMinimapMesh(const struct FString& AssetName);
	void SetRotationMode(bool bInIsRotationMode);
	void SetOrthoWidth(float InOrthoWidth);
	void SetMapSize(const struct FVector2D& InMapSize);
	void SetMapRotation(const struct FRotator& InMapRotation);
	void SetCenterLocation(const struct FVector& InCenterLocation);
	bool STATIC_LoadMinimapMeshAsync(const struct FString& AssetName);
	class UObject* STATIC_LoadMinimapMesh(const struct FString& AssetName);
	bool IsRotationMode();
	bool STATIC_IsMinimapMeshLoaded(const struct FString& AssetName);
	bool STATIC_IsMinimapMeshExist(const struct FString& AssetName);
	float GetOrthoWidth();
	class UStaticMesh* STATIC_GetMinimapMesh(const struct FString& AssetName);
	struct FVector2D GetMapSize();
	struct FRotator GetMapRotation();
	struct FVector2D GetMapCenter();
	class UMinimapManager* STATIC_CreateMinimapManager();
	struct FVector2D CalcIconLocation(const struct FVector& IconLocation, bool bIsTracking);
};


// Class Arise.MinimapUtility
// 0x0030 (0x0058 - 0x0028)
class UMinimapUtility : public UObject
{
public:
	struct FVector2D                                   MapSize;                                                  // 0x0028(0x0008) (IsPlainOldData)
	struct FVector2D                                   MapCenter;                                                // 0x0030(0x0008) (IsPlainOldData)
	struct FVector                                     CenterLocation;                                           // 0x0038(0x000C) (IsPlainOldData)
	struct FRotator                                    MapRotation;                                              // 0x0044(0x000C) (IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MinimapUtility");
		return ptr;
	}


	void STATIC_UnloadMinimapMesh(const struct FString& AssetName);
	void SetOrthoWidth(float InOrthoWidth);
	void SetMapSize(const struct FVector2D& InMapSize);
	void SetMapRotation(const struct FRotator& InMapRotation);
	void SetCenterLocation(const struct FVector& InCenterLocation);
	bool STATIC_LoadMinimapMeshAsync(const struct FString& AssetName);
	class UObject* STATIC_LoadMinimapMesh(const struct FString& AssetName);
	bool STATIC_IsLoadedMinimapMesh(const struct FString& AssetName);
	float GetOrthoWidth();
	class UStaticMesh* STATIC_GetMinimapMesh(const struct FString& AssetName);
	struct FVector2D GetMapSize();
	class UMinimapUtility* STATIC_CreateMinimapUtility();
	struct FVector2D CalcIconLocation(const struct FVector& IconLocation);
};


// Class Arise.MiningPointItemDatabaseObject
// 0x0020 (0x01D8 - 0x01B8)
class UMiningPointItemDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FMiningPointItemDatabase                    Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MiningPointItemDatabaseObject");
		return ptr;
	}

};


// Class Arise.ModifyImage
// 0x0080 (0x0258 - 0x01D8)
class UModifyImage : public UImage
{
public:
	struct FString                                     BaseFilePath;                                             // 0x01D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     ParamName;                                                // 0x01E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               LoadingVisible;                                           // 0x01F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFixedToTextureSize;                                      // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1E];                                      // 0x01FA(0x001E) MISSED OFFSET
	class UTexture2D*                                  DefaultTexture;                                           // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  UseTexture;                                               // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0228(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ModifyImage");
		return ptr;
	}


	void UpdateImage();
	void ReleaseImage();
	bool IsLoading();
	void ChangeImageFullPath(const struct FString& Filename);
	void ChangeImage(const struct FString& Filename);
};


// Class Arise.MovieSceneRangeNotifySection
// 0x0010 (0x00F0 - 0x00E0)
class UMovieSceneRangeNotifySection : public UMovieSceneSection
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E0(0x0008) MISSED OFFSET
	class UMovieSceneRangeNotify*                      EventNotifyData;                                          // 0x00E8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MovieSceneRangeNotifySection");
		return ptr;
	}


	void Duplicate();
};


// Class Arise.MovieSceneRangeNotifyTrack
// 0x0010 (0x0068 - 0x0058)
class UMovieSceneRangeNotifyTrack : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                 // 0x0058(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MovieSceneRangeNotifyTrack");
		return ptr;
	}

};


// Class Arise.MovieSceneShotNotify
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneShotNotify : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MovieSceneShotNotify");
		return ptr;
	}


	void Received_Notify(class AActor* Owner);
	struct FString GetEventNotifyName();
};


// Class Arise.MovieSceneShotNotifySection
// 0x0028 (0x0108 - 0x00E0)
class UMovieSceneShotNotifySection : public UMovieSceneSection
{
public:
	struct FMovieSceneShotNotifySectionData            EventData;                                                // 0x00E0(0x0020)
	class UMovieSceneShotNotify*                       NotifyInstanced;                                          // 0x0100(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MovieSceneShotNotifySection");
		return ptr;
	}

};


// Class Arise.MovieSceneShotNotifyTrack
// 0x0028 (0x0080 - 0x0058)
class UMovieSceneShotNotifyTrack : public UMovieSceneNameableTrack
{
public:
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0058(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	EFireEventsAtPosition                              EventPosition;                                            // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	TArray<struct FMovieSceneObjectBindingID>          EventReceivers;                                           // 0x0060(0x0010) (Edit, ZeroConstructor)
	TArray<class UMovieSceneSection*>                  Sections;                                                 // 0x0070(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.MovieSceneShotNotifyTrack");
		return ptr;
	}

};


// Class Arise.NavimapFootprintManager
// 0x0048 (0x0070 - 0x0028)
class UNavimapFootprintManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0028(0x0040) MISSED OFFSET
	float                                              Interval;                                                 // 0x0068(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LifeSpan;                                                 // 0x006C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.NavimapFootprintManager");
		return ptr;
	}


	void Update(float DeltaTime);
	bool Register(const struct FVector& Location);
	void Initialize();
	bool GetFootprintList(TArray<struct FNavimapFootprintData>* oList);
	class UNavimapFootprintManager* STATIC_CreateInstance();
	void Clear();
};


// Class Arise.AriseNewsTssSlotData
// 0x00A8 (0x00D0 - 0x0028)
class UAriseNewsTssSlotData : public UDlcTssSlotData
{
public:
	int                                                slotno;                                                   // 0x0028(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DataSize;                                                 // 0x002C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     SlotStringDataBuffer;                                     // 0x0030(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET
	int                                                UseSlotNo;                                                // 0x0050(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                purpose;                                                  // 0x0054(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0058(0x0008) MISSED OFFSET
	TArray<struct FString>                             UrlStringBuffer;                                          // 0x0060(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData02[0x60];                                      // 0x0070(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseNewsTssSlotData");
		return ptr;
	}

};


// Class Arise.NewsInfoManager
// 0x0070 (0x0098 - 0x0028)
class UNewsInfoManager : public UObject
{
public:
	struct FString                                     NewsStr;                                                  // 0x0028(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FTSSURequestTime                            RequestTime;                                              // 0x0038(0x0014) (BlueprintVisible)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStringLoadCompleteEventDispather;                       // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTSSLoadErrorEventDispather;                             // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UAriseNewsTssSlotData*>               localSlots;                                               // 0x0070(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FString                                     NewsString;                                               // 0x0080(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0090(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.NewsInfoManager");
		return ptr;
	}


	void UpdateRequestTime();
	void SetNewsStr(const struct FString& str);
	void NewsLoadError(int slotno, int respcode);
	void NewsLoadComplete(int slotno, const struct FString& str);
	class UNewsInfoManager* STATIC_K2_GetNewsInfoManager();
	bool IsNewsTSSRequest();
	bool IsNewsStrEmpty();
	void Initialize();
	void GetStringDataFromTSSSlot(class UAriseNewsTssSlotData* Slot);
	void GetStringDataFromTSS(ENewsInfoPurpose porpose);
	class UAriseNewsTssSlotData* GetSlotFromUseSlotNo(int UseSlotNo);
	struct FTimespan GetRecentTimeSpan();
	struct FDateTime GetRecentDateTime();
	struct FString GetNewsString();
	struct FString GetNewsStr();
	class UAriseNewsTssSlotData* GetNewsInfoSlot(int purpose);
	struct FTimespan GetIntervalTimeSpan();
	class UNewsInfoManager* STATIC_CreateInstance();
	void Clear();
};


// Class Arise.NowLoadingSupport
// 0x0000 (0x0028 - 0x0028)
class UNowLoadingSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.NowLoadingSupport");
		return ptr;
	}


	TArray<struct FLoadingScreenData> STATIC_GetNowLoadingDataList();
};


// Class Arise.SearchOwlRewardDatabase
// 0x0010 (0x01C8 - 0x01B8)
class USearchOwlRewardDatabase : public UXmlDatabaseBase
{
public:
	struct FSearchOwlRewardDatabaseRow                 Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SearchOwlRewardDatabase");
		return ptr;
	}

};


// Class Arise.ParticleModuleSoundBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleSoundBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ParticleModuleSoundBase");
		return ptr;
	}

};


// Class Arise.ParticleModuleSound
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleSound : public UParticleModuleSoundBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ParticleModuleSound");
		return ptr;
	}

};


// Class Arise.ParticleModuleSoundPostEvent
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleSoundPostEvent : public UParticleModuleSoundBase
{
public:
	struct FString                                     EventName;                                                // 0x0030(0x0010) (Edit, ZeroConstructor)
	bool                                               bFollow;                                                  // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ParticleModuleSoundPostEvent");
		return ptr;
	}

};


// Class Arise.ParticleModuleSoundRTPC
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleSoundRTPC : public UParticleModuleSoundBase
{
public:
	struct FString                                     ParameterName;                                            // 0x0030(0x0010) (Edit, ZeroConstructor)
	float                                              Value;                                                    // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTimeSec;                                            // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ParticleModuleSoundRTPC");
		return ptr;
	}

};


// Class Arise.ParticleModuleSoundSwitch
// 0x0020 (0x0050 - 0x0030)
class UParticleModuleSoundSwitch : public UParticleModuleSoundBase
{
public:
	struct FString                                     SwitchGroup;                                              // 0x0030(0x0010) (Edit, ZeroConstructor)
	struct FString                                     SWITCH;                                                   // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ParticleModuleSoundSwitch");
		return ptr;
	}

};


// Class Arise.PassBlockDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UPassBlockDatabase : public UXmlDatabaseBase
{
public:
	struct FPassBlockList                              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PassBlockDatabase");
		return ptr;
	}

};


// Class Arise.PCModelBuildDataObject
// 0x0010 (0x01C8 - 0x01B8)
class UPCModelBuildDataObject : public UXmlDatabaseBase
{
public:
	struct FPCModelBuildDatabaseRow                    Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PCModelBuildDataObject");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.PCModelScenarioConvDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UPCModelScenarioConvDatabase : public UXmlDatabaseBase
{
public:
	struct FPCModelScenarioConvDataCollection          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PCModelScenarioConvDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.PFAIController
// 0x0000 (0x0438 - 0x0438)
class APFAIController : public AAIController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFAIController");
		return ptr;
	}

};


// Class Arise.PFAnimNotifyJumpEnd
// 0x0000 (0x0038 - 0x0038)
class UPFAnimNotifyJumpEnd : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFAnimNotifyJumpEnd");
		return ptr;
	}

};


// Class Arise.PFBountyEnemyPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFBountyEnemyPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFBountyEnemyPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeBountyEnemyPointParameter(struct FPFPlacementBountyEnemyPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFBreakPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFBreakPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFBreakPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeBreakPointParameter(struct FPFPlacementBreakPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFCampDatabaseObject
// 0x0040 (0x01F8 - 0x01B8)
class UPFCampDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFCampDatabase                             Database;                                                 // 0x01B8(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFCampDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFCampPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFCampPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFCampPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeCampPointParameter(struct FPFPlacementCampPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFCampShortChatManager
// 0x0018 (0x0380 - 0x0368)
class APFCampShortChatManager : public AShortChatManager
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0368(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFCampShortChatManager");
		return ptr;
	}


	void SetPauseState(EArisePFSCPauseState State);
	bool K2_IsPause();
	bool IsCurrentPauseState(EArisePFSCPauseState State);
	void ForcePauseCancelImpl();
	void ExecuteReleasePause(EArisePFSCPauseState State);
	void ExecutePause(EArisePFSCPauseState State);
};


// Class Arise.PFCharacter
// 0x0010 (0x0800 - 0x07F0)
class APFCharacter : public AAriseCharacter
{
public:
	class UPFActorComponent*                           PFActorComponent;                                         // 0x07F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x07F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFCharacter");
		return ptr;
	}

};


// Class Arise.PFCollisionDebugFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFCollisionDebugFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFCollisionDebugFunctionLibrary");
		return ptr;
	}


	bool STATIC_IsDrawMapCollision();
	bool STATIC_GetShowPFCollisionBlockOnlyCharacter();
	bool STATIC_GetShowPFCollisionBlockOnlyCamera();
	bool STATIC_GetShowPFCollisionBlockAll();
};


// Class Arise.PFCommonDatabaseHandle
// 0x0080 (0x00A8 - 0x0028)
class UPFCommonDatabaseHandle : public UObject
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0028(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFCommonDatabaseHandle");
		return ptr;
	}

};


// Class Arise.PFCommonFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFCommonFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFCommonFunctionLibrary");
		return ptr;
	}


	void STATIC_ToggleDebugCameraForScriptCamera(class AActor* InBaseActor);
	void STATIC_PF_SetupPlayerBuildComponentVisibility(EArisePartyID InPartyID, class UAchCharacterBuildComponent* InSetupBuildComponent);
	bool STATIC_PF_IsMovementStateDash();
	bool STATIC_PF_IsControlEnable();
	bool STATIC_PF_ContainsPartyTopByCharacterID(const struct FString& CharacterID);
	bool STATIC_PF_CanOpenMenu();
	bool STATIC_PF_CanInteract();
	bool STATIC_PF_CanIdleTransitionFromFootHeightDistance(class AActor* InActor, const struct FString& InMotionName);
	void STATIC_OutputLog_BONSAI15062(const struct FVector& InCameraPosition, const struct FVector& InCapsuleTop, const struct FVector& InCapsuleBottom, const struct FVector& InClosestPoint, float InDistance1, float InDistance2);
	void OnMoved__DelegateSignature(class USceneComponent* Moved);
	void STATIC_MoveComponentTo_SupportMultiComponents(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, const struct FScriptDelegate& OnMoved, const struct FLatentActionInfo& LatentInfo);
	class UXmlDatabaseBase* STATIC_GetScriptCameraPresetDatabase();
	bool STATIC_GetScriptCameraClipboardFromDebugCamera(class AActor* InBaseActor);
	void STATIC_GetScriptCameraClipboardDepthOfField(const struct FScriptCameraDepthOfField& DepthOfField);
	struct FScriptCameraVignette STATIC_GetOverrideScriptCameraVignette(const struct FScriptCameraVignette& Base, const struct FScriptCameraVignette& Override);
	struct FScriptCameraDistanceFog STATIC_GetOverrideScriptCameraDistanceFog(const struct FScriptCameraDistanceFog& Base, const struct FScriptCameraDistanceFog& Override);
	struct FScriptCameraDepthOfField STATIC_GetOverrideScriptCameraDepthOfField(const struct FScriptCameraDepthOfField& Base, const struct FScriptCameraDepthOfField& Override);
	int STATIC_GetFishingRewardTipsMaxID();
	int STATIC_GetFishingRewardItemMaxID();
	class UXmlDatabaseBase* STATIC_GetFishingRewardItemDatabase();
	class UXmlDatabaseBase* STATIC_GetCampDatabase();
	class UXmlDatabaseBase* STATIC_GetCampCameraPresetDatabase();
};


// Class Arise.PFCookingPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFCookingPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFCookingPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeCookingPointParameter(struct FPFPlacementCookingPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFDelegateArgs_EnableControl
// 0x0008 (0x0030 - 0x0028)
class UPFDelegateArgs_EnableControl : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFDelegateArgs_EnableControl");
		return ptr;
	}


	void Reset();
	void NotifyDelegateCompleted();
	bool IsDelegateCompleted();
};


// Class Arise.PFDelegateArgs_DisableControl
// 0x0008 (0x0030 - 0x0028)
class UPFDelegateArgs_DisableControl : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFDelegateArgs_DisableControl");
		return ptr;
	}


	void Reset();
	void NotifyDelegateCompleted();
	bool IsDelegateCompleted();
};


// Class Arise.PFDelegateManager
// 0x0030 (0x0358 - 0x0328)
class APFDelegateManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0328(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFDelegateManager");
		return ptr;
	}


	void RequestBroadcast_EnableControl();
	void RequestBroadcast_DisableControl();
	void RemoveDelegate_EnableControl(const struct FScriptDelegate& InDelegate);
	void RemoveDelegate_DisableControl(const struct FScriptDelegate& InDelegate);
	bool IsBroadcastRequested(TEnumAsByte<EPFDelegateType> InType);
	void ExecuteDelegate_EnableControl(int InIndex, class UPFDelegateArgs_EnableControl* InArgs);
	void ExecuteDelegate_DisableControl(int InIndex, class UPFDelegateArgs_DisableControl* InArgs);
	void ExecuteBroadcast_EnableControl(int InDelegateNum);
	void ExecuteBroadcast_DisableControl(int InDelegateNum);
	void CancelRequestedBroadcast(TEnumAsByte<EPFDelegateType> InType);
	void Broadcast_EnableControl();
	void Broadcast_DisableControl();
	void AddDelegate_EnableControl(const struct FScriptDelegate& InDelegate, int InPriority);
	void AddDelegate_DisableControl(const struct FScriptDelegate& InDelegate, int InPriority);
};


// Class Arise.PFEncountSymbolBuildComponent
// 0x01A8 (0x02A0 - 0x00F8)
class UPFEncountSymbolBuildComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00F8(0x0020) MISSED OFFSET
	EAchGameScene                                      GameScene;                                                // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00F8(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData02[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	TArray<class USkeletalMeshComponent*>              BaseComponents;                                           // 0x0120(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UMeshComponent*>                      ExtensionComponents;                                      // 0x0130(0x0010) (ExportObject, ZeroConstructor)
	TArray<struct FAchCharacterWeaponComponentDesc>    WeaponComponentDescs;                                     // 0x0140(0x0010) (ZeroConstructor)
	TArray<class UParticleSystemComponent*>            EffectComponents;                                         // 0x0150(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UMaterialInstanceDynamic*>            MaterialInstanceDynamics;                                 // 0x0160(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData03[0x130];                                     // 0x0170(0x0130) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEncountSymbolBuildComponent");
		return ptr;
	}


	void Unbuild();
	bool IsBuilded();
	bool Build(const struct FString& UnitID, const struct FAchCharacterBuildParameters& Parameters, const struct FString& ExtentsEffectID, bool bTransient);
};


// Class Arise.AriseEncountSymbolBuildComponent
// 0x0000 (0x02A0 - 0x02A0)
class UAriseEncountSymbolBuildComponent : public UPFEncountSymbolBuildComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.AriseEncountSymbolBuildComponent");
		return ptr;
	}

};


// Class Arise.PFEncountSymbol
// 0x0240 (0x0AE0 - 0x08A0)
class APFEncountSymbol : public AAriseCharacterBase
{
public:
	struct FString                                     ModelID;                                                  // 0x08A0(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FString                                     WeaponID;                                                 // 0x08B0(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FString                                     EffectID;                                                 // 0x08C0(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FEnSymStatusParam                           Status;                                                   // 0x08D0(0x0108) (Edit, BlueprintVisible, EditConst)
	float                                              WalkSpeed;                                                // 0x09D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RunSpeed;                                                 // 0x09DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RotateZ;                                                  // 0x09E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUsePathFinding;                                          // 0x09E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x09E5(0x0003) MISSED OFFSET
	float                                              WaterMoveForwardOffset;                                   // 0x09E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x09EC(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              WaterTraceObjects;                                        // 0x09F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bUseAIMovedHeadLocation;                                  // 0x0A00(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0A01(0x0007) MISSED OFFSET
	struct FString                                     HeadBoneName;                                             // 0x0A08(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               bEnableHeadRaycast;                                       // 0x0A18(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableFly;                                               // 0x0A19(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0A1A(0x0002) MISSED OFFSET
	float                                              FlyHeight;                                                // 0x0A1C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNotifySymbol;                                            // 0x0A20(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bLockFinded;                                              // 0x0A21(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableLink;                                              // 0x0A22(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0A23(0x0001) MISSED OFFSET
	float                                              LinkDistance;                                             // 0x0A24(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bLinkListener;                                            // 0x0A28(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bJumpType;                                                // 0x0A29(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFinishedJump;                                            // 0x0A2A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRadar;                                                   // 0x0A2B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0A2C(0x0004) MISSED OFFSET
	struct FString                                     LocationName;                                             // 0x0A30(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bFollowing;                                               // 0x0A40(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDetectTarget;                                            // 0x0A41(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFailedNavigation;                                        // 0x0A42(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFailedNavigation_UsePathfinding;                         // 0x0A43(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     NavRecoveryFailedGoalLocation;                            // 0x0A44(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bLevelDiffChaseEnable;                                    // 0x0A50(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bResearchRoute;                                           // 0x0A51(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0A52(0x0002) MISSED OFFSET
	float                                              RespawnDistance;                                          // 0x0A54(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     FollowRange;                                              // 0x0A58(0x000C) (BlueprintVisible, IsPlainOldData)
	bool                                               bNoUsePathFinding;                                        // 0x0A64(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDeactiveSymbol;                                          // 0x0A65(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableModelCollision;                                   // 0x0A66(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x9];                                       // 0x0A67(0x0009) MISSED OFFSET
	struct FScriptDelegate                             OnChangeRender;                                           // 0x0A70(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnModelCollisionOverlap;                                  // 0x0A80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bLockTurn;                                                // 0x0A90(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRareSymbol;                                              // 0x0A91(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x0A92(0x0002) MISSED OFFSET
	float                                              OutofNavmeshTimeValue;                                    // 0x0A94(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x30];                                      // 0x0A98(0x0030) MISSED OFFSET
	class UAriseEncountSymbolBuildComponent*           CharacterBuildComponent;                                  // 0x0AC8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPFEncountSymbolComponent*                   ActorComponent;                                           // 0x0AD0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ANavigationData*                             MyNavData;                                                // 0x0AD8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEncountSymbol");
		return ptr;
	}


	bool UpdateWaterDepth();
	void UpdateSymbolScale();
	void TickNavMeshRecovery(float DeltaTime, const struct FVector& Location, const struct FVector& RecoveryDestination);
	void SetViewAngle(float NewValue);
	void SetUseRootMotion(bool bUseRootMotion);
	void SetSpawnFlag(bool bEnable);
	void SetSightDistance(float NewValue);
	void SetMoveSpeed(bool bWalk, float MoveSpeedMagnify);
	void SetEnableURO(bool bEnable);
	void PauseAnimation(bool bPause);
	void OnPostMapChange(const struct FString& OldMapName, const struct FString& NewMapName);
	void OnPFMovementStateDash();
	void OnChangeState(EAriseGameState ChangedState, bool NewState);
	void OnChangeDisplayScene(unsigned char ChangedScene, unsigned char OldScene);
	bool NotifyPathRequestFailed(const struct FVector& GoalLocation);
	void IsWanderingType(EEnSymWanderingType Type, TEnumAsByte<EEnSymBoolPin>* Pin);
	void IsWaitType(EEnSymWaitType Type, TEnumAsByte<EEnSymBoolPin>* Pin);
	bool IsUseRootMotion();
	bool IsRendering();
	bool IsOnNavMesh();
	void IsFollowType(EEnSymFollowType Type, TEnumAsByte<EEnSymBoolPin>* Pin);
	bool IsFailingNavigation();
	bool IsEnableURO();
	bool IsBuilded();
	float GetWanderingRange();
	float GetViewAngle();
	float GetSurroundRange();
	void GetSkeletalMeshBounds(struct FVector* Origin, struct FVector* BoxExtent, float* Sphere);
	float GetSightDistance();
	float GetScale();
	float GetRotationRateZ();
	float GetRelativeFlyHeight();
	float GetPushed();
	class APFEnSymPlacement* GetPlacement();
	float GetPatrolSpeed();
	float GetMinWaitTime();
	float GetMinMoveLength();
	float GetMinAngle();
	float GetMaxWaitTime();
	float GetMaxnMoveLength();
	float GetMaxAngle();
	float GetMaxAge();
	float GetMass();
	int GetLevel();
	float GetHeightDistance();
	EEnSymWanderingType GetGiveupType();
	float GetGiveupDistance();
	float GetGiveup();
	float GetFollowSpeed();
	float GetDesiredFlyHeight();
	bool GetBossFlag();
	struct FVector GetAIMovedCurrentLocation();
	void EnableOnlyTickPoseWhenRendered(bool bEnable);
	void EnableEffectComponents(bool bEnable);
	void EnableAllTick(bool bEnable);
	void ClearProposedAdjustment();
	void Build();
	void BPE_UpdateSearchBoxSize();
	void BPE_UpdateMinimapVisibleSymbol(bool bVisible);
	void BPE_ResearchAIRoute();
	bool BPE_IsEntrySearchBox();
	void BPE_ForceRepop();
	void BPE_ExecEntrySearchBox();
};


// Class Arise.PreviewEnSymBoneMeshComponent
// 0x0010 (0x0BF0 - 0x0BE0)
class UPreviewEnSymBoneMeshComponent : public USkeletalMeshComponent
{
public:
	class USceneComponent*                             BoundingAreaComponent;                                    // 0x0BE0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0BE8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PreviewEnSymBoneMeshComponent");
		return ptr;
	}


	bool Build(const struct FString& ModelID);
};


// Class Arise.PFEncountSymbolBoneComponent
// 0x0000 (0x0CB0 - 0x0CB0)
class UPFEncountSymbolBoneComponent : public UAchCharacterBoneMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEncountSymbolBoneComponent");
		return ptr;
	}

};


// Class Arise.PFEncountSymbolComponent
// 0x0008 (0x0458 - 0x0450)
class UPFEncountSymbolComponent : public UPFActorComponent
{
public:
	float                                              MovementBlendSpaceValue;                                  // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnWeightBlendSpaceValue;                                // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEncountSymbolComponent");
		return ptr;
	}


	void ChangeActionStateForce(const struct FName& InStateID);
	void ChangeActionState2(const struct FName& InStateID);
};


// Class Arise.PFEncountSymbolLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFEncountSymbolLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEncountSymbolLibrary");
		return ptr;
	}


	void STATIC_SetLockUnloadBattleAsset(bool bLock);
	bool STATIC_IsPauseSymbol(TArray<EAriseGameState> PauseStates);
	bool STATIC_IsLockUnloadBattleAsset();
	bool STATIC_IsLockEncountGauge();
	bool STATIC_IsLockEncount(TArray<EAriseGameState> LockStates);
	bool STATIC_IsInteractionProhibited();
	bool STATIC_IsFollowingSymbol();
	bool STATIC_IsEncountSurroundDebugDraw();
	bool STATIC_IsEncountMovePathDebugDraw();
	bool STATIC_IsEncountLinkDebugDraw();
	bool STATIC_IsEnableEncountRare();
	bool STATIC_IsEnableEncountInvisible();
	bool STATIC_IsEnableEncountDispLoad();
	bool STATIC_IsDisableEncount();
	bool STATIC_IsAtGoalLocation(const struct FVector& GoalLocation, float AcceptDistance, class APFEncountSymbol* Pawn);
	bool STATIC_IsAISightDebugDraw();
	class ACharacter* STATIC_GetPC();
	bool STATIC_GetNextSplinePoint(bool InSingleMove, int InLastPoint, bool* RefReverse, int* RefNextPoint);
	bool STATIC_GetEnSymGroupData(const struct FString& ID, struct FEncountSymbolGroupData* Data);
	class UPFEncountSymbolComponent* STATIC_GetEnSymActorComponent(class AActor* Actor);
	class AEncountManager* STATIC_GetEncountManager();
	float STATIC_GetDifferenceYawFromVector(class AActor* From, const struct FVector& To);
	void STATIC_FindEnSymStatus(const struct FString& ID, struct FEnSymStatusParam* Status, bool* Valid);
	bool STATIC_FindEnSymLayer(const struct FString& ID, struct FEncountSymbolLayerData* Status);
	void STATIC_FindEnSymGroup(const struct FString& ID, struct FEncountSymbolGroupData* Condision, TArray<struct FBtlUnitPlacement>* Group, bool* Valid);
	void STATIC_ComputeProjectileVelocity(class AActor* Actor, const struct FVector& Target, float Angle, float GravityZ, float* Forward, float* Up, float* FlyDuration);
};


// Class Arise.PFEncountSymbolMovementComponent
// 0x0020 (0x07A0 - 0x0780)
class UPFEncountSymbolMovementComponent : public UCharacterMovementComponent
{
public:
	float                                              MaintainFlyHeightPredictionTime;                          // 0x0780(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaintainFlyHeightPredictionZOffset;                       // 0x0784(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0788(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEncountSymbolMovementComponent");
		return ptr;
	}

};


// Class Arise.PFEncountSymbolSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFEncountSymbolSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEncountSymbolSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeEncountSymbolParameter(struct FPFPlacementEncountSymbolDatabaseRow* DestinationParameter);
};


// Class Arise.PFEnSymSpawnTriggerBox
// 0x0000 (0x0330 - 0x0330)
class APFEnSymSpawnTriggerBox : public ATriggerBox
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymSpawnTriggerBox");
		return ptr;
	}

};


// Class Arise.PFEnSymSphereComponent
// 0x0000 (0x05B0 - 0x05B0)
class UPFEnSymSphereComponent : public USphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymSphereComponent");
		return ptr;
	}


	void OnEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
};


// Class Arise.PFEnSym_AIController
// 0x0078 (0x04B0 - 0x0438)
class APFEnSym_AIController : public AAIController
{
public:
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypeQueries;                                        // 0x0438(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bLockFinded_AIController;                                 // 0x0448(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0449(0x0007) MISSED OFFSET
	class APFPlayerCharacter*                          Target;                                                   // 0x0450(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFollowing;                                               // 0x0458(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSearchArea;                                           // 0x0459(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNavMesh;                                                 // 0x045A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x045B(0x0001) MISSED OFFSET
	struct FVector                                     NavMeshLocation;                                          // 0x045C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bDetectTarget;                                            // 0x0468(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0469(0x0003) MISSED OFFSET
	struct FVector                                     MinFollowRange;                                           // 0x046C(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     MaxFollowRange;                                           // 0x0478(0x000C) (BlueprintVisible, IsPlainOldData)
	bool                                               bForceDetectTarget;                                       // 0x0484(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2B];                                      // 0x0485(0x002B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSym_AIController");
		return ptr;
	}


	void SetTrackTarget(class AActor* Value);
	void SetTargetPoint(class APFEnSymTargetPoint* Value);
	void SetMoveRoute(class USplineComponent* Value);
	void SetBBVector(EEnSymVectorType Type, const struct FVector& Value);
	void SetBBRotator(EEnSymRotatorType Type, const struct FRotator& Value);
	void SetBBFloat(EEnSymFloatType Type, float Value);
	void SetBBBool(EEnSymBoolType Type, bool Value);
	void ResetBlackboard();
	void OnLaunchCharacter();
	void OnDetectActor();
	void OnChangeState(EAriseGameState ChangedState, bool NewState);
	void OnCeilFalling();
	void OnAIPaused(bool bPause);
	bool IsSightPlayer();
	void InitBackHomeBlackBoard();
	class AActor* GetTrackTarget();
	class APFEnSymTargetPoint* GetTargetPoint();
	class USplineComponent* GetMoveRoute();
	struct FVector GetBBVector(EEnSymVectorType Type);
	struct FRotator GetBBRotator(EEnSymRotatorType Type);
	float GetBBFloat(EEnSymFloatType Type);
	bool GetBBBool(EEnSymBoolType Type);
	struct FVector DetectActor_Ray(bool bEntry, const struct FVector& LastTargetLocation);
	void ClearTarget();
	bool BPE_IsExecJump();
	bool BPE_IsExecFall();
	void BPE_ForceGiveup();
	void BPE_ExecJump();
	void ApplyStatus();
};


// Class Arise.PFEnSymPathFollowingComponent
// 0x0030 (0x0300 - 0x02D0)
class UPFEnSymPathFollowingComponent : public UPathFollowingComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x02D0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymPathFollowingComponent");
		return ptr;
	}

};


// Class Arise.PFEnSymAnimInstance
// 0x0010 (0x0570 - 0x0560)
class UPFEnSymAnimInstance : public UAriseAnimInstance
{
public:
	class UASAnimationSet*                             AnimationSet;                                             // 0x0560(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MovementBlendSpaceValue;                                  // 0x0568(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TurnWeightBlendSpaceValue;                                // 0x056C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymAnimInstance");
		return ptr;
	}

};


// Class Arise.PFEnSymAnimNotifyCeil
// 0x0000 (0x0038 - 0x0038)
class UPFEnSymAnimNotifyCeil : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymAnimNotifyCeil");
		return ptr;
	}

};


// Class Arise.PFEnSymAnimNotifyLaunch
// 0x0000 (0x0038 - 0x0038)
class UPFEnSymAnimNotifyLaunch : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymAnimNotifyLaunch");
		return ptr;
	}

};


// Class Arise.PFEnSymAnimNotifyStateChangeMaterial
// 0x0048 (0x0078 - 0x0030)
class UPFEnSymAnimNotifyStateChangeMaterial : public UAnimNotifyState
{
public:
	struct FEncoutSymbolLumpChangeMaterialInfo         Lump;                                                     // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<struct FEncoutSymbolChangeMaterialInfo>     Parameters;                                               // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0050(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymAnimNotifyStateChangeMaterial");
		return ptr;
	}

};


// Class Arise.PFEnSymFindedLinkComponent
// 0x0050 (0x0148 - 0x00F8)
class UPFEnSymFindedLinkComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET
	bool                                               bEnableExtentsCheck;                                      // 0x0108(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRunSpawn;                                                // 0x0109(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3E];                                      // 0x010A(0x003E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymFindedLinkComponent");
		return ptr;
	}


	void Setup(int ArrayNum);
	void Register(class APFEncountSymbol* Symbol, float Variation, int ArrayIndex);
	void Refresh();
	void OutputParameter(struct FEncountSymbolFindedParamData* Output);
	void EnableRangeCheck(const struct FVector& Origin, const struct FVector& Extents);
	void Clear();
};


// Class Arise.PFEnSymLinkComponent
// 0x0020 (0x05E0 - 0x05C0)
class UPFEnSymLinkComponent : public ULineBatchComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05C0(0x0010) UNKNOWN PROPERTY: ArrayProperty Arise.PFEnSymLinkComponent.Listener
	TArray<class APFEncountSymbol*>                    Symbols;                                                  // 0x05D0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymLinkComponent");
		return ptr;
	}


	void WakeupSymbol();
	void RemoveInvalid();
	void RegisterSymbol(class APFEncountSymbol* InActor);
	void RefreshPathVisualizer();
	void OutputParameter(struct FEncountSymbolLinkParamData* Output);
	bool Initialized();
	bool EnableLockFined(bool bEnable);
	void BPE_BindSpawnEvent(class APFEnSymPlacement* InTarget);
};


// Class Arise.PFEnSymMapObjComponent
// 0x0010 (0x0108 - 0x00F8)
class UPFEnSymMapObjComponent : public UActorComponent
{
public:
	struct FScriptDelegate                             OnBattleState;                                            // 0x00F8(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymMapObjComponent");
		return ptr;
	}


	void OnChangeState(EAriseGameState ChangedState, bool NewState);
	bool IsSpawnRange(class UAreaComponent* AreaComponent);
};


// Class Arise.PFEnSymNavLink
// 0x0000 (0x0378 - 0x0378)
class APFEnSymNavLink : public ANavLinkProxy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymNavLink");
		return ptr;
	}

};


// Class Arise.PFEnSymPlacement
// 0x0158 (0x0480 - 0x0328)
class APFEnSymPlacement : public APFPlacementObject
{
public:
	bool                                               bSpawned;                                                 // 0x0328(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0329(0x0007) MISSED OFFSET
	struct FEnSymStatusParam                           Status;                                                   // 0x0330(0x0108) (BlueprintVisible)
	class UAreaComponent*                              AreaComponent;                                            // 0x0438(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bEditCondition_GiveupTime;                                // 0x0440(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_GiveupDistance;                            // 0x0441(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_GiveupType;                                // 0x0442(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_MinWaitTime;                               // 0x0443(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_MaxWaitTime;                               // 0x0444(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_SightDistance;                             // 0x0445(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_HeightDistance;                            // 0x0446(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_WanderingDistance;                         // 0x0447(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_MinMoveLength;                             // 0x0448(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_MaxMoveLength;                             // 0x0449(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEditCondition_SurroundRange;                             // 0x044A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x044B(0x0001) MISSED OFFSET
	float                                              GiveupTime;                                               // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GiveupDistance;                                           // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EEnSymWanderingType                                GiveupType;                                               // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	float                                              MinWaitTime;                                              // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxWaitTime;                                              // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SightDistance;                                            // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeightDistance;                                           // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WanderingDistance;                                        // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinMoveLength;                                            // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxMoveLength;                                            // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SurroundRange;                                            // 0x0474(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseFlyHeightDB;                                          // 0x0478(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0479(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymPlacement");
		return ptr;
	}


	void SetPerceptionRange(bool bUseSearchBox);
	void OutputParameter(struct FEncountSymbolParamData* Output);
	void GetInitSplineLocation(struct FVector* Location);
	void BuildModel();
};


// Class Arise.PFEnSymScenarioLayer
// 0x0030 (0x0358 - 0x0328)
class APFEnSymScenarioLayer : public AActor
{
public:
	struct FPFEncountSymbolLayerID                     ID;                                                       // 0x0328(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FScenarioCondition                          Scenario;                                                 // 0x0338(0x0020) (Edit, BlueprintVisible, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymScenarioLayer");
		return ptr;
	}


	void OutputParameter(struct FEncountSymbolLayerParamData* Output);
	struct FChangeScenarioConditionNamed STATIC_Convert(const struct FScenarioConditionNamed& InCondition);
};


// Class Arise.PFEnSymSoundLinkComponent
// 0x0010 (0x05B0 - 0x05A0)
class UPFEnSymSoundLinkComponent : public UAreaComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05A0(0x0010) UNKNOWN PROPERTY: ArrayProperty Arise.PFEnSymSoundLinkComponent.Listener

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymSoundLinkComponent");
		return ptr;
	}


	void Wakeup();
	void Notify();
};


// Class Arise.PFEnSymSpawnLinkComponent
// 0x0030 (0x0128 - 0x00F8)
class UPFEnSymSpawnLinkComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET
	bool                                               bEnableExtentsCheck;                                      // 0x0108(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRunSpawn;                                                // 0x0109(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1E];                                      // 0x010A(0x001E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymSpawnLinkComponent");
		return ptr;
	}


	void SpawnProcess(class AEncountGroup* InGroup);
	void Setup(int ArrayNum);
	void Register(class AEncountGroup* InGroup, float Variation, int ArrayIndex);
	void OutputParameter(struct FEncountSymbolSpawnParamData* Output);
	void EnableRangeCheck(const struct FVector& Origin, const struct FVector& Extents);
	void Clear();
};


// Class Arise.PFEnSymSpline
// 0x0018 (0x0340 - 0x0328)
class APFEnSymSpline : public AActor
{
public:
	float                                              Circle_Radius;                                            // 0x0328(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Circle_Segments;                                          // 0x032C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Ellipse_RadiusX;                                          // 0x0330(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Ellipse_RadiusY;                                          // 0x0334(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Ellipse_Segments;                                         // 0x0338(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x033C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymSpline");
		return ptr;
	}


	void ImportSpline(class USplinePointAsset* Asset);
	void ExportSpline(const struct FString& AssetName);
	void CreateFigureSpline(TArray<struct FVector> Points);
	void CalcEllipseSpline();
	void CalcCircleSpline();
};


// Class Arise.PFEnSymTargetPoint
// 0x0000 (0x0328 - 0x0328)
class APFEnSymTargetPoint : public ATargetPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFEnSymTargetPoint");
		return ptr;
	}

};


// Class Arise.PFFallingPoint
// 0x0000 (0x0380 - 0x0380)
class APFFallingPoint : public APFPlacementSerializer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFFallingPoint");
		return ptr;
	}

};


// Class Arise.PFFallingPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFFallingPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFFallingPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeFallingPointParameter(struct FPFPlacementFallingPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFFarmFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFFarmFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFFarmFunctionLibrary");
		return ptr;
	}


	void STATIC_SetFarmAnimalCollisionSize(class APFNpcCharacterBase* Actor, float Radius, float HalfHeight, float InteractRange, float IconOffset);
	void STATIC_GetDummyFarmAnimal(TArray<EPFAnimalNo> AnimalNo, int MouseNum, int DogNum, int CatNum, TArray<struct FPFFarmAnimalData>* AnimalData);
};


// Class Arise.PFFastTravelSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFFastTravelSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFFastTravelSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeFastTravelParameter(struct FPFPlacementFastTravelDatabaseRow* DestinationParameter);
};


// Class Arise.PFFishingPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFFishingPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFFishingPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeFishingPointParameter(struct FPFPlacementFishingPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFGimmickBarrierBase
// 0x0000 (0x0380 - 0x0380)
class APFGimmickBarrierBase : public APFPlacementSerializer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFGimmickBarrierBase");
		return ptr;
	}

};


// Class Arise.PFPlacementInteraction
// 0x0058 (0x03D8 - 0x0380)
class APFPlacementInteraction : public APFPlacementSerializer
{
public:
	struct FScenarioConditionNamed                     ScenarioCondition;                                        // 0x0380(0x0020) (Edit, BlueprintVisible)
	TEnumAsByte<EPFPlacementInteraction>               PlacementType;                                            // 0x03A0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A1(0x0007) MISSED OFFSET
	class UClass*                                      InteractInfoType;                                         // 0x03A8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class UClass*                                      InteractEventType;                                        // 0x03B0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	EAreaPriority                                      InteractAreaPriority;                                     // 0x03B8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bInteractEnable;                                          // 0x03B9(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bAutoCalculateInteractArea;                               // 0x03BA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03BB(0x0001) MISSED OFFSET
	float                                              InteractAngle;                                            // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InteractRange;                                            // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InteractHalfHeight;                                       // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bInteractCentering;                                       // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNotifyChangeState;                                       // 0x03C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x03CA(0x0006) MISSED OFFSET
	class UPFInteractionActorComponent*                ActorComponent;                                           // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementInteraction");
		return ptr;
	}


	void SetMobility(TEnumAsByte<EComponentMobility> NewMobility);
	void SetInteractIconOffset(const struct FVector& Offset);
	void SetInteractAreaSize(float Angle, float Range, float HalfHeight, bool bForceUpdate);
	void SetInteractAreaCentering(bool bCentering);
	void ReceivePostEditChangeProperty();
	void ReceiveOnConstruction(const struct FTransform& Transform);
	void ReceiveOnChangeInteractEnable(bool bEnable);
	bool Received_OnChangeState(float DeltaSeconds);
	struct FString MakeLabelName(const struct FString& prefix);
	void InitializeTransform(const struct FQuat& Rotation, const struct FVector& Location, const struct FVector& Scale);
	struct FString GetUniqueLabelName();
	void DB_ShowRepopTime();
	void DB_ShowInformation();
	void DB_ShowDebugString(const struct FVector& TextLocation, const struct FString& Text, const struct FLinearColor& TextColor, float Duration);
};


// Class Arise.PFGimmickBaseActor
// 0x0008 (0x03E0 - 0x03D8)
class APFGimmickBaseActor : public APFPlacementInteraction
{
public:
	EMapGimmickType                                    GimmickType;                                              // 0x03D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFGimmickBaseActor");
		return ptr;
	}


	void RemoveActorMap();
	void AddActorMap();
};


// Class Arise.PFHorseActorComponent
// 0x0000 (0x0450 - 0x0450)
class UPFHorseActorComponent : public UPFActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFHorseActorComponent");
		return ptr;
	}

};


// Class Arise.PFHorseCharacter
// 0x0010 (0x08B0 - 0x08A0)
class APFHorseCharacter : public APFCharacterBase
{
public:
	class UPFHorseActorComponent*                      ActorComponent;                                           // 0x08A0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x08A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFHorseCharacter");
		return ptr;
	}

};


// Class Arise.PFInnComponent
// 0x0010 (0x0108 - 0x00F8)
class UPFInnComponent : public UActorComponent
{
public:
	struct FString                                     ShopID;                                                   // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFInnComponent");
		return ptr;
	}

};


// Class Arise.PFInteractionActorComponent
// 0x0038 (0x0488 - 0x0450)
class UPFInteractionActorComponent : public UPFActorComponent
{
public:
	TArray<struct FModifiedText>                       Messages;                                                 // 0x0450(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FAriseStringDictionaryLabelID               StringID;                                                 // 0x0460(0x0010) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0470(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFInteractionActorComponent");
		return ptr;
	}

};


// Class Arise.PFInteractionModelComponent
// 0x0260 (0x0358 - 0x00F8)
class UPFInteractionModelComponent : public UActorComponent
{
public:
	struct FInteractionModelData                       BaseData;                                                 // 0x00F8(0x0090) (Edit, EditConst)
	struct FInteractionModelData                       GatheredData;                                             // 0x0188(0x0090) (Edit, EditConst)
	struct FInteractionBreakData                       BreakData;                                                // 0x0218(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	struct FVector                                     EffectOffset;                                             // 0x0268(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	class UParticleSystem*                             KiraNormalPS;                                             // 0x0278(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UParticleSystem*                             KiraRarePS;                                               // 0x0280(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FString                                     GatheringPostEvent;                                       // 0x0288(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	struct FScriptDelegate                             OnSetBaseModel;                                           // 0x0298(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             OnSetGatheredModel;                                       // 0x02A8(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             OnSetHideModel;                                           // 0x02B8(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             OnBuildCompleted;                                         // 0x02C8(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)
	TEnumAsByte<EInteractionModelBounds>               BoundsType;                                               // 0x02D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EInteractionModelDraw>                 DrawType;                                                 // 0x02D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bLenaFlag;                                                // 0x02DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bUseCameraFade;                                           // 0x02DB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02DC(0x0004) MISSED OFFSET
	struct FName                                       ActionCommandName;                                        // 0x02E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TWeakObjectPtr<class UStaticMeshComponent>         BaseStaticMesh;                                           // 0x02E8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class USkeletalMeshComponent>       BaseSkelMesh;                                             // 0x02F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UStaticMeshComponent>         ConstStaticMesh;                                          // 0x02F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UStaticMeshComponent>         CollisionMesh;                                            // 0x0300(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              GatheredFadeInterpolationTime;                            // 0x0308(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4C];                                      // 0x030C(0x004C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFInteractionModelComponent");
		return ptr;
	}


	void Unbuild();
	void SetHideModel();
	void SetGatheredModel(bool bUseFade);
	void SetBaseModel();
	void Play(float PlayRate, bool bLoop);
	void OnSetModelEvent__DelegateSignature(bool bVisibility);
	void OnBuildCompletedEvent__DelegateSignature();
	bool IsPlaying();
	bool IsIgnoreShortChat();
	void Close(float PlayRate, bool bLoop);
	void Build(const struct FPFSearchModelID& ModelID, bool bBlock);
};


// Class Arise.PFLadderActorBase
// 0x0000 (0x0380 - 0x0380)
class APFLadderActorBase : public APFPlacementSerializer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFLadderActorBase");
		return ptr;
	}

};


// Class Arise.PFLadderPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFLadderPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFLadderPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeLadderPointParameter(struct FPFPlacementLadderPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFLightweightNpcBuildComponent
// 0x0000 (0x05E8 - 0x05E8)
class UPFLightweightNpcBuildComponent : public UAchScenarioCharacterBuildComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFLightweightNpcBuildComponent");
		return ptr;
	}

};


// Class Arise.PFLightweightNpcCharacter
// 0x0000 (0x0388 - 0x0388)
class APFLightweightNpcCharacter : public APawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFLightweightNpcCharacter");
		return ptr;
	}

};


// Class Arise.PFLightweightNpcMovementComponent
// 0x0000 (0x01A8 - 0x01A8)
class UPFLightweightNpcMovementComponent : public UFloatingPawnMovement
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFLightweightNpcMovementComponent");
		return ptr;
	}

};


// Class Arise.PFMainQuestPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFMainQuestPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFMainQuestPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeMainQuestPointParameter(struct FPFPlacementMainQuestPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFMapGimmickSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFMapGimmickSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFMapGimmickSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeMapGimmickParameter(struct FPFPlacementMapGimmickDatabaseRow* DestinationParameter);
};


// Class Arise.PFNavArea_Door
// 0x0000 (0x0048 - 0x0048)
class UPFNavArea_Door : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNavArea_Door");
		return ptr;
	}

};


// Class Arise.PFNavArea_Jump
// 0x0000 (0x0048 - 0x0048)
class UPFNavArea_Jump : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNavArea_Jump");
		return ptr;
	}

};


// Class Arise.PFNavArea_Fly
// 0x0000 (0x0048 - 0x0048)
class UPFNavArea_Fly : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNavArea_Fly");
		return ptr;
	}

};


// Class Arise.PFNavArea_Self
// 0x0000 (0x0048 - 0x0048)
class UPFNavArea_Self : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNavArea_Self");
		return ptr;
	}

};


// Class Arise.PFNpcActorComponent
// 0x0050 (0x04A0 - 0x0450)
class UPFNpcActorComponent : public UPFActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnTargetedInteractEvent;                                  // 0x0450(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TEnumAsByte<EPFNpcActorWalk>                       WalkType;                                                 // 0x0460(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0461(0x0007) MISSED OFFSET
	struct FName                                       HeadSocketName;                                           // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0470(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcActorComponent");
		return ptr;
	}


	void SetWalkStabilizerEnabled(bool Enabled);
	void SetWalkStabilizer(bool Enabled, float MovementCoef, float RotationCoef);
	void KeepMovementAnimation(bool Keep);
	void K2_SetupAnimSet(class UASAnimationSet* AnimSet);
};


// Class Arise.FarmDatabase
// 0x0070 (0x0228 - 0x01B8)
class UFarmDatabase : public UXmlDatabaseBase
{
public:
	struct FFarmData                                   Database;                                                 // 0x01B8(0x0070) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.FarmDatabase");
		return ptr;
	}

};


// Class Arise.PFNpcAnimMetaDataLookAt
// 0x0008 (0x0030 - 0x0028)
class UPFNpcAnimMetaDataLookAt : public UAnimMetaData
{
public:
	bool                                               bEnable;                                                  // 0x0028(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcAnimMetaDataLookAt");
		return ptr;
	}

};


// Class Arise.PFNpcAnimMetaDataMovement
// 0x0008 (0x0030 - 0x0028)
class UPFNpcAnimMetaDataMovement : public UAnimMetaData
{
public:
	float                                              WalkSpeed;                                                // 0x0028(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RunSpeed;                                                 // 0x002C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcAnimMetaDataMovement");
		return ptr;
	}

};


// Class Arise.PFNpcCameraFadeComponent
// 0x0058 (0x0250 - 0x01F8)
class UPFNpcCameraFadeComponent : public UAlphaMaskComponent
{
public:
	bool                                               bUseFade;                                                 // 0x01F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01F9(0x0003) MISSED OFFSET
	struct FPFNpcCameraSettingsData                    CameraSettings;                                           // 0x01FC(0x0030) (Edit, BlueprintVisible, Transient)
	float                                              NearFadeInDistance;                                       // 0x022C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              NearFadeOutDistance;                                      // 0x0230(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              NearFadeTime;                                             // 0x0234(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              FarFadeInDistance;                                        // 0x0238(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              FarFadeOutDistance;                                       // 0x023C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              FarFadeTime;                                              // 0x0240(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	EPFNpcCameraFadingMode                             FadingMode;                                               // 0x0244(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0245(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcCameraFadeComponent");
		return ptr;
	}

};


// Class Arise.PFNpcCharacter
// 0x0000 (0x08A0 - 0x08A0)
class APFNpcCharacter : public APFCharacterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcCharacter");
		return ptr;
	}

};


// Class Arise.PFNpcCharacterActor
// 0x0010 (0x0338 - 0x0328)
class APFNpcCharacterActor : public AActor
{
public:
	class AActor*                                      PlacementActor;                                           // 0x0328(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0330(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcCharacterActor");
		return ptr;
	}


	void ReceiveDoSetVisibility(bool bEnable);
	bool K2_IsLoading();
	bool K2_IsLoadCompleted();
	bool K2_IsBuilding();
	bool K2_IsBuilded();
};


// Class Arise.PFNpcCharacterBase
// 0x02E0 (0x0B80 - 0x08A0)
class APFNpcCharacterBase : public APFCharacterBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x08A0(0x0018) MISSED OFFSET
	EPFNpcCharacterSpawnType                           SpawnType;                                                // 0x08B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x08B9(0x0007) MISSED OFFSET
	struct FString                                     CharacterID;                                              // 0x08C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	struct FAchCharacterBuildParameters                BuildParameters;                                          // 0x08D0(0x0060) (Edit, BlueprintVisible, EditConst)
	EArisePartyID                                      PartyId;                                                  // 0x0930(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0931(0x0007) MISSED OFFSET
	class UASAnimationSet*                             AnimSet;                                                  // 0x0938(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	struct FSoftObjectPath                             AnimSetPath;                                              // 0x0940(0x0018) (Edit, BlueprintVisible, EditConst)
	class UClass*                                      AnimBlueprintClass;                                       // 0x0958(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	struct FSoftClassPath                              AnimBlueprintClassPath;                                   // 0x0960(0x0018) (Edit, BlueprintVisible, EditConst)
	struct FString                                     BlackboardAssetLabel;                                     // 0x0978(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UBlackboardData*                             Blackboard;                                               // 0x0988(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0990(0x0018) MISSED OFFSET
	struct FString                                     BehaviorTreeAssetLabel;                                   // 0x09A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UBehaviorTree*                               BehaviorTree;                                             // 0x09B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x09C0(0x0018) MISSED OFFSET
	struct FString                                     AIControllerAssetLabel;                                   // 0x09D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData05[0x18];                                      // 0x09E8(0x0018) MISSED OFFSET
	EPFNpcInteractionType                              InteractionType;                                          // 0x0A00(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0A01(0x0007) MISSED OFFSET
	TArray<struct FName>                               RootMotionKeys_Sequence;                                  // 0x0A08(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               RootMotionKeys_Blendspace;                                // 0x0A18(0x0010) (Edit, ZeroConstructor)
	bool                                               bEnableURO;                                               // 0x0A28(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableSoftwareCulling;                                   // 0x0A29(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRenderCulling;                                        // 0x0A2A(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x5];                                       // 0x0A2B(0x0005) MISSED OFFSET
	struct FName                                       InitActionKey;                                            // 0x0A30(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	EPFNpcWeaponVisibleType                            WeaponVisible;                                            // 0x0A38(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0A39(0x0007) MISSED OFFSET
	TArray<struct FString>                             AddGadgetID;                                              // 0x0A40(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	bool                                               bSoftwareCullingEnable;                                   // 0x0A50(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bDoSetVisibility;                                         // 0x0A51(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData09[0x6];                                       // 0x0A52(0x0006) MISSED OFFSET
	struct FString                                     UniqueId;                                                 // 0x0A58(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	float                                              OverrideBoundsSphereRadius;                               // 0x0A68(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0A6C(0x0004) MISSED OFFSET
	class AActor*                                      PlacementActor;                                           // 0x0A70(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UAriseScenarioCharacterBuildComponent*       CharacterBuildComponent;                                  // 0x0A78(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPFNpcActorComponent*                        ActorComponent;                                           // 0x0A80(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPFNpcCameraFadeComponent*                   CameraFadeComponent;                                      // 0x0A88(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPrimitiveComponent*                         CollisionComponent;                                       // 0x0A90(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UActorComponent*>                     InteractionComponents;                                    // 0x0A98(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst)
	unsigned char                                      UnknownData11[0xD8];                                      // 0x0AA8(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcCharacterBase");
		return ptr;
	}


	void UseRootMotion(bool bUse);
	void ReceiveUpdateInteraction();
	void ReceiveDoUpdateSpawn();
	void ReceiveDoUpdateInteraction();
	void ReceiveDoSetVisibility(bool bEnable);
	void ReceiveBuildCharacterInitAnim();
	void PlayActionLatestQueue(const struct FPFNpcAnimPlayActionCommand& DefaultAction);
	void PlayAction(const struct FString& ActionKey, bool bForce, bool bBlend, EPFNpcAnimPlayActionLoop InLoop);
	void K2_UpdateInteraction();
	void K2_SetNeedsFacePoseByDefineData(const struct FPFNpcDefineFacialData& Data);
	void K2_SetInteractSize(float Range, float HalfHeight, float Angle, bool bCentering);
	void K2_SetInteractOffset(const struct FVector& Offset);
	void K2_SetEnableURO(bool bEnable);
	void K2_ResetInteraction();
	bool K2_IsBuildCharacterCompleted();
	bool K2_BuildCharacter(bool bBlock);
	bool IsUseRootMotion();
	bool HasInteractionData();
	struct FString GetLastPlayAction();
	struct FPFNpcInteractionData GetInteractionData();
	TArray<struct FName> GetAnimSetSequenceNameAll();
	void EndOneTop();
	bool BuildRequestFromParameters(const struct FAchCharacterBuildParameters& InBuildParameters, bool bBlock, bool bDelayFacial);
	bool BuildRequestFromID(const struct FString& InCharacterID, bool bBlock, bool bDelayFacial);
	bool BuildRequestByParamsWithOptions(const struct FAchCharacterBuildParameters& InBuildParameters, EPFNpcCharacterBuildType Type, const struct FPFNpcCharacterBuildOptions& Options);
	bool BuildRequestByParams(const struct FAchCharacterBuildParameters& InBuildParameters, EPFNpcCharacterBuildType Type, bool bDelayFacial, bool bCameraFade, const struct FName& InitPlayAction);
	bool BuildRequestByIDWithOptions(const struct FString& InCharacterID, EPFNpcCharacterBuildType Type, const struct FPFNpcCharacterBuildOptions& Options);
	bool BuildRequestByID(const struct FString& InCharacterID, EPFNpcCharacterBuildType Type, bool bDelayFacial, bool bCameraFade, const struct FName& InitPlayAction);
	void BuildRequestByEmpty();
	void BeginOneTop(class AActor* Listener);
};


// Class Arise.PFNpcCharacterEmpty
// 0x00F0 (0x0428 - 0x0338)
class APFNpcCharacterEmpty : public APFNpcCharacterActor
{
public:
	struct FString                                     CharacterID;                                              // 0x0338(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	EPFNpcInteractionType                              InteractionType;                                          // 0x0348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	class UPFNpcActorComponent*                        ActorComponent;                                           // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             SceneComponent;                                           // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPFOneTopComponent*                          OneTopComponent;                                          // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UActorComponent*>                     InteractionComponents;                                    // 0x0368(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0378(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcCharacterEmpty");
		return ptr;
	}


	void ReceiveUpdateInteraction();
	void ReceiveDoUpdateSpawn();
	void ReceiveDoUpdateInteraction();
	void K2_UpdateInteraction();
	void K2_SetInteractSize(float Range, float HalfHeight, float Angle, bool bCentering);
	void K2_SetInteractOffset(const struct FVector& Offset);
	void K2_ResetInteraction();
	bool HasInteractionData();
	struct FPFNpcInteractionData GetInteractionData();
	void BuildRequest();
};


// Class Arise.PFNpcCharacterMeshActor
// 0x00F0 (0x0428 - 0x0338)
class APFNpcCharacterMeshActor : public APFNpcCharacterActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0338(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBuildCharacter;                                         // 0x0358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FPFNpcCharacterMeshData>             MeshDatas;                                                // 0x0368(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class USceneComponent*                             SceneComponent;                                           // 0x0378(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPFNpcCameraFadeComponent*                   CameraFadeComponent;                                      // 0x0380(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UMeshComponent*>                      MeshComponents;                                           // 0x0388(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UPrimitiveComponent*                         CollisionComponent;                                       // 0x0398(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x88];                                      // 0x03A0(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcCharacterMeshActor");
		return ptr;
	}


	void Unbuild();
	void OnBuildEvent__DelegateSignature();
	bool K2_BuildCharacter(bool bBlock);
	bool BuildRequests(TArray<struct FPFNpcCharacterMeshData> InMeshDatas, EPFNpcCharacterBuildType Type, bool bCameraFade, bool bCulling, float InOverrideBoundsSphereRadius, bool bLoadImmediate);
	bool BuildRequest(const struct FString& InModelID, const struct FSoftObjectPath& InMeshPath, EPFNpcCharacterBuildType Type, bool bCameraFade, bool bCulling, float InOverrideBoundsSphereRadius, bool bLoadImmediate);
};


// Class Arise.PFNpcCharacterPawn
// 0x0178 (0x0528 - 0x03B0)
class APFNpcCharacterPawn : public AAriseBuildCharacterPawn
{
public:
	struct FString                                     CharacterID;                                              // 0x03B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	struct FAchCharacterBuildParameters                BuildParameters;                                          // 0x03C0(0x0060) (Edit, BlueprintVisible, EditConst)
	class UClass*                                      AnimClass;                                                // 0x0420(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UASAnimationSet*                             AnimSet;                                                  // 0x0428(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EPFNpcInteractionType                              InteractionType;                                          // 0x0430(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0431(0x0007) MISSED OFFSET
	TArray<struct FName>                               RootMotionKeys_Sequence;                                  // 0x0438(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               RootMotionKeys_Blendspace;                                // 0x0448(0x0010) (Edit, ZeroConstructor)
	class UPFNpcActorComponent*                        ActorComponent;                                           // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC8];                                      // 0x0460(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcCharacterPawn");
		return ptr;
	}


	void ReceiveUpdateInteraction();
	void ReceiveDoUpdateSpawn();
	void ReceiveDoUpdateInteraction();
	void ReceiveDoSetVisibility(bool bEnable);
	void PlayAction(const struct FString& ActionKey, bool bForce);
	void K2_UpdateInteraction();
	void K2_ResetInteraction();
	bool K2_BuildCharacter(bool bBlock);
	bool HasInteractionData();
	struct FPFNpcInteractionData GetInteractionData();
	bool BuildRequestFromParameters(const struct FAchCharacterBuildParameters& InBuildParameters, bool bBlock);
	bool BuildRequestFromID(const struct FString& InCharacterID, bool bBlock);
	bool BuildRequestByParams(const struct FAchCharacterBuildParameters& InBuildParameters, EPFNpcCharacterBuildType Type);
	bool BuildRequestByID(const struct FString& InCharacterID, EPFNpcCharacterBuildType Type);
};


// Class Arise.PFNpcCharacterSkeletalMesh
// 0x0020 (0x0448 - 0x0428)
class APFNpcCharacterSkeletalMesh : public APFNpcCharacterMeshActor
{
public:
	struct FSoftObjectPath                             AnimationPath;                                            // 0x0428(0x0018) (Edit, BlueprintVisible)
	bool                                               bAnimationLoop;                                           // 0x0440(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	float                                              AnimationStartPosition;                                   // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcCharacterSkeletalMesh");
		return ptr;
	}


	TArray<class UMeshComponent*> FindMeshComponentByRootBoneName(const struct FName& BoneName);
	bool BuildRequestWithAnimation(const struct FString& InModelID, const struct FSoftObjectPath& InMeshPath, const struct FSoftObjectPath& InAnimationPath, EPFNpcCharacterBuildType Type, bool bCameraFade, bool bCulling, float InOverrideBoundsSphereRadius, bool bLoop, float StartPosition, bool bLoadImmediate);
};


// Class Arise.PFNpcCharacterStaticMesh
// 0x0040 (0x0468 - 0x0428)
class APFNpcCharacterStaticMesh : public APFNpcCharacterMeshActor
{
public:
	struct FSoftObjectPath                             StaticMesh;                                               // 0x0428(0x0018) (Deprecated)
	struct FString                                     OverrideMaterialModelID;                                  // 0x0440(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UMaterialInstanceDynamic*>            VariationMaterials;                                       // 0x0450(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	class UStaticMeshComponent*                        MeshComponent;                                            // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcCharacterStaticMesh");
		return ptr;
	}


	bool BuildRequestWithOverrideMaterial(const struct FString& InModelID, const struct FSoftObjectPath& InMeshPath, const struct FString& InOverrideMaterialModelID, EPFNpcCharacterBuildType Type, bool bCameraFade, bool bCulling, float InOverrideBoundsSphereRadius, bool bLoadImmediate);
};


// Class Arise.PFNpcDefineDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFNpcDefineDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFNpcDefineDatabase                        Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcDefineDatabaseObject");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.PFNpcFacialPresetDatabaseObject
// 0x0020 (0x01D8 - 0x01B8)
class UPFNpcFacialPresetDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFNpcFacialPresetDatabase                  Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcFacialPresetDatabaseObject");
		return ptr;
	}


	bool IsEnableIndex_Groups(int Index);
	bool IsEnableIndex_Datas(int Index);
};


// Class Arise.NpcDatabaseHandle
// 0x0040 (0x0068 - 0x0028)
class UNpcDatabaseHandle : public UObject
{
public:
	TArray<class UClass*>                              AnimClasses;                                              // 0x0028(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0038(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.NpcDatabaseHandle");
		return ptr;
	}

};


// Class Arise.PFNpcFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFNpcFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcFunctionLibrary");
		return ptr;
	}


	void STATIC_RestructNpcMapSettings(const struct FName& CurrentMapName);
	bool STATIC_GetNpcSettingsParameter(struct FNpcSettingsParameter* OutParameter);
	class APFNpcManager* STATIC_GetNpcManager();
	struct FString STATIC_GetNpcInteractionTypeName(EPFNpcInteractionType Type);
	bool STATIC_GetNpcInteractData(const struct FString& Label, struct FPFNpcResourceInteractData* OutInteractData);
	struct FString STATIC_GetNpcInitActionKey(TArray<struct FString> ActionKeySequence);
	void STATIC_GetNpcFacialDataOverrides(const struct FPFNpcDefineFacialData& Source, const struct FPFNpcDefineFacialData& Override, struct FPFNpcDefineFacialData* Result);
	bool STATIC_GetNpcDefineDataByCond(const struct FString& GroupID, struct FPFNpcDefineData* OutData);
	bool STATIC_GetNpcDefineData(const struct FString& GroupID, struct FPFNpcDefineDatabaseRow* Data);
	bool STATIC_FindNpcFacialPresetByPartyID(EArisePartyID PartyId, int PresetNo, struct FPFNpcFacialPresetData* PresetData);
	bool STATIC_FindNpcFacialPresetByGroup(const struct FName& Group, int PresetNo, struct FPFNpcFacialPresetData* PresetData);
	bool STATIC_FindNpcFacialPreset(int PresetNo, struct FPFNpcFacialPresetData* PresetData);
	void STATIC_FindNpcDefineMultiData(const struct FString& GroupID, TArray<struct FPFNpcDefineDatabaseRow>* MultiData);
	class UClass* STATIC_FindNpcAnimClass(class USkeleton* Skeleton, bool* bFound);
};


// Class Arise.PFNpcInteractionInterface
// 0x0000 (0x0028 - 0x0028)
class UPFNpcInteractionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcInteractionInterface");
		return ptr;
	}


	TArray<TEnumAsByte<EPFNpcInteraction>> GetReleaseInteractionParameters();
};


// Class Arise.PFNpcInterruptInterface
// 0x0000 (0x0328 - 0x0328)
class APFNpcInterruptInterface : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcInterruptInterface");
		return ptr;
	}


	void K2_Execute(class ACharacter* Character);
};


// Class Arise.PFNPCLocationDatabaseAsset
// 0x0010 (0x01C8 - 0x01B8)
class UPFNPCLocationDatabaseAsset : public UXmlDatabaseBase
{
public:
	struct FPFNPCLocationDatabase                      Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNPCLocationDatabaseAsset");
		return ptr;
	}

};


// Class Arise.PFNpcObjectPoolHeap
// 0x0040 (0x0068 - 0x0028)
class UPFNpcObjectPoolHeap : public UObject
{
public:
	TArray<class AActor*>                              Pool;                                                     // 0x0028(0x0010) (ZeroConstructor, Transient)
	class UClass*                                      Class;                                                    // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0040(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcObjectPoolHeap");
		return ptr;
	}

};


// Class Arise.PFNpcObjectPoolComponent
// 0x0068 (0x0160 - 0x00F8)
class UPFNpcObjectPoolComponent : public UActorComponent
{
public:
	TArray<struct FPFNpcObjectPoolElementData>         Elements;                                                 // 0x00F8(0x0010) (Edit, ZeroConstructor)
	TMap<class UClass*, class UPFNpcObjectPoolHeap*>   Heaps;                                                    // 0x0108(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0158(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcObjectPoolComponent");
		return ptr;
	}


	class AActor* SpawnPooledActor(class UClass* ActorClass, const struct FTransform& Transform, bool bAllowIncrease);
	void DespawnPooledActor(class AActor* Actor);
};


// Class Arise.PFNpcManager
// 0x0238 (0x0560 - 0x0328)
class APFNpcManager : public AActor
{
public:
	float                                              BuildDelayTime;                                           // 0x0328(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxBuildAtOnce;                                           // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UPFNpcSettingsBase*                          Settings;                                                 // 0x0330(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FPFNpcSpawnSettingsData                     SpawnSettings;                                            // 0x0338(0x000C) (Edit, BlueprintVisible, Transient)
	struct FPFNpcCameraSettingsData                    CameraSettings;                                           // 0x0344(0x0030) (Edit, BlueprintVisible, Transient)
	struct FPFNpcSpawnSettingsData                     SpawnSettingsHigh;                                        // 0x0374(0x000C) (Edit, BlueprintVisible, Transient)
	struct FPFNpcCameraSettingsData                    CameraSettingsHigh;                                       // 0x0380(0x0030) (Edit, BlueprintVisible, Transient)
	struct FPFNpcTextureSettingsData                   TextureSettings;                                          // 0x03B0(0x0004) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	class UEventComponent*                             EventComponent;                                           // 0x03B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	class UPFNpcObjectPoolComponent*                   ObjectPool;                                               // 0x03C0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	int                                                SpawnFilter;                                              // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x194];                                     // 0x03CC(0x0194) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcManager");
		return ptr;
	}


	void SpawnByPriority(EPFNpcSpawnPriority Priority, EPFNpcSpawnType SpawnType);
	void SpawnByNearestPlayer(EPFNpcSpawnType SpawnType);
	void SpawnById(const struct FPFNpcDefineID& ID, EPFNpcSpawnType SpawnType);
	void SpawnByAreaBoxWithExclude(const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent, TArray<struct FPFNpcDefineID> ExcludeList, EPFNpcSpawnType SpawnType);
	void SpawnByAreaBox(const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent, EPFNpcSpawnType SpawnType);
	void SetSpawnFilter(EPFNpcSpawnStatus Status, bool bEnable);
	void SetOverrideTextureGroupMipBias(int MipBias);
	bool SetInteructionEvent(const struct FPFNpcInteractionData& InteractionData);
	void ResetObjectPool();
	void RemoveWalkSystem(class APFNpcWalkSystem* InWalkSystem);
	void RemoveSpawnCharacter(class APFNpcCharacterBase* InCharacter);
	void RemoveSpawnActor(class APFNpcCharacterActor* InActor);
	void RemovePlacement(class APFPlacementNpc* inPlacement);
	void ReceiveTick_PF();
	void ReceiveSpawnAll(EPFNpcSpawnType SpawnType);
	void ReceiveRemoveAll();
	void ReceiveDespawnAll();
	void ReceiveChangeScenario();
	void OnSpawnAll(EPFNpcSpawnType SpawnType);
	void OnRemoveAll();
	void OnDespawnAll();
	void OnChangedScenarioFlag(int Flag, bool bValid);
	void OnChangedScenarioCounter(int counter, int Prev);
	bool OnBuild(class AActor* Target);
	bool IsSpawnAllComplete();
	bool IsReadyObjectPool();
	bool GetSpawnFilter(EPFNpcSpawnStatus Status);
	class APFNpcWalkSystem* FindWalkSystemById(const struct FPFNpcDefineID& ID);
	class APFPlacementNpc* FindPlacementById(const struct FPFNpcDefineID& ID);
	class APFPlacementNpc* FindPlacementByCharacterId(const struct FAchScenarioCharacterID& ID);
	class APFPlacementNpc* FindPlacementByActorId(const struct FString& actorId);
	void DoUpdateSpawnAll();
	void DoUpdateInteractionAll();
	void DoSetVisibilityAll(bool bEnable);
	void ClearWalkSystems();
	void ClearSpawnCharacter();
	void ClearSpawnActor();
	void ClearPlacements();
	void ClearFreeObjectPool();
	void AddWalkSystem(class APFNpcWalkSystem* InWalkSystem);
	void AddSpawnCharacter(class APFNpcCharacterBase* InCharacter);
	void AddSpawnActor(class APFNpcCharacterActor* InActor);
	void AddPlacement(class APFPlacementNpc* inPlacement);
};


// Class Arise.PFNpcMoveMetaData
// 0x0000 (0x0028 - 0x0028)
class UPFNpcMoveMetaData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcMoveMetaData");
		return ptr;
	}


	void Execute(class APFNpcCharacter* Character);
};


// Class Arise.PFNpcPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFNpcPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeNpcPointParameter(struct FPFPlacementNpcPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFNpcQuestLinkDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFNpcQuestLinkDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFNpcQuestLinkDatabase                     Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcQuestLinkDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFNpcResourceDatabaseObject
// 0x0070 (0x0228 - 0x01B8)
class UPFNpcResourceDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFNpcResourceDatabase                      Database;                                                 // 0x01B8(0x0070) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcResourceDatabaseObject");
		return ptr;
	}


	bool IsEnableIndex_InteractRecord(int Index);
	bool IsEnableIndex_DefineRecord(int Index);
	bool IsEnableIndex_AnimationRecord(int Index);
};


// Class Arise.PFNpcSettingMetaData
// 0x0040 (0x0068 - 0x0028)
class UPFNpcSettingMetaData : public UObject
{
public:
	struct FPFNpcSpawnSettingsData                     SpawnSettings;                                            // 0x0028(0x000C) (Edit, BlueprintReadOnly)
	struct FPFNpcCameraSettingsData                    CameraSettings;                                           // 0x0034(0x0030) (Edit, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcSettingMetaData");
		return ptr;
	}

};


// Class Arise.PFNpcAnimInstance
// 0x0060 (0x05F0 - 0x0590)
class UPFNpcAnimInstance : public UPFAnimInstance
{
public:
	class UASAnimationSet*                             AnimSet;                                                  // 0x0590(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       ActionKey;                                                // 0x0598(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       DeriveActionKey;                                          // 0x05A0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                LoopCount;                                                // 0x05A8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x05AC(0x0004) MISSED OFFSET
	struct FPFNpcAnimPlayActionCommand                 PlayActionOnce;                                           // 0x05B0(0x0010) (BlueprintVisible, Transient)
	TArray<struct FPFNpcAnimPlayActionCommand>         PlayActionQueue;                                          // 0x05C0(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x20];                                      // 0x05D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcAnimInstance");
		return ptr;
	}


	bool GetNextTransitionList(class UASTransition_Base* ThisTransition, TArray<class UASTransition_Base*>* NextTransitionList);
	bool GetCurrentElapsedTime(float* ElapsedTime);
	bool GetCurrentAnimTime(float* CurrentTime, float* TotalTime);
};


// Class Arise.PFNpcSettingsBase
// 0x0040 (0x0138 - 0x00F8)
class UPFNpcSettingsBase : public UActorComponent
{
public:
	struct FPFNpcSpawnSettingsData                     SpawnSettings;                                            // 0x00F8(0x000C) (Edit)
	struct FPFNpcCameraSettingsData                    CameraSettings;                                           // 0x0104(0x0030) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0134(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcSettingsBase");
		return ptr;
	}

};


// Class Arise.PFNpcShopLinkDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFNpcShopLinkDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFNpcShopLinkDatabase                      Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcShopLinkDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFNpcTalkComponent
// 0x0038 (0x0130 - 0x00F8)
class UPFNpcTalkComponent : public UActorComponent
{
public:
	struct FPFNpcTalkID                                GroupID;                                                  // 0x00F8(0x0010) (Edit, BlueprintVisible, Transient)
	struct FScriptMulticastDelegate                    OnSelectNotify;                                           // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0118(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcTalkComponent");
		return ptr;
	}


	void K2_SetTalkTextNo(int TextNo);
	void K2_SetTalkSelectNo(int SelectNo);
	void K2_SetTalkNext();
	bool K2_IsTalkSelect();
	bool K2_IsTalkEnd();
	bool K2_IsTalkable();
	void K2_GetTalkWords(TArray<struct FPFNpcTalkWord>* Words);
	void K2_GetTalkSelect(TArray<struct FModifiedText>* Select);
	bool K2_GetTalkMessage(struct FModifiedText* Message, struct FModifiedText* Name);
	unsigned char K2_GetCharacterReaction(const struct FString& CharacterID);
	unsigned char K2_GetCharacterMotion(const struct FString& CharacterID);
	bool K2_EndTalk();
	bool K2_BeginTalk();
};


// Class Arise.PFNpcTalkDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFNpcTalkDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFNpcTalkDatabase                          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcTalkDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementNpcBase
// 0x0000 (0x0380 - 0x0380)
class APFPlacementNpcBase : public APFPlacementSerializer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementNpcBase");
		return ptr;
	}

};


// Class Arise.PFNpcWalkSystem
// 0x0080 (0x0400 - 0x0380)
class APFNpcWalkSystem : public APFPlacementNpcBase
{
public:
	struct FPFNpcWalkSpawnParams                       SpawnParams;                                              // 0x0380(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      UnknownData00[0x4];                                       // 0x038C(0x0004) MISSED OFFSET
	TArray<struct FPFNpWalkSpawnData>                  SpawnDatas;                                               // 0x0390(0x0010) (ZeroConstructor, Transient, Deprecated)
	TMap<struct FString, struct FPFNpWalkSpawnData>    SpawnMaps;                                                // 0x03A0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	bool                                               bSpawnEnable;                                             // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	int                                                SpawnCount;                                               // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcWalkSystem");
		return ptr;
	}


	void ReceiveTick_PF(float DeltaSeconds);
	void ReceiveDoUpdateSpawn();
	void ReceiveDoSetVisibility(bool bEnable);
	class APFNpcCharacterBase* OnSpawnCharacter(const struct FPFNpWalkSpawnData& SpawnData, bool bImmediately);
	bool OnRespawnCharacter(class APFNpcCharacterBase* Character);
	void OnDespawnRequest();
	void OnDespawnCharacter(class APFNpcCharacterBase* Target);
	bool IsSpawnLocked();
	void CreateSpawnData(const struct FPFNpcDefineID& DefineID, const struct FPFNpcWalkSpawnParams& Params);
};


// Class Arise.PFNpcWaypoint
// 0x0000 (0x0380 - 0x0380)
class APFNpcWaypoint : public APFPlacementNpcBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFNpcWaypoint");
		return ptr;
	}

};


// Class Arise.PFOneTopDatabaseObject
// 0x0020 (0x01D8 - 0x01B8)
class UPFOneTopDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFOneTopDatabase                           Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFOneTopDatabaseObject");
		return ptr;
	}


	bool IsEnableIndex_Region(int Index);
	bool IsEnableIndex_Record(int Index);
};


// Class Arise.OneTopDatabaseHandle
// 0x0020 (0x0048 - 0x0028)
class UOneTopDatabaseHandle : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.OneTopDatabaseHandle");
		return ptr;
	}

};


// Class Arise.PFOneTopFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFOneTopFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFOneTopFunctionLibrary");
		return ptr;
	}


	bool STATIC_GetRegions(TArray<struct FString>* Regions);
	int STATIC_GetRegionMaxID(const struct FString& Region);
	bool STATIC_GetLipSyncCurveDirectoryPath(const struct FString& Label, struct FString* OutLipCurveDirectoryPath);
	bool STATIC_GetInteractData(const struct FString& Label, struct FPFOneTopResourceInteractData* OutInteractData);
	bool STATIC_GetFakeLipSyncParameter(struct FOneTopFakeLipSyncParameter* OutParameter);
	bool STATIC_GetContextRecordByCond(const struct FPFOneTopContext& Context, struct FPFOneTopRecord* OutRecord);
	bool STATIC_GetContext(const struct FString& GroupID, struct FPFOneTopContext* Context);
};


// Class Arise.PFOneTopResourceDatabaseObject
// 0x0040 (0x01F8 - 0x01B8)
class UPFOneTopResourceDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFOneTopResourceDatabase                   Database;                                                 // 0x01B8(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFOneTopResourceDatabaseObject");
		return ptr;
	}


	bool IsEnableIndex_LipSyncRecord(int Index);
	bool IsEnableIndex_InteractRecord(int Index);
	bool IsEnableIndex_DefineRecord(int Index);
};


// Class Arise.PFOwlPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFOwlPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFOwlPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeOwlPointParameter(struct FPFPlacementOwlPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFPathFollowingComponent
// 0x0008 (0x02D8 - 0x02D0)
class UPFPathFollowingComponent : public UPathFollowingComponent
{
public:
	class UCharacterMovementComponent*                 CharacterMoveComp;                                        // 0x02D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPathFollowingComponent");
		return ptr;
	}

};


// Class Arise.PFPCAnimBlueprintDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UPFPCAnimBlueprintDatabase : public UXmlDatabaseBase
{
public:
	struct FPFPCAnimBlueprintDataCollection            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPCAnimBlueprintDatabase");
		return ptr;
	}

};


// Class Arise.PFPCGadgetDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UPFPCGadgetDatabase : public UXmlDatabaseBase
{
public:
	struct FPFPCGadgetDataCollection                   Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPCGadgetDatabase");
		return ptr;
	}

};


// Class Arise.PFPCIdleTransitionDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UPFPCIdleTransitionDatabase : public UXmlDatabaseBase
{
public:
	struct FPFPCIdleTransitionDataCollection           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPCIdleTransitionDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.PFPlacementBountyEnemyPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementBountyEnemyPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementBountyEnemyPointDatabase        Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementBountyEnemyPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementBreakPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementBreakPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementBreakPointDatabase              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementBreakPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementCampPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementCampPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementCampPointDatabase               Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementCampPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementCookingPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementCookingPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementCookingPointDatabase            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementCookingPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFOneTopComponent
// 0x02A0 (0x0398 - 0x00F8)
class UPFOneTopComponent : public UActorComponent
{
public:
	struct FPFOneTopID                                 GroupID;                                                  // 0x00F8(0x0010) (Edit, BlueprintVisible, Transient)
	struct FString                                     SelectionTalkNo;                                          // 0x0108(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	struct FString                                     MergeTalkNo;                                              // 0x0118(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	int                                                TalkCount;                                                // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSelectNotify;                                           // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FPFOneTopRecord                             CachedCurrentRecord;                                      // 0x0140(0x0090) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      UnknownData01[0x1C8];                                     // 0x01D0(0x01C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFOneTopComponent");
		return ptr;
	}


	void K2_SetTalkTextNo(int TextNo);
	void K2_SetTalkSkipNo(int TextNo);
	void K2_SetTalkSelectNo(int SelectNo, int* SelectTextNo);
	void K2_SetTalkPostEvent();
	void K2_SetTalkNext();
	void K2_SetTalkMessageReplaceString(int TextNo, const struct FString& Key, const struct FModifiedText& Value);
	void K2_SetTalkMessageReplaceInt(int TextNo, const struct FString& Key, int Value);
	void K2_SetPlayVoiceEvent(const struct FScriptDelegate& Signature);
	void K2_SetMetaEvent(const struct FScriptDelegate& Signature);
	void K2_SetId(const struct FPFOneTopID& OneTopID);
	void K2_SetCharacterEvent(const struct FScriptDelegate& Signature);
	void K2_ResetTalkSkipNo();
	void K2_ResetTalkMessageReplace();
	void K2_PlayVoice(const struct FString& VoiceLabel, class AActor* Speaker, bool bHasLipSync);
	bool K2_MakeSelection(TArray<struct FModifiedText>* Select, TArray<bool>* Readed, bool* bUseCancel, bool* bSelectLastFocus);
	bool K2_IsTalkSelect();
	bool K2_IsTalkEnd();
	bool K2_IsTalkable();
	bool K2_IsLipSyncVoice();
	void K2_GetTalkWords(TArray<struct FPFOneTopWord>* Words);
	void K2_GetTalkSelect(TArray<struct FModifiedText>* Select);
	int K2_GetTalkMessageStrLen();
	bool K2_GetTalkMessage(struct FModifiedText* Message, struct FModifiedText* Name);
	struct FString K2_GetSelectionID();
	bool K2_GetLipAnimEnable();
	int K2_GetLastTalkSelectTextNo();
	int K2_GetLastTalkSelectIndex();
	float K2_GetFakeLipSyncTime();
	int K2_GetCurrentRecord(struct FPFOneTopRecord* Record);
	unsigned char K2_GetCharacterReaction(const struct FString& CharacterID);
	struct FString K2_GetCharacterAction(const struct FString& CharacterID);
	struct FString K2_GetCaptionID();
	bool K2_GetAlreadyReadSkip(int TextNo, int* SkipNo);
	bool K2_EndTalk();
	bool K2_BeginTalk();
	void K2_AddAlreadyReadSkip(int TextNo, int SkipNo);
};


// Class Arise.PFPlacementEncountSymbolDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementEncountSymbolDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementEncountSymbolDatabase           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementEncountSymbolDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementFacillityPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementFacillityPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementFacillityPointDatabase          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementFacillityPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementFallingPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementFallingPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementFallingPointDatabase            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementFallingPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementFastTravelDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementFastTravelDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementFastTravelDatabase              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementFastTravelDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementFishingPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementFishingPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementFishingPointDatabase            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementFishingPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PlacementDatabaseHandle
// 0x0340 (0x0368 - 0x0028)
class UPlacementDatabaseHandle : public UObject
{
public:
	unsigned char                                      UnknownData00[0x340];                                     // 0x0028(0x0340) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PlacementDatabaseHandle");
		return ptr;
	}

};


// Class Arise.PFPlacementFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFPlacementFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementFunctionLibrary");
		return ptr;
	}


	class UXmlDatabaseBase* STATIC_GetResidentPlacementDatabase(EPlacementDatabaseKey InDatabaseKey);
	bool STATIC_GetPlacementTreasurePointDatabaseRow(const struct FString& actorId, struct FPFPlacementTreasurePointDatabaseRow* Row);
	bool STATIC_GetPlacementTreasurePointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementTreasurePointDatabaseRow>* Rows);
	bool STATIC_GetPlacementTPObjectDatabaseRow(const struct FString& actorId, struct FPFPlacementTPObjectDatabaseRow* Row);
	bool STATIC_GetPlacementTPObjectByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementTPObjectDatabaseRow>* Rows);
	class UStringDictionaryDatabase* STATIC_GetPlacementStringDictionaryClass(const struct FString& InStringDictionaryKey);
	bool STATIC_GetPlacementSearchPointDatabaseRow(const struct FString& actorId, struct FPFPlacementSearchPointDatabaseRow* Row);
	bool STATIC_GetPlacementSearchPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementSearchPointDatabaseRow>* Rows);
	bool STATIC_GetPlacementRecoveryPointDatabaseRow(const struct FString& actorId, struct FPFPlacementRecoveryPointDatabaseRow* Row);
	bool STATIC_GetPlacementRecoveryPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementRecoveryPointDatabaseRow>* Rows);
	bool STATIC_GetPlacementPlayerPassBlockingDatabaseRow(const struct FString& actorId, struct FPFPlacementPlayerPassBlockingDatabaseRow* Row);
	bool STATIC_GetPlacementPlayerPassBlockingByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementPlayerPassBlockingDatabaseRow>* Rows);
	bool STATIC_GetPlacementOwlPointDatabaseRow(const struct FString& actorId, struct FPFPlacementOwlPointDatabaseRow* Row);
	bool STATIC_GetPlacementOwlPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementOwlPointDatabaseRow>* Rows);
	bool STATIC_GetPlacementNpcRole(const struct FPFPlacementNpcPointDatabaseRow& PlacementData, struct FPlacementFoundNpcPointCondition* cond);
	bool STATIC_GetPlacementNpcPointDatabaseRow(const struct FString& actorId, struct FPFPlacementNpcPointDatabaseRow* Row);
	bool STATIC_GetPlacementNpcPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementNpcPointDatabaseRow>* Rows);
	bool STATIC_GetPlacementMapGimmickDatabaseRow(const struct FString& actorId, struct FPFPlacementMapGimmickDatabaseRow* Row);
	bool STATIC_GetPlacementMapGimmickByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementMapGimmickDatabaseRow>* Rows);
	class APFPlacementManager* STATIC_GetPlacementManager();
	bool STATIC_GetPlacementMainQuestPointDatabaseRow(const struct FString& actorId, struct FPFPlacementMainQuestPointDatabaseRow* Row);
	bool STATIC_GetPlacementMainQuestPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementMainQuestPointDatabaseRow>* Rows);
	bool STATIC_GetPlacementFishingPointDatabaseRow(const struct FString& actorId, struct FPFPlacementFishingPointDatabaseRow* Row);
	bool STATIC_GetPlacementFishingPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementFishingPointDatabaseRow>* Rows);
	bool STATIC_GetPlacementFastTravelDatabaseRow(const struct FString& actorId, struct FPFPlacementFastTravelDatabaseRow* Row);
	bool STATIC_GetPlacementFastTravelByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementFastTravelDatabaseRow>* Rows);
	class UXmlDatabaseBase* STATIC_GetPlacementDatabaseClass(const struct FString& InDatabaseKey);
	bool STATIC_GetPlacementCookingPointDatabaseRow(const struct FString& actorId, struct FPFPlacementCookingPointDatabaseRow* Row);
	bool STATIC_GetPlacementCookingPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementCookingPointDatabaseRow>* Rows);
	bool STATIC_GetPlacementCampPointDatabaseRow(const struct FString& actorId, struct FPFPlacementCampPointDatabaseRow* Row);
	bool STATIC_GetPlacementCampPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementCampPointDatabaseRow>* Rows);
	bool STATIC_GetPlacementBreakPointDatabaseRow(const struct FString& actorId, struct FPFPlacementBreakPointDatabaseRow* Row);
	bool STATIC_GetPlacementBreakPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementBreakPointDatabaseRow>* Rows);
	bool STATIC_GetPlacementBountyEnemyPointDatabaseRow(const struct FString& actorId, struct FPFPlacementBountyEnemyPointDatabaseRow* Row);
	bool STATIC_GetPlacementBountyEnemyPointByLocation(const struct FString& LevelName, const struct FString& LocationName, TArray<struct FPFPlacementBountyEnemyPointDatabaseRow>* Rows);
	struct FString STATIC_GetPlacementActorLabel(class AActor* Actor, const struct FString& prefix);
	bool STATIC_EnumPlacementTreasurePointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementStarShipPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementSearchPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementRecoveryPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementQuestNpcPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementOwlPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementNpcPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementMapGimmickByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementLadderPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementFishingPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementFastTravelByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementFallingPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementCampPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	bool STATIC_EnumPlacementBreakPointByLocation(const struct FString& LevelName, const struct FString& LocationName, const struct FScriptDelegate& Callback);
	void STATIC_ConsistencyTestPlacementName();
	void STATIC_ConsistencyTestPlacementDuplication();
};


// Class Arise.PFPlacementLadderPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementLadderPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementLadderPointDatabase             Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementLadderPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementMainQuestPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementMainQuestPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementMainQuestPointDatabase          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementMainQuestPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementMapGimmickDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementMapGimmickDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementMapGimmickDatabase              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementMapGimmickDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementNpcTargetable
// 0x0000 (0x0380 - 0x0380)
class APFPlacementNpcTargetable : public APFPlacementNpcBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementNpcTargetable");
		return ptr;
	}

};


// Class Arise.PFPlacementNpc
// 0x00A8 (0x0428 - 0x0380)
class APFPlacementNpc : public APFPlacementNpcTargetable
{
public:
	struct FPFNpcDefineID                              DefineID;                                                 // 0x0380(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<class APFPlacementNpc*>                     InteractionGroup;                                         // 0x0390(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class APFPlacementNpc*>                     InteractionGroupMember;                                   // 0x03A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	float                                              InteractAngle;                                            // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InteractRange;                                            // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InteractHalfHeight;                                       // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bInteractCentering;                                       // 0x03BC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03BD(0x0003) MISSED OFFSET
	struct FVector                                     InteractOffset;                                           // 0x03C0(0x000C) (Edit, BlueprintVisible, EditConst, IsPlainOldData)
	bool                                               bResetCacheOnUpdateSpawn;                                 // 0x03CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03CD(0x0003) MISSED OFFSET
	float                                              CullingDistance;                                          // 0x03D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	struct FPFNpcTalkID                                TalkGroupId;                                              // 0x03D8(0x0010) (Deprecated)
	struct FPFOneTopID                                 OneTopID;                                                 // 0x03E8(0x0010) (Deprecated)
	class APawn*                                       ControlledPawn;                                           // 0x03F8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class AActor*                                      ControlledActor;                                          // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bControlledActorDistanceDespawn;                          // 0x0408(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIgnoreInteractionOneTop;                                 // 0x0409(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIgnoreInteractionFacility;                               // 0x040A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIgnoreInteractionQuest;                                  // 0x040B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIgnoreInteractionEvent;                                  // 0x040C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIgnoreInteractionShortchat;                              // 0x040D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x040E(0x0002) MISSED OFFSET
	class USceneComponent*                             AreaRootComponent;                                        // 0x0410(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0418(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementNpc");
		return ptr;
	}


	void SetControlledPawn(class APawn* Pawn);
	void SetControlledActorVisibility(bool bVisible);
	void SetControlledActor(class AActor* Actor);
	void ReceiveDoUpdateSpawn();
	void ReceiveDoUpdateInteraction();
	void ReceiveDoSetVisibility(bool bEnable);
	void OnUpdateInteraction(class AActor* PawnActor, const struct FPFNpcInteractionUpdateInfo& UpdateInfo);
	void OnSpawnRequest(EPFNpcSpawnType SpawnType, bool bLoadImmediate);
	void OnDespawnRequest();
	void K2_SetPawnCharacterLw(class APFLightweightNpcCharacter* Character);
	void K2_SetPawnCharacterBase(class APFNpcCharacterBase* Character);
	void K2_SetPawnCharacter(class APFNpcCharacter* Character);
	bool K2_IsSpawnable(bool bForce, struct FPFNpcPlacementData* SpawnPlacementData);
	bool IsSpawnEnable();
	bool IsSpawned();
	bool IsSpawnable();
	bool IsBuildedControlledActor(bool bWithInteractionGroup);
	int GetSpawnStatusMask();
	int GetSpawnPriority();
	bool GetScenarioConditionSpawnData(struct FPFNpcPlacementData* SpawnPlacementData, int* ID);
	struct FVector GetInteractionGroupCenterFromSocket(const struct FName& SocketName);
	struct FVector GetInteractionGroupCenterFromHead();
	struct FVector GetControlledPawnSocketLocation(const struct FName& SocketName);
	class UEventComponent* GetControlledEventComponent();
	class UActorComponent* DuplicateComponent(class AActor* PawnActor, class UClass* ComponentClass);
	bool CheckChangeScenarioConditionByID(int ID);
};


// Class Arise.PFPlacementNpcBoxField
// 0x0008 (0x0330 - 0x0328)
class APFPlacementNpcBoxField : public APFPlacementObject
{
public:
	class UBoxPrimitiveComponent*                      PrimitiveComponent;                                       // 0x0328(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementNpcBoxField");
		return ptr;
	}

};


// Class Arise.PFPlacementNpcPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementNpcPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementNpcPointDatabase                Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementNpcPointDatabaseObject");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.PFPlacementNpcSpawn
// 0x0030 (0x03B0 - 0x0380)
class APFPlacementNpcSpawn : public APFPlacementNpcBase
{
public:
	struct FAchScenarioCharacterID                     CharacterID;                                              // 0x0380(0x0010) (Edit, BlueprintVisible)
	class UASAnimationSet*                             AnimSet;                                                  // 0x0390(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FPFNpcActionKey                             ActionKey;                                                // 0x0398(0x0010) (Edit, BlueprintVisible)
	class APawn*                                       ControlledPawn;                                           // 0x03A8(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementNpcSpawn");
		return ptr;
	}

};


// Class Arise.PFPlacementManager
// 0x0050 (0x0378 - 0x0328)
class APFPlacementManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0328(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementManager");
		return ptr;
	}


	void SetVisibility(const struct FName& Name, bool bVisible);
	void SetVisibilities(TArray<struct FName> names, bool bVisible);
	void RemovePlacement(const struct FName& Name, class APFPlacementObject* Object);
	void GetPlacementAll(TArray<class APFPlacementObject*>* OutPlacements);
	void AddPlacement(const struct FName& Name, class APFPlacementObject* Object);
};


// Class Arise.PFPlacementOwlPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementOwlPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementOwlPointDatabase                Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementOwlPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementPlayerPassBlockingDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementPlayerPassBlockingDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementPlayerPassBlockingDatabase      Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementPlayerPassBlockingDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementSearch
// 0x00D0 (0x03F8 - 0x0328)
class APFPlacementSearch : public APFPlacementObject
{
public:
	struct FPFSearchModelID                            ModelID;                                                  // 0x0328(0x0010) (Edit)
	float                                              OverrideAreaRadius;                                       // 0x0338(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAreaRadius;                                      // 0x033C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x033D(0x0003) MISSED OFFSET
	float                                              OverrideAreaHalfHeight;                                   // 0x0340(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAreaHalfHeight;                                  // 0x0344(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0345(0x0003) MISSED OFFSET
	float                                              OverrideAreaAngle;                                        // 0x0348(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAreaAngle;                                       // 0x034C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x034D(0x0003) MISSED OFFSET
	float                                              OverrideAreaHeightOffset;                                 // 0x0350(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAreaHeightOffset;                                // 0x0354(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESearchModelBounds>                    BoundsType;                                               // 0x0355(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0356(0x0002) MISSED OFFSET
	struct FSearhcModelData                            BaseData;                                                 // 0x0358(0x0020) (Edit, EditConst)
	struct FSearhcModelData                            GatheredData;                                             // 0x0378(0x0020) (Edit, EditConst)
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x0398(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPFSearchActorComponent*                     SearchActorComponent;                                     // 0x03A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAreaComponent*                              AreaComponent;                                            // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x48];                                      // 0x03B0(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementSearch");
		return ptr;
	}


	void OnOpened();
	void OnClosed();
	void K2_StartOpen();
	void K2_StartClose();
	void K2_SetOpened();
	void K2_SetClosed();
	bool K2_GetRowData(struct FPFSearchModelDatabaseRow* Row);
	void K2_Create(bool bBlock);
};


// Class Arise.PFPlacementSearchPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementSearchPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementSearchPointDatabase             Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementSearchPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementStarShipPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementStarShipPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementStarShipPointDatabase           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementStarShipPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementTarget
// 0x0000 (0x0328 - 0x0328)
class APFPlacementTarget : public ATargetPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementTarget");
		return ptr;
	}

};


// Class Arise.PFPlacementTPObjectDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementTPObjectDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementTPObjectDatabase                Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementTPObjectDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFPlacementRecoveryPointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementRecoveryPointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementRecoveryPointDatabase           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementRecoveryPointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFInputConfigAsset
// 0x00B0 (0x00D8 - 0x0028)
class UPFInputConfigAsset : public UObject
{
public:
	struct FPFInputConfig                              SerializedData;                                           // 0x0028(0x00B0) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFInputConfigAsset");
		return ptr;
	}

};


// Class Arise.PFPlayerController
// 0x0058 (0x0820 - 0x07C8)
class APFPlayerController : public AInputExtPlayerController
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x07C8(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlayerController");
		return ptr;
	}


	void K2_ResetAssign(class UPFInputConfigAsset* NewAsset);
	bool K2_IsButtonRepeated_PF(TEnumAsByte<EPFButtonInput> InButton);
	bool K2_IsButtonPressed_PF(TEnumAsByte<EPFButtonInput> InButton);
	bool K2_IsButtonJustReleased_PF(TEnumAsByte<EPFButtonInput> InButton);
	bool K2_IsButtonJustPressed_PF(TEnumAsByte<EPFButtonInput> InButton);
	class APFPlayerCamera* K2_GetPlayerViewCamera();
	float K2_GetAxisValue_PF(TEnumAsByte<EPFAxisInput> InAxis);
	void K2_ControlCharacter(float DeltaSeconds);
};


// Class Arise.PFPlayerPassBlockingSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFPlayerPassBlockingSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlayerPassBlockingSerializeInterface");
		return ptr;
	}


	void ReceiveSerializePlayerPassBlockingParameter(struct FPFPlacementPlayerPassBlockingDatabaseRow* DestinationParameter);
};


// Class Arise.PFPlacementTreasurePointDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFPlacementTreasurePointDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFPlacementTreasurePointDatabase           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFPlacementTreasurePointDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFSearchActorComponent
// 0x0000 (0x0450 - 0x0450)
class UPFSearchActorComponent : public UPFActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFSearchActorComponent");
		return ptr;
	}

};


// Class Arise.PFSearchFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFSearchFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFSearchFunctionLibrary");
		return ptr;
	}


	bool STATIC_SetSearchRepopTime(class UAriseScriptSaveDataChunk_INT64* Chunk, int Index, int RepopTime);
	void STATIC_SetDebMenu_SetValue(const struct FScriptDelegate& SetValue);
	void STATIC_SetDebMenu_GetValue(const struct FScriptDelegate& GetValue);
	void STATIC_SetDebMenu_GetMapNameValues(const struct FScriptDelegate& GetMapNameValues);
	bool STATIC_ResetSearchRepopTime(class UAriseScriptSaveDataChunk_INT64* Chunk, int Index);
	bool STATIC_K2_GetTreasurePointItemData(const struct FPFTreasurePointItemID& ID, struct FTreasurePointItemDatabaseRow* Row);
	bool STATIC_K2_GetSearchPointItemData(const struct FPFSearchPointItemID& ID, struct FSearchPointItemDatabaseRow* Row);
	bool STATIC_K2_GetMiningPointItemData(const struct FPFMiningPointItemID& ID, struct FMiningPointItemDatabaseRow* Row);
	bool STATIC_IsSearchMapGimmickData(const struct FString& ChildActorID, struct FString* MapGimmickActorID);
	int STATIC_GetTreasurePointRecordMax();
	int STATIC_GetTreasurePointItemMaxID();
	EPFSearchPointStatus STATIC_GetSearchRepopStatus(class UAriseScriptSaveDataChunk_INT64* Chunk, int Index, int* RemainingTime);
	int STATIC_GetSearchPointRecordMax();
	int STATIC_GetSearchPointLevelMaxID(const struct FString& LevelName);
	int STATIC_GetSearchPointLevelID(const struct FString& actorId);
	int STATIC_GetSearchOwlMaxRegionNum(const struct FString& InRegionName, bool bContainEx);
	int STATIC_GetSearchOwlMaxID();
	int STATIC_GetSearchOwlMaxDiscoveredNum();
	int STATIC_GetSearchOwlMaxCompletedNum();
	bool STATIC_GetSearchOwlDataFromOwlPointID(const struct FString& OwlPointID, struct FSearchOwlData* Data, bool* bOutFoundSub);
	bool STATIC_GetSearchOwlDataFromID(int InID, struct FSearchOwlData* Data);
	class USearchOwlDatabase* STATIC_GetSearchOwlDatabase();
	bool STATIC_GetSearchOwlData(const struct FString& actorId, struct FSearchOwlData* Data);
	TArray<struct FPFPlacementMapGimmickDatabaseRow> STATIC_GetSearchMapGimmickRecordsInLevel(const struct FString& LevelName);
	int STATIC_GetSearchMapGimmickMaxID();
	int STATIC_GetSearchMapGimmickLevelMaxID(const struct FString& LevelName);
	void STATIC_GetSearchMapGimmickDataRecord(TArray<struct FPFPlacementMapGimmickDatabaseRow>* Data);
	bool STATIC_GetSearchMapGimmickData(const struct FString& actorId, struct FPFPlacementMapGimmickDatabaseRow* Data);
	TArray<struct FPFPlacementEncountSymbolDatabaseRow> STATIC_GetSearchEncountSymbolRecordsInLevel(const struct FString& LevelName);
	int STATIC_GetSearchEncountSymbolMaxID();
	int STATIC_GetSearchEncountSymbolLevelMaxID(const struct FString& LevelName);
	void STATIC_GetSearchEncountSymbolDataRecord(TArray<struct FPFPlacementEncountSymbolDatabaseRow>* Data);
	bool STATIC_GetSearchEncountSymbolData(const struct FString& actorId, struct FPFPlacementEncountSymbolDatabaseRow* Data);
	int STATIC_GetRecoveryPointRecordMax();
	int STATIC_GetRecoveryPointLevelMaxID(const struct FString& LevelName);
	int STATIC_GetMiningPointRecordMax();
	bool STATIC_GetMiningPointPickedData(const struct FString& actorId, const struct FMiningPointItemDatabaseRow& Row, struct FAriseMiningPointSaveInfo* PickedData);
	int STATIC_GetMiningPointLevelMaxID(const struct FString& LevelName);
	int STATIC_GetMiningPointLevelID(const struct FString& actorId);
	bool STATIC_GetDebMenu_SetValue(const struct FString& UserData, bool Value);
	bool STATIC_GetDebMenu_GetValue(const struct FString& UserData, bool* Value);
	bool STATIC_GetDebMenu_GetMapNameValues(const struct FString& MapName, TArray<struct FString>* Values);
	int STATIC_GetCollectionRate_SearchOwl();
	int STATIC_GetCampPointRecordMax();
	int STATIC_GetCampPointLevelMaxID(const struct FString& LevelName);
	int STATIC_GetBreakPointRecordMax();
	int STATIC_GetBreakPointLevelMaxID(const struct FString& LevelName);
	int STATIC_GetBreakPointLevelID(const struct FString& actorId);
	void STATIC_BindGetCollectionRate_SearchOwl(const struct FScriptDelegate& InEvent);
};


// Class Arise.PFSearchModelDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UPFSearchModelDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FPFSearchModelDatabase                      Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFSearchModelDatabaseObject");
		return ptr;
	}

};


// Class Arise.PFSearchOwlPreviewComponent
// 0x0000 (0x0BE0 - 0x0BE0)
class UPFSearchOwlPreviewComponent : public USkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFSearchOwlPreviewComponent");
		return ptr;
	}


	void Initialize(const struct FString& ModelID, float Scale);
};


// Class Arise.PFSearchOwlRewardFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPFSearchOwlRewardFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFSearchOwlRewardFunctionLibrary");
		return ptr;
	}


	void STATIC_TryGetRewardItem(int InRewardID, TArray<struct FSearchOwlRewardItemData>* OutItemData);
	int STATIC_SearchMaxID();
	void STATIC_MakeRewardList(int InOwlNum, TArray<int>* OutRewardID);
	class USearchOwlRewardDatabase* STATIC_GetDatabase();
};


// Class Arise.PFSearchPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFSearchPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFSearchPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeSearchPointParameter(struct FPFPlacementSearchPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFShipComponent
// 0x0000 (0x00F8 - 0x00F8)
class UPFShipComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFShipComponent");
		return ptr;
	}

};


// Class Arise.PFShortChatManager
// 0x01B0 (0x0518 - 0x0368)
class APFShortChatManager : public AShortChatManager
{
public:
	TArray<struct FPFShortChatLookAtTime>              LookAtTimeData;                                           // 0x0368(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FPFShortChatFunctionCoop                    FunctionCoopData;                                         // 0x0378(0x0028) (BlueprintVisible)
	unsigned char                                      UnknownData00[0x178];                                     // 0x03A0(0x0178) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFShortChatManager");
		return ptr;
	}


	void SetPauseState(EArisePFSCPauseState State);
	void OnPostMapChange(const struct FString& OldMapName, const struct FString& NewMapName);
	void OnChangedScenarioFlag(int Flag, bool bValid);
	void OnChangedScenarioCounter(int counter, int Prev);
	void LockMapChangeSC();
	bool IsStandbyState();
	bool IsLockPause();
	bool IsLockObjSC();
	bool IsCurrentPauseState(EArisePFSCPauseState State);
	void ForcePauseCancelImpl();
	void ExecuteReleasePause(EArisePFSCPauseState State);
	void ExecutePause(EArisePFSCPauseState State);
	void EnableLockPause(bool bEnable);
	void ClearPlayedList();
};


// Class Arise.PFStandingNpcCharacter
// 0x0010 (0x0B90 - 0x0B80)
class APFStandingNpcCharacter : public APFNpcCharacterBase
{
public:
	class UPFOneTopComponent*                          OneTopComponent;                                          // 0x0B80(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B88(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFStandingNpcCharacter");
		return ptr;
	}

};


// Class Arise.PFStarShipPoint
// 0x0000 (0x0380 - 0x0380)
class APFStarShipPoint : public APFPlacementSerializer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFStarShipPoint");
		return ptr;
	}

};


// Class Arise.PFStarShipPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFStarShipPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFStarShipPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeStarShipPointParameter(struct FPFPlacementStarShipPointDatabaseRow* DestinationParameter);
};


// Class Arise.PFTPObjectSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFTPObjectSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFTPObjectSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeTPObjectParameter(struct FPFPlacementTPObjectDatabaseRow* DestinationParameter);
};


// Class Arise.PFTreasurePointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFTreasurePointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFTreasurePointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeTreasurePointParameter(struct FPFPlacementTreasurePointDatabaseRow* DestinationParameter);
};


// Class Arise.PFWalkableNpcCharacter
// 0x0000 (0x0B80 - 0x0B80)
class APFWalkableNpcCharacter : public APFNpcCharacterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFWalkableNpcCharacter");
		return ptr;
	}


	void SetStopMovementOnFinish(bool bEnable);
	void SetNavWalkingOptions(bool bNavWalking, bool bCheckFloor, bool bSweep, bool bPhysicsInteraction);
	void SetCrowdSimulationEnabled(bool bEnable);
};


// Class Arise.PF_HUD_Manager
// 0x0008 (0x0330 - 0x0328)
class APF_HUD_Manager : public AActor
{
public:
	EPFUIPattern                                       C_PFUIPattern;                                            // 0x0328(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EPFUIParts                                         C_PFUIParts;                                              // 0x0329(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x032A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PF_HUD_Manager");
		return ptr;
	}


	void C_SetPFUIPatternInt(int InEPFUIPattern);
	void C_SetPFUIPattern(EPFUIPattern InEPFUIPattern);
	int C_GetPFUIPatternInt();
	EPFUIPattern C_GetPFUIPattern();
	bool C_GetPartsShow(int InPartsIndex);
};


// Class Arise.PopupInfoManager
// 0x0030 (0x0058 - 0x0028)
class UPopupInfoManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0028(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PopupInfoManager");
		return ptr;
	}


	bool Register(const struct FModifiedText& Message, const struct FName& Type, int inImageType, int inImageID, int inRarity, EOption Option);
	int Next();
	void Initialize();
	bool HasNextData();
	bool GetNextData(struct FPopupInfoData* oData);
	bool GetLogList(TArray<struct FPopupInfoData>* oList);
	class UPopupInfoManager* STATIC_CreateInstance();
	void Clear();
};


// Class Arise.PlayerPassBlocking
// 0x0030 (0x0358 - 0x0328)
class APlayerPassBlocking : public AActor
{
public:
	struct FString                                     OwnerMapName;                                             // 0x0328(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                LocalID;                                                  // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	struct FString                                     ActorName;                                                // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	EPassBlockMsgType                                  MsgType;                                                  // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0351(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PlayerPassBlocking");
		return ptr;
	}


	class UPassBlockDatabase* GetPassBlockDatabase(const struct FString& DatabasePath);
};


// Class Arise.PostEventEncountDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UPostEventEncountDatabase : public UXmlDatabaseBase
{
public:
	struct FPostEventEncountList                       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PostEventEncountDatabase");
		return ptr;
	}

};


// Class Arise.PostEventEquipDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UPostEventEquipDatabase : public UXmlDatabaseBase
{
public:
	struct FPostEventEquipList                         Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PostEventEquipDatabase");
		return ptr;
	}

};


// Class Arise.PostEventItemDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UPostEventItemDatabase : public UXmlDatabaseBase
{
public:
	struct FPostEventItemList                          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PostEventItemDatabase");
		return ptr;
	}

};


// Class Arise.PostEventMiscDatabase
// 0x0030 (0x01E8 - 0x01B8)
class UPostEventMiscDatabase : public UXmlDatabaseBase
{
public:
	struct FPostEventMiscData                          Database;                                                 // 0x01B8(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PostEventMiscDatabase");
		return ptr;
	}

};


// Class Arise.PostEventScenarioBitFlagDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UPostEventScenarioBitFlagDatabase : public UXmlDatabaseBase
{
public:
	struct FPostEventScenarioBitFlagList               Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PostEventScenarioBitFlagDatabase");
		return ptr;
	}

};


// Class Arise.PreviewCharacterBoneMeshComponent
// 0x0000 (0x0CB0 - 0x0CB0)
class UPreviewCharacterBoneMeshComponent : public UAchCharacterBoneMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PreviewCharacterBoneMeshComponent");
		return ptr;
	}

};


// Class Arise.PreviewScenarioCharacterBuildComponent
// 0x0000 (0x05E8 - 0x05E8)
class UPreviewScenarioCharacterBuildComponent : public UAchScenarioCharacterBuildComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PreviewScenarioCharacterBuildComponent");
		return ptr;
	}

};


// Class Arise.ProfileFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UProfileFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ProfileFunctionLibrary");
		return ptr;
	}


	void STATIC_SetMapProfileRegulationWithObject();
	void STATIC_SetMapProfileRegulationNoObject();
	void STATIC_ParseProfileCommandLine();
};


// Class Arise.QuestClearDatabase
// 0x0020 (0x01D8 - 0x01B8)
class UQuestClearDatabase : public UXmlDatabaseBase
{
public:
	struct FQuestClearDataRow                          Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestClearDatabase");
		return ptr;
	}

};


// Class Arise.QuestComponent
// 0x0090 (0x01B8 - 0x0128)
class UQuestComponent : public UAriseScriptComponent
{
public:
	TEnumAsByte<EQuestType>                            Type;                                                     // 0x0128(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0129(0x0007) MISSED OFFSET
	struct FQuestID                                    QuestID;                                                  // 0x0130(0x0010) (Edit, BlueprintVisible)
	int                                                StepNo;                                                   // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	struct FString                                     String;                                                   // 0x0148(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     StepID;                                                   // 0x0158(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0168(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestComponent");
		return ptr;
	}


	bool IsStepOpened();
	bool IsStepCurrentPurpose();
	bool IsStepCleared();
	bool IsQuestOpened();
	bool IsQuestLineuped();
	bool IsQuestCleared();
};


// Class Arise.PFRecoveryPointSerializeInterface
// 0x0000 (0x0028 - 0x0028)
class UPFRecoveryPointSerializeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFRecoveryPointSerializeInterface");
		return ptr;
	}


	void ReceiveSerializeRecoveryPointParameter(struct FPFPlacementRecoveryPointDatabaseRow* DestinationParameter);
};


// Class Arise.QuestDatabaseHandle
// 0x00C0 (0x00E8 - 0x0028)
class UQuestDatabaseHandle : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0028(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestDatabaseHandle");
		return ptr;
	}

};


// Class Arise.QuestDatabaseLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuestDatabaseLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestDatabaseLibrary");
		return ptr;
	}


	void STATIC_SetQuestStepProgressFromID(const struct FString& StepID, TEnumAsByte<EQuestStepProgress> Progress);
	void STATIC_SetQuestStepProgressByID(const struct FString& QuestID, int StepNo, TEnumAsByte<EQuestStepProgress> Progress);
	void STATIC_SetQuestStepProgress(const struct FQuestStepData& QuestStepData, TEnumAsByte<EQuestStepProgress> Progress);
	void STATIC_SetQuestReorderByID(const struct FString& QuestID, bool bEnable);
	bool STATIC_SetQuestGuideStepGuideLocClearedByName(const struct FQuestData& QuestData, const struct FQuestStepData& StepData, const struct FName& GuideLocName, bool bEnable);
	bool STATIC_SetQuestGuideStepGuideLocClearedByID(const struct FString& QuestID, int StepNo, const struct FName& GuideLocName, bool bEnable);
	bool STATIC_SetQuestGuideStepGuideLocClearedAll(const struct FString& QuestID, int StepNo, bool bEnable);
	bool STATIC_SetQuestGuideStepGuideLocCleared(const struct FQuestData& QuestData, const struct FQuestStepData& StepData, int GuideLocNo, bool bEnable);
	void STATIC_SetQuestGuideProgressFromID(const struct FString& QuestID, TEnumAsByte<EQuestGuideProgress> Progress);
	void STATIC_SetQuestGuideProgressByID(const struct FString& QuestID, TEnumAsByte<EQuestGuideProgress> Progress);
	void STATIC_SetQuestGuideProgress(const struct FQuestData& QuestData, TEnumAsByte<EQuestGuideProgress> Progress);
	void STATIC_SetQuestCounterDelegate(const struct FScriptDelegate& InDelegate);
	void STATIC_SetQuestClearCountByID(const struct FString& QuestID, int ClearCount);
	bool STATIC_SetQuestClear(const struct FQuestID& QuestID);
	bool STATIC_SetIntByName(class UObject* Target, const struct FName& VarName, int NewValue, int* outInt);
	bool STATIC_SearchQuestLineupDataFromLabelID(const struct FString& LabelID, struct FQuestLineupData* QuestLineupData);
	bool STATIC_SearchQuestLineupData(const struct FString& Key, const struct FString& ID, struct FQuestLineupData* QuestLineupData);
	bool STATIC_SearchQuestData(const struct FString& Key, const struct FString& ID, struct FQuestData* QuestData);
	bool STATIC_ResetQuestGuideStepAllByID(const struct FString& QuestID);
	void STATIC_QuestClearAll();
	bool STATIC_IsQuestStepCheckRewardByID(const struct FString& QuestID, int StepNo);
	bool STATIC_IsQuestReorderByID(const struct FString& QuestID);
	bool STATIC_IsQuestGuideStepGuideLocClearedByName(const struct FQuestData& QuestData, const struct FQuestStepData& StepData, const struct FName& GuideLocName);
	bool STATIC_IsQuestGuideStepGuideLocClearedByID(const struct FString& QuestID, int StepNo, const struct FName& GuideLocName);
	bool STATIC_IsQuestGuideStepGuideLocCleared(const struct FQuestData& QuestData, const struct FQuestStepData& StepData, int GuideLocNo);
	bool STATIC_GetTalkData(const struct FQuestID& QuestID, int TalkNo, struct FQuestTalkData* TalkData);
	int STATIC_GetSubQuestClearRecordMax();
	TEnumAsByte<EQuestStepProgress> STATIC_GetQuestStepProgressFromID(const struct FString& StepID);
	TEnumAsByte<EQuestStepProgress> STATIC_GetQuestStepProgressByID(const struct FString& QuestID, int StepNo);
	TEnumAsByte<EQuestStepProgress> STATIC_GetQuestStepProgress(const struct FQuestStepData& QuestStepData);
	int STATIC_GetQuestNum();
	int STATIC_GetQuestLineupNum();
	bool STATIC_GetQuestLineupDataFromIndex(int Index, struct FQuestLineupData* QuestLineupData);
	bool STATIC_GetQuestIDFromGuideLocation(const struct FString& GuideLocName, struct FString* QuestID, int* StepNo);
	int STATIC_GetQuestGuideStepInProgress(const struct FQuestData& QuestData, TEnumAsByte<EQuestGuideProgress> Progress, TArray<struct FQuestStepData>* QuestStepData);
	TEnumAsByte<EQuestGuideProgress> STATIC_GetQuestGuideProgressWithReorderByID(const struct FString& QuestID);
	TEnumAsByte<EQuestGuideProgress> STATIC_GetQuestGuideProgressWithReorder(const struct FQuestData& QuestData);
	TEnumAsByte<EQuestGuideProgress> STATIC_GetQuestGuideProgressFromID(const struct FString& QuestID);
	TEnumAsByte<EQuestGuideProgress> STATIC_GetQuestGuideProgressByID(const struct FString& QuestID);
	TEnumAsByte<EQuestGuideProgress> STATIC_GetQuestGuideProgress(const struct FQuestData& QuestData);
	TEnumAsByte<EQuestGuideLocationRole> STATIC_GetQuestGuideLocationRoleByID(const struct FString& QuestID, TArray<struct FString> QuestLocations, int* StepNo);
	TEnumAsByte<EQuestGuideLocationRole> STATIC_GetQuestGuideLocationRole(const struct FQuestData& QuestData, TArray<struct FString> QuestLocations, int* StepNo);
	TEnumAsByte<EQuestGuideCategory> STATIC_GetQuestGuideCategoryByID(const struct FString& QuestID);
	TEnumAsByte<EQuestGuideCategory> STATIC_GetQuestGuideCategory(const struct FQuestData& QuestData);
	bool STATIC_GetQuestDataFromIndex(int Index, struct FQuestData* QuestData);
	int STATIC_GetQuestClearCountByID(const struct FString& QuestID);
	int STATIC_GetPurposeItemCounterDataMulti(TArray<struct FQuestTargetCounterData>* CounterData);
	int STATIC_GetPurposeEnemyCounterDataMulti(TArray<struct FQuestTargetCounterData>* CounterData);
	bool STATIC_GetItemCounterQuestList(TArray<struct FString>* QuestList);
	int STATIC_GetItemCounterMaxID();
	bool STATIC_GetItemCounterDataMultiByTargetID(const struct FString& TargetID, TArray<struct FQuestTargetCounterData>* CounterData);
	bool STATIC_GetItemCounterDataMultiByQuestID(const struct FQuestID& QuestID, TArray<struct FQuestTargetCounterData>* CounterData);
	bool STATIC_GetItemCounterDataByLabel(const struct FString& Label, struct FQuestTargetCounterData* CounterData);
	bool STATIC_GetIntByName(class UObject* Target, const struct FName& VarName, int* outInt);
	bool STATIC_GetEnemyCounterQuestList(TArray<struct FString>* QuestList);
	int STATIC_GetEnemyCounterMaxID();
	bool STATIC_GetEnemyCounterDataMultiByTargetID(const struct FString& TargetID, TArray<struct FQuestTargetCounterData>* CounterData);
	bool STATIC_GetEnemyCounterDataMultiByQuestID(const struct FQuestID& QuestID, TArray<struct FQuestTargetCounterData>* CounterData);
	bool STATIC_GetEnemyCounterDataByLabel(const struct FString& Label, struct FQuestTargetCounterData* CounterData);
	TArray<int> STATIC_FindCounterDataMultiByTargetID(TArray<struct FQuestTargetCounterData> CounterData, const struct FString& TargetID);
	void STATIC_ApplyQuestCounter(const struct FQuestTargetCounterData& CounterData, bool* bArrived);
	void STATIC_AddQuestClearCountByID(const struct FString& QuestID);
};


// Class Arise.QuestLineupDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UQuestLineupDatabase : public UXmlDatabaseBase
{
public:
	struct FQuestLineupDataRow                         Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestLineupDatabase");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.QuestLocation
// 0x0010 (0x0338 - 0x0328)
class AQuestLocation : public AActor
{
public:
	TArray<struct FTransform>                          Transforms;                                               // 0x0328(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestLocation");
		return ptr;
	}


	void InitializeLocation(class AActor* NewLocationActor, int ID);
};


// Class Arise.QuestManager
// 0x0040 (0x0368 - 0x0328)
class AQuestManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0328(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestManager");
		return ptr;
	}


	bool ReceiveOnCheckLineup();
	bool OnCheckLineup();
	void GetCurrentSubQuest_Native(bool* OutIsFoundSubQuest, TArray<struct FString>* OutSubQuestIDs, TArray<int>* OutSubQuestStepIndexes);
	void GetCurrentMainQuest_Native(bool* OutIsFoundMainQuest, struct FString* OutMainQuestID, int* OutMainQuestStepIndex);
	bool CheckCurrentQuest_Native();
};


// Class Arise.QuestMessageDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UQuestMessageDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FQuestMessageDatabase                       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestMessageDatabaseObject");
		return ptr;
	}

};


// Class Arise.QuestSaveData
// 0x0040 (0x0068 - 0x0028)
class UQuestSaveData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0028(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestSaveData");
		return ptr;
	}


	void Terminate();
	void SetQuestStepGuideLocCleared(const struct FName& QName, int StepNo, int GuideLocNo, bool bEnable);
	void SetQuestReorder(const struct FName& QName, bool bReorder);
	void SetQuestClearCount(const struct FName& QName, int ClearCount);
	void SetDefault();
	bool IsQuestStepGuideLocCleared(const struct FName& QName, int StepNo, int GuideLocNo);
	bool IsQuestReorder(const struct FName& QName);
	void Initialize();
	int GetQuestClearCount(const struct FName& QName);
	void AddQuestClearCount(const struct FName& QName);
};


// Class Arise.QuestSaveDataLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuestSaveDataLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestSaveDataLibrary");
		return ptr;
	}


	class UQuestSaveData* STATIC_GetQuestSaveData();
	class UQuestSaveData* STATIC_CreateQuestSaveData(class UClass* SaveGameClass);
};


// Class Arise.QuestTargetCounterDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UQuestTargetCounterDatabase : public UXmlDatabaseBase
{
public:
	struct FQuestTargetCounterRow                      Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestTargetCounterDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.RecipeAccessoryDatabase
// 0x0010 (0x01C8 - 0x01B8)
class URecipeAccessoryDatabase : public UXmlDatabaseBase
{
public:
	struct FRecipeAccessoryDatabaseRow                 Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.RecipeAccessoryDatabase");
		return ptr;
	}

};


// Class Arise.RecipeWeaponDatabase
// 0x0010 (0x01C8 - 0x01B8)
class URecipeWeaponDatabase : public UXmlDatabaseBase
{
public:
	struct FRecipeWeaponDatabaseRow                    Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.RecipeWeaponDatabase");
		return ptr;
	}

};


// Class Arise.QuestDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UQuestDatabase : public UXmlDatabaseBase
{
public:
	struct FQuestDatabaseRow                           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.QuestDatabase");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.ScenarioBitFlageDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UScenarioBitFlageDatabase : public UXmlDatabaseBase
{
public:
	struct FScenarioBitFlagDatabaseArray               Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ScenarioBitFlageDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.SceneFade
// 0x0000 (0x0028 - 0x0028)
class USceneFade : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SceneFade");
		return ptr;
	}

};


// Class Arise.SceneFinalizeManager
// 0x0068 (0x0090 - 0x0028)
class USceneFinalizeManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TMap<struct FString, class UAriseGenericTask*>     PoolTasks;                                                // 0x0030(0x0050) (ZeroConstructor, Transient)
	TArray<struct FString>                             RemoveList;                                               // 0x0080(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SceneFinalizeManager");
		return ptr;
	}


	void RemoveTask(const struct FString& TaskName);
	bool IsRunAnyTask();
	bool FindTask(const struct FString& taskSubStrName, TArray<struct FString>* resList);
	bool ExistTask(const struct FString& TaskName);
	bool AddTask(const struct FString& TaskName, class UAriseGenericTask* aTask);
};


// Class Arise.SceneFinalizeTask
// 0x0000 (0x0040 - 0x0040)
class USceneFinalizeTask : public UAriseGenericTask
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SceneFinalizeTask");
		return ptr;
	}

};


// Class Arise.ScreenMaskBase
// 0x0000 (0x0328 - 0x0328)
class AScreenMaskBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ScreenMaskBase");
		return ptr;
	}


	void SetVisible(bool Visible);
	void OnReleaseCurrent();
	void OnAssignCurrent();
	void IsUnMasked(bool* bUnMasked);
	void IsMasked(bool* bMasked);
	class UMaterialInstanceDynamic* GetDynamicMaterialInstance();
	void DoScreenMask(bool MaskOn, bool bInstantly);
	void DoCaptureSceneComplete();
	void DoCaptureScene(const struct FTransform& CameraTransform, class UCameraComponent* BaseCamera);
};


// Class Arise.ScriptCameraDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UScriptCameraDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FScriptCameraDatabase                       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ScriptCameraDatabaseObject");
		return ptr;
	}


	bool IsEnableIndex_Data(int Index);
};


// Class Arise.SearchOwlDatabase
// 0x0010 (0x01C8 - 0x01B8)
class USearchOwlDatabase : public UXmlDatabaseBase
{
public:
	struct FSearchOwlDatabaseRow                       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SearchOwlDatabase");
		return ptr;
	}

};


// Class Arise.SearchPointItemDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class USearchPointItemDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FSearchPointItemDatabase                    Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SearchPointItemDatabaseObject");
		return ptr;
	}

};


// Class Arise.SeriousFlagCharaDatabase
// 0x0010 (0x01C8 - 0x01B8)
class USeriousFlagCharaDatabase : public UXmlDatabaseBase
{
public:
	struct FSeriousFlagCharaDataCollection             Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SeriousFlagCharaDatabase");
		return ptr;
	}

};


// Class Arise.SeriousFlagCharaManager
// 0x0008 (0x0030 - 0x0028)
class USeriousFlagCharaManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SeriousFlagCharaManager");
		return ptr;
	}


	void OnScenarioFlagChanged(int Flag, bool bValid);
	void OnScenarioCounterChanged(int counter, int Prev);
};


// Class Arise.ShopComponent
// 0x0018 (0x0110 - 0x00F8)
class UShopComponent : public UActorComponent
{
public:
	TEnumAsByte<EShopType>                             Type;                                                     // 0x00F8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bShop;                                                    // 0x00F9(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00FA(0x0006) MISSED OFFSET
	struct FShopLabelID                                ShopID;                                                   // 0x0100(0x0010) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShopComponent");
		return ptr;
	}


	void Sort(TArray<struct FShopItemData>* Data);
	void GetItemData(TArray<struct FShopItemData>* Data);
};


// Class Arise.ShopDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UShopDatabase : public UXmlDatabaseBase
{
public:
	struct FShopDatabaseRow                            Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShopDatabase");
		return ptr;
	}

};


// Class Arise.ShopLevelDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UShopLevelDatabase : public UXmlDatabaseBase
{
public:
	struct FShopLevelDatabaseRow                       Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShopLevelDatabase");
		return ptr;
	}

};


// Class Arise.ShopLibrary
// 0x0000 (0x0028 - 0x0028)
class UShopLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShopLibrary");
		return ptr;
	}


	void STATIC_UnloadDatabase_Shop();
	void STATIC_LoadDatabase_Shop();
	bool STATIC_IsValidDatabase_Shop();
	void STATIC_GetShopLevelData(int Level, struct FShopLevelData* Data);
	void STATIC_GetShopLevel(int* Min, int* Max);
	void STATIC_GetShopItemString(TArray<struct FShopItemData> Data, TArray<struct FDictionaryText>* Dictionaries);
	void STATIC_GetShopItemData(const struct FString& ID, TArray<struct FShopItemData>* Data);
};


// Class Arise.ShortChatComponent
// 0x0120 (0x06A0 - 0x0580)
class UShortChatComponent : public UPrimitiveComponent
{
public:
	struct FShortChatID                                ID;                                                       // 0x0580(0x0010) (Edit, BlueprintVisible)
	struct FShortChatDatabaseRow                       Database;                                                 // 0x0590(0x00B8) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	bool                                               bForce;                                                   // 0x0648(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableArea;                                              // 0x0649(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x064A(0x0002) MISSED OFFSET
	float                                              AreaHalfHeight;                                           // 0x064C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AreaRadius;                                               // 0x0650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AreaAngle;                                                // 0x0654(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FColor                                      AreaColor;                                                // 0x0658(0x0004) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x065C(0x000C) MISSED OFFSET
	class AActor*                                      Target;                                                   // 0x0668(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypeQueries;                                        // 0x0670(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FScriptDelegate                             PlayStart;                                                // 0x0680(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             PlayEnd;                                                  // 0x0690(0x0014) (BlueprintVisible, ZeroConstructor, InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatComponent");
		return ptr;
	}


	void K2_RequestShortChat(bool* bSuccess);
};


// Class Arise.ShortChatConditionDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UShortChatConditionDatabase : public UXmlDatabaseBase
{
public:
	struct FShortChatConditionDatabaseRow              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatConditionDatabase");
		return ptr;
	}

};


// Class Arise.ShortChatDatabaseObject
// 0x0020 (0x01D8 - 0x01B8)
class UShortChatDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FShortChatDatabase                          Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatDatabaseObject");
		return ptr;
	}

};


// Class Arise.ShortchatDatabaseObject_OLD
// 0x0010 (0x01C8 - 0x01B8)
class UShortchatDatabaseObject_OLD : public UXmlDatabaseBase
{
public:
	struct FShortchatDataList                          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortchatDatabaseObject_OLD");
		return ptr;
	}

};


// Class Arise.ShortChatFunctionCoopLibrary
// 0x0000 (0x0028 - 0x0028)
class UShortChatFunctionCoopLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatFunctionCoopLibrary");
		return ptr;
	}


	void STATIC_PFRequestShortChat_SearchAndTreasurePoint(bool bSearch, int ItemID, bool bStrage);
	void STATIC_PFRequestShortChat_MiningPoint(int ItemID);
	void STATIC_PFRequestShortChat_MapChange(const struct FString& OldMapName, const struct FString& NewMapName);
	void STATIC_PFRequestShortChat_MakeItem(bool bWeapon);
	void STATIC_PFRequestShortChat_FastTravel();
	void STATIC_PFRequestShortChat_CancelFastTravel();
	void STATIC_PFRequestShortChat_BuyItem(int ItemNum, int UseGald);
	void STATIC_PFRequestShortChat_ArtifactPoint();
};


// Class Arise.PFSCHPFActionNotify
// 0x0008 (0x0040 - 0x0038)
class UPFSCHPFActionNotify : public UAnimNotify
{
public:
	EArisePartyID                                      PartyId;                                                  // 0x0038(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ESCH_PFActionType                                  PFActionType;                                             // 0x0039(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x003A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.PFSCHPFActionNotify");
		return ptr;
	}

};


// Class Arise.ShortChatLibrary
// 0x0000 (0x0028 - 0x0028)
class UShortChatLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatLibrary");
		return ptr;
	}


	void STATIC_TestOutputLog();
	void STATIC_RequestShortChatWithCallback(bool bForce, const struct FString& ID, const struct FScriptDelegate& Start, const struct FScriptDelegate& End, bool* bResult);
	void STATIC_RequestShortChatPFAction(EArisePartyID PartyId, ESCH_PFActionType ActionType);
	bool STATIC_RequestShortChat_MessageDataWithCallback(bool bForce, class UMessageData* Message, int Priority, const struct FScriptDelegate& Start, const struct FScriptDelegate& End);
	bool STATIC_RequestShortChat_MessageDataList(bool bForce, TArray<class UMessageData*> MessageDataList, int Priority);
	bool STATIC_RequestShortChat_MessageDataGroupID(bool bForce, const struct FString& GroupID, EPriorityType Priority);
	bool STATIC_RequestShortChat_MessageData(bool bForce, class UMessageData* Message, int Priority);
	void STATIC_RequestShortChat(bool bForce, const struct FString& ID, bool* bResult);
	bool STATIC_PFRequestRandomShortChat(bool bForce, TArray<struct FString> ShortChatIDList);
	void STATIC_LockMapChangeSC();
	bool STATIC_K2_IsRead(const struct FString& SCLabel);
	bool STATIC_IsUseMsgTimeShortChat();
	bool STATIC_IsPlayingPFShortChat(const struct FString& ShortChatID);
	bool STATIC_IsPFShortChatPlaying();
	bool STATIC_IsPartyMemberLowHP();
	bool STATIC_IsLockObjSC();
	bool STATIC_IsForcePlayShortChat();
	bool STATIC_IsDrawShortChatObjReact();
	bool STATIC_IsCanPlayShortChat(const struct FString& ShortChatID);
	void STATIC_GetShortChatStayTimeConditionList(const struct FString& LocationName, TArray<struct FShortChatConditionData>* outList);
	bool STATIC_GetShortChatObjData_Define(EPFSCHObjDefine Define, struct FShortChatObjData* Data);
	bool STATIC_GetShortChatObjData(const struct FString& ID, struct FShortChatObjData* Data);
	bool STATIC_GetShortChatMsgTimeData(const struct FString& Lang, struct FShortChatMsgTimeData* Data);
	void STATIC_GetShortChatIDListFilter(int Episode, TArray<struct FString>* IDList);
	bool STATIC_GetShortChatDataFromEpScene(int Episode, int Scene, struct FShortChatDatabaseRow* Data);
	bool STATIC_GetShortChatData_LinkDefine(const struct FString& LinkDefine, TArray<struct FShortChatDatabaseRow>* Data);
	bool STATIC_GetShortChatData_ExCondition(const struct FString& ExCondition, TArray<struct FShortChatDatabaseRow>* Data);
	bool STATIC_GetShortChatData(const struct FString& ID, struct FShortChatDatabaseRow* Data);
	bool STATIC_GetShortChatConditionData(const struct FString& ID, struct FShortChatConditionData* Data);
	struct FString STATIC_GetPFCameraLockOnShortChatID(EArisePartyID InPartyID);
	void STATIC_GetPartyMemberLowHPCondition(struct FShortChatConditionData* OutData);
	void STATIC_GetDebugRequests(TArray<struct FDebugRequestData>* Requests);
	void STATIC_GetDebugPlayingRequest(struct FDebugRequestData* PlayingRequest);
	void STATIC_GetDebugForceRequest(struct FDebugRequestData* ForceRequest);
	void STATIC_GetDebugFishShortChatList(TArray<struct FDebugFishShortChatData>* FishShortChatList);
	struct FString STATIC_GetCurrentRegionSpecify(const struct FString& AreaName);
	struct FString STATIC_GetCurrentRegion();
	struct FString STATIC_GetCurrentLocation();
	struct FString STATIC_GetCurrentAreaSpecify(const struct FString& LocationName);
	struct FString STATIC_GetCurrentArea();
	bool STATIC_FindPFOwlDetectShortChatData(bool bInReceiveReward, bool bPartyInNNA, struct FShortChatPFOwlDetectData* Out);
	void STATIC_ExecuteReleasePause_PFSC(EArisePFSCPauseState State);
	void STATIC_ExecutePause_PFSC(EArisePFSCPauseState State);
	void STATIC_ExecuteForceReleasePause_PFSC();
	void STATIC_EnableLockPause_PFSC(bool bEnable);
	void STATIC_EnableForcePlayModePFSC(bool bEnable);
};


// Class Arise.ShortchatManagerBase
// 0x0040 (0x0068 - 0x0028)
class UShortchatManagerBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<struct FString>                             RequestIDList;                                            // 0x0030(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FShortchatLogData>                   PlayLogIDList;                                            // 0x0040(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FShortchatData_OLD>                  ChatDataList;                                             // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              RequestRemainTime;                                        // 0x0060(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortchatManagerBase");
		return ptr;
	}


	void TimeUpdate(float AddTime);
	void SetReadNum(int ID, bool Flag);
	void SetRead(const struct FString& ShortChatID, bool Flag);
	void RemoveRequestID(const struct FString& ShortChatID);
	void RemovePriority(int Priority);
	void PushRequest(const struct FString& DatabaseKey, const struct FString& ShortChatID);
	bool PopRequest(struct FShortchatData_OLD* ShortChatData);
	bool IsReadNum(int ID);
	bool IsRead(const struct FString& ShortChatID);
	bool IsForceFinish(struct FShortchatData_OLD* ShortChatData);
	bool IsExistData();
	void ClearRequestID();
};


// Class Arise.ShortChatMsgTimeDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UShortChatMsgTimeDatabase : public UXmlDatabaseBase
{
public:
	struct FShortChatMsgTimeDatabaseRow                Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatMsgTimeDatabase");
		return ptr;
	}

};


// Class Arise.ShortChatObjBaseComponent
// 0x0130 (0x0228 - 0x00F8)
class UShortChatObjBaseComponent : public UActorComponent
{
public:
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypeQueries;                                        // 0x00F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bExecuted;                                                // 0x0108(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF7];                                      // 0x0109(0x00F7) MISSED OFFSET
	struct FShortChatObjData                           ObjData;                                                  // 0x0200(0x0028) (BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatObjBaseComponent");
		return ptr;
	}


	void OnLookAt_StartImpl(class AActor* Target, class AActor* PC);
	void OnLookAt_Start();
	void OnLookAt_LoopImpl(class AActor* PC);
	void OnLookAt_Loop();
	void OnLookAt_EndImpl();
	void OnLookAt_End();
	void OnLookAt_Abort();
	void OnChangeDisplayScene(unsigned char ChangedScene, unsigned char OldScene);
	bool IsTarget();
	class AActor* GetVoiceSender();
	struct FVector GetTargetLocation();
	class AActor* GetTarget();
	bool GetShortChatDatabase();
	void GetInteractiveSize(float* Field, float* Dungeon, float* Town);
	EPFSCHObjDefine GetDefine();
	bool FindShortChatObjDatabase(EPFSCHObjDefine Define);
	void EnableObjInterlock();
	void Clear();
	bool CanCheck();
};


// Class Arise.ShortChatObjDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UShortChatObjDatabase : public UXmlDatabaseBase
{
public:
	struct FShortChatObjDatabaseRow                    Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatObjDatabase");
		return ptr;
	}

};


// Class Arise.ShortChatPFActionDatabase
// 0x0020 (0x01D8 - 0x01B8)
class UShortChatPFActionDatabase : public UXmlDatabaseBase
{
public:
	struct FShortChatPFActionDatabaseRow               Database;                                                 // 0x01B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatPFActionDatabase");
		return ptr;
	}

};


// Class Arise.ShortChatPFCameraLockOnDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UShortChatPFCameraLockOnDatabase : public UXmlDatabaseBase
{
public:
	struct FShortChatPFCameraLockOnDataCollection      Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatPFCameraLockOnDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.ShortChatPFOwlDetectDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UShortChatPFOwlDetectDatabase : public UXmlDatabaseBase
{
public:
	struct FShortChatPFOwlDetectDataCollection         Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatPFOwlDetectDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.ShortchatSupport
// 0x0000 (0x0028 - 0x0028)
class UShortchatSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortchatSupport");
		return ptr;
	}


	class UStringDictionaryDatabase* STATIC_GetShortchatStringDictionaryClass(const struct FString& DictionaryKey);
	bool STATIC_GetShortchatDataFromID(const struct FString& DatabaseKey, int ID, struct FShortchatData_OLD* OutData);
	bool STATIC_GetShortChatData(const struct FString& DatabaseKey, const struct FString& ShortChatID, struct FShortchatData_OLD* OutData);
	class UUserWidget* STATIC_CreateUserWidget(class UClass* WidgetClass, class APlayerController* Owner);
	class UObject* STATIC_CreateObject(class UClass* ObjectClass);
	void STATIC_AddStringDictionary(const struct FString& XmlPath, const struct FString& Group, class UStringDictionaryDatabase** DictionaryObject);
};


// Class Arise.ShortChatTimerTrigger
// 0x0078 (0x00A0 - 0x0028)
class UShortChatTimerTrigger : public UObject
{
public:
	struct FString                                     LocationName;                                             // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FShortChatConditionData>             ConditionList;                                            // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor)
	class AShortChatManager*                           Manager;                                                  // 0x0048(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0050(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatTimerTrigger");
		return ptr;
	}


	void SortPriority();
	void RemoveCurrentLocationData();
	void K2_Tick(float DeltaSeconds);
	void K2_Terminate();
	void K2_Initialize();
	bool K2_FinalCheck(const struct FShortChatConditionData& Condition);
};


// Class Arise.ShortChatTriggerBox
// 0x0000 (0x0330 - 0x0330)
class AShortChatTriggerBox : public ATriggerBox
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatTriggerBox");
		return ptr;
	}

};


// Class Arise.ShortChatTriggerRange
// 0x0000 (0x0328 - 0x0328)
class AShortChatTriggerRange : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.ShortChatTriggerRange");
		return ptr;
	}

};


// Class Arise.SolidBoxComponent
// 0x0030 (0x0280 - 0x0250)
class USolidBoxComponent : public USceneComponent
{
public:
	class UProceduralMeshComponent*                    MeshComponent;                                            // 0x0250(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0258(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SolidBoxComponent");
		return ptr;
	}


	class UProceduralMeshComponent* GetMeshComponent();
};


// Class Arise.SolidCircleComponent
// 0x0030 (0x0280 - 0x0250)
class USolidCircleComponent : public USceneComponent
{
public:
	class UProceduralMeshComponent*                    MeshComponent;                                            // 0x0250(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0258(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SolidCircleComponent");
		return ptr;
	}


	class UProceduralMeshComponent* GetMeshComponent();
};


// Class Arise.SplinePointAsset
// 0x0020 (0x0048 - 0x0028)
class USplinePointAsset : public UObject
{
public:
	TArray<struct FVector>                             Points;                                                   // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<unsigned char>                              Types;                                                    // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SplinePointAsset");
		return ptr;
	}

};


// Class Arise.SplinePointAssetLibrary
// 0x0000 (0x0028 - 0x0028)
class USplinePointAssetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SplinePointAssetLibrary");
		return ptr;
	}


	void STATIC_CreateSplinePointAsset(const struct FString& desiredName, TArray<struct FVector> Points, TArray<unsigned char> Types);
};


// Class Arise.StaffrollListDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UStaffrollListDatabase : public UXmlDatabaseBase
{
public:
	struct FStaffrollDataList                          Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.StaffrollListDatabase");
		return ptr;
	}

};


// Class Arise.StatusImage
// 0x0178 (0x0350 - 0x01D8)
class UStatusImage : public UImage
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01D8(0x0008) MISSED OFFSET
	struct FString                                     BaseFilePath;                                             // 0x01E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     TextureFileName;                                          // 0x01F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FString>                             DLCFilePath;                                              // 0x0200(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<int>                                        DLCPathStartNo;                                           // 0x0210(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UTexture2D*                                  TextureImage;                                             // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	TMap<int, class UTexture2D*>                       TextureMap;                                               // 0x0228(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0xD8];                                      // 0x0278(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.StatusImage");
		return ptr;
	}


	void SetCharacterImageNo(int TargetNo);
	void ReleaseTexture();
	int GetDefaultNo();
};


// Class Arise.SystemFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USystemFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SystemFunctionLibrary");
		return ptr;
	}


	void STATIC_WhiteFadeOut_Native(TEnumAsByte<EVisualFadeLayer> eLayer, float fDuration, bool bStay);
	void STATIC_WhiteFadeIn_Native(TEnumAsByte<EVisualFadeLayer> eLayer, float fDuration, bool bStay);
	bool STATIC_UseMenuManager2();
	void STATIC_TestSetActorLocationAndRotation(class AActor* Actor, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	struct FVector STATIC_TestGetActorLocation(class AActor* Actor);
	void STATIC_StopBootScreen();
	void STATIC_SpawnDefaultControllerWithName(class APawn* Pawn, const struct FName& Name);
	void STATIC_ShowSoftwareCursor(bool bShow);
	bool STATIC_SetUseMenuManager2(bool bSet);
	void STATIC_SetUnacceptableGPUFrameTimeThresholdMS(float ms);
	void STATIC_SetUnacceptableFrameTimeThresholdMS(float ms);
	void STATIC_SetTargetGPUFrameTimeThresholdMS(float ms);
	void STATIC_SetTargetFrameTimeThresholdMS(float ms);
	void STATIC_SetEnableRegularlyGarbageCollection(bool bEnable, bool bDelayPostGC);
	void STATIC_PlayBootScreen(bool bPlayUntilStopped, float PlayTime);
	struct FString STATIC_PartyIDToString(EArisePartyID InPartyID);
	bool STATIC_OpenDatabaseFile(const struct FString& XmlFile, bool bAbsolutePath);
	void STATIC_OpenDatabaseExcel(const struct FString& ExcelFile, const struct FString& ImportXmlFile);
	float STATIC_NormalizeDeg(float srcDeg);
	float STATIC_NearDegDiff(float srcDeg, float dstDeg, bool bNormalized);
	bool STATIC_IsShipping();
	bool STATIC_IsSameNameArray(TArray<struct FName> srcArray, TArray<struct FName> trgArray);
	bool STATIC_IsInEditor();
	bool STATIC_IsEnableLLM();
	bool STATIC_HasActiveAreaPriority(EAreaPriority priotityMask);
	class UWorldTimeManager* STATIC_GetWorldTimeManager();
	void STATIC_GetVectorFormatedString(const struct FVector& vec, struct FString* OutString);
	float STATIC_GetUnacceptableGPUFrameTimeThresholdMS();
	float STATIC_GetUnacceptableFrameTimeThresholdMS();
	float STATIC_GetTargetGPUFrameTimeThresholdMS();
	float STATIC_GetTargetFrameTimeThresholdMS();
	class UStaticMesh* STATIC_GetStaticMeshFromPath(const struct FString& _AssetPath);
	bool STATIC_GetStaticMeshBound(class UStaticMesh* sMesh, float Yaw, TArray<struct FVector>* BoundInfo);
	float STATIC_GetRTPCValue(class AActor* Actor, const struct FString& RTPCName, bool* bFind);
	float STATIC_GetRepeatSecondInterval();
	float STATIC_GetRepeatFirstInterval();
	class AQuestManager* STATIC_GetQuestManager();
	EGamePlatform STATIC_GetPlatformWithPreview();
	EInputExtEnterAssignType STATIC_GetPlatformEnterAssign();
	struct FSoftObjectPath STATIC_GetPlatformAssetPath(const struct FString& ID);
	EGamePlatform STATIC_GetPlatform();
	class UArisePartyProfile* STATIC_GetPartyProfile();
	class UArisePartyOrder* STATIC_GetPartyOrder();
	float STATIC_GetMouseRateForCameraRotation();
	class UMaterial* STATIC_GetMaterialFromPath(const struct FString& _AssetPath);
	float STATIC_GetLongChatQueRefreshInterval();
	int STATIC_GetLastCopySceneColorFrameCount();
	void STATIC_GetDirectoryName(const struct FString& InFilePath, struct FString* OutDirectoryName);
	class UWorld* STATIC_GetCurrentWorld();
	void STATIC_GetBaseFilename(const struct FString& InFilePath, struct FString* OutBaseFileName);
	int STATIC_GetAssetLoadingPriority(EAssetLoadingPriority InPriorityType);
	class AAriseWorldSettings* STATIC_GetAriseWorldSettings();
	class AAriseGameMode* STATIC_GetAriseGameMode();
	class UAriseGameInstance* STATIC_GetAriseGameInstance();
	class UAreaPriorityManager* STATIC_GetAreaPriorityManager();
	struct FString STATIC_GetApplicationVersion();
	struct FString STATIC_GetApplicationPlatformVersion();
	EApplicationLocale STATIC_GetApplicationLocale();
	class UClass* STATIC_GetAnimationBlueprintParentClass(class UObject* InAnimBlueprint);
	struct FString STATIC_GetActorOwnerLevelNameRuntime(class AActor* InActor);
	struct FString STATIC_GetActorOwnerLevelNameInEditor(class AActor* InActor);
	void STATIC_ForceGarbageCollection(bool bFullPurge);
	void STATIC_DumpStatLevels(const struct FString& inMapName);
	void STATIC_DiffNameArray(TArray<struct FName> srcArray, TArray<struct FName> trgArray, TArray<struct FName>* oNoneSrcArray, TArray<struct FName>* oNoneTrgArray);
	void STATIC_CopyTextToClipBoard(const struct FString& Text);
	void STATIC_CopyClipBoard(TArray<struct FClipboardParam> Params);
	bool STATIC_CanPlayLongchat();
	void STATIC_BuildSolidBox(class UProceduralMeshComponent* MeshComponent, TArray<struct FVector>* BoxVers, TArray<int>* BoxIndexs);
	void STATIC_BlackFadeOut_Native(TEnumAsByte<EVisualFadeLayer> eLayer, float fDuration, bool bStay);
	void STATIC_BlackFadeIn_Native(TEnumAsByte<EVisualFadeLayer> eLayer, float fDuration, bool bStay);
};


// Class Arise.SystemWindowAnimInterface
// 0x0000 (0x0028 - 0x0028)
class USystemWindowAnimInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SystemWindowAnimInterface");
		return ptr;
	}


	void AnimationStop(int StopIndex);
	void AnimationPlay(int PlayIndex);
	bool AnimationFinish(int PlayIndex);
};


// Class Arise.SystemWindow
// 0x0438 (0x0640 - 0x0208)
class USystemWindow : public UUserWidget
{
public:
	TArray<class UWidget*>                             BaseWidgetList;                                           // 0x0208(0x0010) (ExportObject, ZeroConstructor)
	class UCanvasPanel*                                MainCanvasWidget;                                         // 0x0218(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0220(0x0020) MISSED OFFSET
	class UAriseTextWidget*                            TitleText;                                                // 0x0240(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUserWidget*                                 TitleLine;                                                // 0x0248(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UHorizontalBox*>                      HorizontalBoxList;                                        // 0x0250(0x0010) (ExportObject, ZeroConstructor)
	TArray<struct FSystemWindowButtonData>             ButtonData;                                               // 0x0260(0x0010) (ZeroConstructor)
	TArray<class UAriseTextWidget*>                    PageTextList;                                             // 0x0270(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0280(0x0010) MISSED OFFSET
	TArray<struct FSystemWindowChoiceData>             PageChoiceList;                                           // 0x0290(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0xB0];                                      // 0x02A0(0x00B0) MISSED OFFSET
	struct FSlateFontInfo                              DrawFont;                                                 // 0x0350(0x0050) (Edit, BlueprintVisible)
	class UClass*                                      WindowBase;                                               // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      LineWidget;                                               // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Button;                                                   // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FSlateBrush                                 BGBrush;                                                  // 0x03B8(0x0088) (Edit, BlueprintVisible)
	struct FVector2D                                   BrushImageSize;                                           // 0x0440(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   UVSet1;                                                   // 0x0448(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   UVSet2;                                                   // 0x0450(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FSlateBrush                                 CursorBrush;                                              // 0x0458(0x0088) (Edit, BlueprintVisible)
	struct FSlateBrush                                 ArrowLBrush;                                              // 0x04E0(0x0088) (Edit, BlueprintVisible)
	struct FSlateBrush                                 ArrowRBrush;                                              // 0x0568(0x0088) (Edit, BlueprintVisible)
	struct FVector2D                                   WindowPosition;                                           // 0x05F0(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   FixSize;                                                  // 0x05F8(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   FixTextSize;                                              // 0x0600(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   FixChoiceSize;                                            // 0x0608(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   FixTextPos;                                               // 0x0610(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   FixChoicePos;                                             // 0x0618(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   ChoiceTextMargin;                                         // 0x0620(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   WindowFrameSize;                                          // 0x0628(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	int                                                PageChoiceMax;                                            // 0x0630(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0634(0x0004) MISSED OFFSET
	class UClass*                                      CursorWidget;                                             // 0x0638(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SystemWindow");
		return ptr;
	}


	bool WindowSetup(int ZOrder);
	void UpdateTick(float TickData);
	void SetupGetItem_Label(TArray<struct FString> ItemLabel, TArray<int> ItemNum);
	void SetupGetItem_ID(TArray<int> ItemID, TArray<int> ItemNum);
	void SetupButtonMenu_DicText(const struct FDictionaryText& WindowTitle, const struct FDictionaryText& MessageText, TArray<struct FDictionaryText> ButtonTextList, int RowCount, int DefaultSelect);
	void SetupButtonMenu(const struct FString& WindowTitle, const struct FString& MessageText, TArray<struct FString> ButtonTextList, int RowCount, int DefaultSelect);
	void SetTitleTextModified(const struct FModifiedText& ModifiedText);
	void SetTitleText(const struct FText& Text, const struct FString& Group);
	void SetInputPause(bool IsPause);
	void SetFlag(TEnumAsByte<ESystemWindowFlag> Flag, bool SetParam);
	void SetButtonText(int BoxIndex, int ButtonIndex, const struct FText& Text, const struct FString& Group);
	void SetAutoPosition(TEnumAsByte<ESystemWindowAutoPosition> PositionType);
	void PlayChildOpenAnimation();
	void PlayChildCloseAnimation();
	void OpenAnimeFinish();
	void OnMouseSelect(class UUserWidget* Target);
	void OnMouseOver(class UUserWidget* Target, bool IsOver);
	bool IsEndAnimeStart();
	struct FText GetChoiceResultText();
	int GetChoiceResult();
	void ClearText();
	void AddNoticeTextModified(const struct FModifiedText& ModifiedText);
	void AddNoticeTextDictionaryArray(TArray<struct FString> Group, TArray<struct FString> ID);
	void AddNoticeTextDictionary(const struct FString& Group, const struct FString& ID);
	void AddNoticeTextArray(TArray<struct FText> Text);
	void AddNoticeText(const struct FText& Text);
	void AddChoiceModified(const struct FModifiedText& ModifiedText, int ResultNum);
	void AddChoiceDictionaryArray(const struct FString& Group, TArray<struct FString> ID, TArray<int> ResultNum);
	void AddChoiceDictionary(const struct FString& Group, const struct FString& ID, int ResultNum);
	void AddChoiceArray(TArray<struct FText> AddText, TArray<int> ResultNum);
	void AddChoice(const struct FText& AddText, int ResultNum);
};


// Class Arise.SystemWindowParamChange
// 0x0000 (0x0028 - 0x0028)
class USystemWindowParamChange : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SystemWindowParamChange");
		return ptr;
	}


	void TextChange(const struct FText& UpdateText, const struct FString& DictionaryGroup);
	void SetReturnValue(int Value);
	void SetOwnerWidget(class UWidget* SystemWindow);
	void SetEnabled(bool IsEnable);
	void PlayOpenAnimation();
	void PlayCloseAnimation();
	int GetReturnValue();
	struct FVector2D GetRenderSize();
};


// Class Arise.TestMergeCharacterModelCommandlet
// 0x0000 (0x0080 - 0x0080)
class UTestMergeCharacterModelCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TestMergeCharacterModelCommandlet");
		return ptr;
	}


	void MergeCharacterModel();
};


// Class Arise.TitleBackSceneController
// 0x0008 (0x0050 - 0x0048)
class UTitleBackSceneController : public UGameSceneController
{
public:
	EAriseGameScene                                    nextScene;                                                // 0x0048(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TitleBackSceneController");
		return ptr;
	}

};


// Class Arise.TitleSceneController
// 0x0000 (0x0048 - 0x0048)
class UTitleSceneController : public UGameSceneController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TitleSceneController");
		return ptr;
	}

};


// Class Arise.TopmenuIconInterface
// 0x0000 (0x0028 - 0x0028)
class UTopmenuIconInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TopmenuIconInterface");
		return ptr;
	}


	void AnimationReset(class UWidget* Widget);
};


// Class Arise.TopmenuIconSet
// 0x0110 (0x0318 - 0x0208)
class UTopmenuIconSet : public UUserWidget
{
public:
	class UClass*                                      WidgetClass;                                              // 0x0208(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LineCount;                                                // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0214(0x0004) MISSED OFFSET
	TArray<int>                                        ChildCount;                                               // 0x0218(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FVector2D                                   WidgetSize;                                               // 0x0228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              MoveTime;                                                 // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0234(0x0004) MISSED OFFSET
	class UCurveFloat*                                 MoveCurve;                                                // 0x0238(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FTopmenuIconDataList>                IconData;                                                 // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bIgnoreIconWhenDisable;                                   // 0x0250(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0251(0x0003) MISSED OFFSET
	int                                                SelectLine;                                               // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0258(0x0004) MISSED OFFSET
	int                                                CloseLine;                                                // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                AnimMainColor;                                            // 0x0260(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                AnimColor;                                                // 0x0270(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                AnimCloseColor;                                           // 0x0280(0x0010) (Edit, IsPlainOldData)
	struct FVector2D                                   AnimTranslation;                                          // 0x0290(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   AnimCloseTranslation;                                     // 0x0298(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   AnimScale;                                                // 0x02A0(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   AnimCloseScale;                                           // 0x02A8(0x0008) (Edit, IsPlainOldData)
	float                                              AnimAngle;                                                // 0x02B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AnimeFinish_H;                                            // 0x02B4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AnimeFinish_V;                                            // 0x02B5(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AnimeFinish_VClose;                                       // 0x02B6(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x9];                                       // 0x02B7(0x0009) MISSED OFFSET
	TArray<struct FTopmenuIconWidgetSet>               WidgetSet;                                                // 0x02C0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x48];                                      // 0x02D0(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TopmenuIconSet");
		return ptr;
	}


	void VisibleChild(int Line, bool IsVisible);
	void VisibleChangeChild(int Line, ESlateVisibility ChildVisibility);
	struct FString TickWork(float DeltaTime, class AAriseBasePlayerController* PlayerController);
	void SetVerticalIconVisibility(ESlateVisibility IconVisibility);
	void SetupDelegate();
	void SetSelectRequest(int ID);
	void SetResultRequest(int ID);
	void SetMouseResultID(int ID);
	void SetIsVCloseAnimeFinish(bool Flag);
	void SetIsVAnimeFinish(bool Flag);
	void SetHorizontalIconVisibility(ESlateVisibility IconVisibility);
	void SetHAnimeFinish(bool Flag);
	void SetAnimTranslation(const struct FVector2D& Translate);
	void SetAnimScale(const struct FVector2D& Scale);
	void SetAnimMainColor(const struct FLinearColor& Color);
	void SetAnimColor(const struct FLinearColor& Color);
	void SetAnimCloseTranslation(const struct FVector2D& Translate);
	void SetAnimCloseScale(const struct FVector2D& Scale);
	void SetAnimCloseColor(const struct FLinearColor& Color);
	void SetAnimAngle(float Angle);
	void SelectByMenuID(const struct FString& MenuID);
	void SelectByID(int ID);
	bool Select(int Line, int Index, class UUserWidget** NewSelect, class UUserWidget** OldSelect);
	void PlayVerticalAnimation(int NewLine, int OldLine);
	void PlayIconAnimation(int Line, bool IsOpen);
	void PlayHorizontalAnimation(bool Open);
	bool IsVCloseAnimeFinish();
	bool IsVAnimeFinish();
	bool IsHAnimeFinish();
	class UUserWidget* GetWidget_ID(const struct FString& MenuID);
	class UUserWidget* GetWidget(int Line, int Index);
	void GetSelectNo(int* Line, int* No);
	void GetSelectMenuID(struct FString* MenuID);
	void GetResultString(int Line, int Index, struct FString* NextMenuID);
	struct FString GetMouseResultMenuID();
	int GetMouseResultID();
	bool GetInitializeIconData(int IndexH, int IndexV, struct FTopmenuIconData* OutData);
	int GetIconLineCount();
	void GetIconCount(int Line, int* Count);
	int GetIconChildCount(int Line);
	bool GetAnimationFinishFlag(int Type);
	void AddChangeData(const struct FString& TargetID, EMenuIconType NewIconType, const struct FString& NewMenuID);
};


// Class Arise.TpPuzzleDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UTpPuzzleDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FTpPuzzleDatabase                           Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TpPuzzleDatabaseObject");
		return ptr;
	}

};


// Class Arise.TpPuzzleFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UTpPuzzleFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TpPuzzleFunctionLibrary");
		return ptr;
	}


	void STATIC_UnloadDatabase_TpPuzzle();
	bool STATIC_SearchTpPuzzleData(const struct FString& Key, const struct FString& ID, struct FTpPuzzleDatabaseRow* RowData);
	void STATIC_LoadDatabase_TpPuzzle();
	bool STATIC_IsValidDatabase_TpPuzzle();
	int STATIC_GetTpPuzzleNum();
	bool STATIC_GetTpPuzzleDataFromIndex(int Index, struct FTpPuzzleDatabaseRow* RowData);
};


// Class Arise.TranslatedTextDatabase
// 0x0040 (0x01F8 - 0x01B8)
class UTranslatedTextDatabase : public UXmlDatabaseBase
{
public:
	struct FTranslatedTextDataCollection               Database;                                                 // 0x01B8(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TranslatedTextDatabase");
		return ptr;
	}

};


// Class Arise.TranslatedTextSupport
// 0x0000 (0x0028 - 0x0028)
class UTranslatedTextSupport : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TranslatedTextSupport");
		return ptr;
	}


	bool STATIC_GetTranslatedText(const struct FString& Label, EULA_Language Lang, struct FModifiedText* Text);
	bool STATIC_GetTranslatedMultiText(const struct FString& Label, EULA_Language Lang, TArray<struct FString>* TextArray);
	struct FString STATIC_GetLanguageCode(EULA_Language Value);
	EULA_Language STATIC_GetEULA_LanguageFromEnum(ELocalizeSupportLanguage LangEnum);
	EULA_Language STATIC_GetEULA_LanguageEnum(const struct FString& LangCode);
	void STATIC_CombineMultiText(const struct FString& Label, TArray<struct FString> TextArray, bool replaceLFtoCRLF, struct FModifiedText* Text);
};


// Class Arise.TreasurePointItemDatabaseObject
// 0x0010 (0x01C8 - 0x01B8)
class UTreasurePointItemDatabaseObject : public UXmlDatabaseBase
{
public:
	struct FTreasurePointItemDatabase                  Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.TreasurePointItemDatabaseObject");
		return ptr;
	}

};


// Class Arise.UIConfiguration
// 0x0000 (0x0028 - 0x0028)
class UUIConfiguration : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.UIConfiguration");
		return ptr;
	}


	void STATIC_SetUIElementEnabled(EUIElementType Type, bool Flag);
	void STATIC_SetShowQuestMarkerSub(bool bShow);
	void STATIC_SetShowQuestMarkerMain(bool bShow);
	void STATIC_SetShowEventSubtitle(bool bShow);
	void STATIC_SetPF_HUD_MasterVisibility(bool sw);
	void STATIC_SetNavimapRotationMode(bool IsRotate);
	void STATIC_SetNavimapCaptureMode(bool IsMeshExists, class USceneCaptureComponent2D* Component);
	bool STATIC_SetIdToButtonIcon(unsigned char iKey, EInputDeviceType iInputDeviceType, struct FModifiedText* oText);
	void STATIC_SetButtonIconSetting(EButtonIconSet Set);
	void STATIC_SetButtonIconByType(const struct FString& Label, EButtonIconSet iIconSet, bool IsFull, struct FModifiedText* oText);
	void STATIC_SetApplicationScale(float Rate);
	bool STATIC_IsShowQuestMarkerSub();
	bool STATIC_IsShowQuestMarkerMain();
	bool STATIC_IsShowEventSubtitle();
	int STATIC_IsNavimapIconForceDraw();
	bool STATIC_IsMenuUseSetPauseMode();
	int STATIC_IsLocationMapShowName();
	bool STATIC_GetUIElementEnabled(EUIElementType Type);
	void STATIC_GetROMVersionText(struct FModifiedText* oText);
	bool STATIC_GetPF_HUD_MasterVisibility();
	bool STATIC_GetNavimapRotationMode();
	int STATIC_GetNavimapOrthoWidth();
	EInputDeviceType STATIC_GetCurrentInputDeviceType();
	EButtonIconSet STATIC_GetCurrentGamepadIconType();
	EButtonIconSet STATIC_GetButtonIconSetting();
	float STATIC_GetApplicationScale();
};


// Class Arise.VisualItemDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UVisualItemDatabase : public UXmlDatabaseBase
{
public:
	struct FVisualItemDataCollection                   Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.VisualItemDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.VisualItemDefineDatabase
// 0x0010 (0x01C8 - 0x01B8)
class UVisualItemDefineDatabase : public UXmlDatabaseBase
{
public:
	struct FVisualItemDefineDataCollection             Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.VisualItemDefineDatabase");
		return ptr;
	}


	bool IsEnableIndex_Record(int Index);
};


// Class Arise.VisualItemLibrary
// 0x0000 (0x0028 - 0x0028)
class UVisualItemLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.VisualItemLibrary");
		return ptr;
	}


	struct FDictionaryText STATIC_GetVisualItemName(const struct FString& InVisualItemLabel, int InVariationIndex);
	struct FString STATIC_GetVisualItemDefine(int InItemID, int InVariationIndex, EArisePartyID InPartyID);
};


// Class Arise.WidgetTimeMove
// 0x0038 (0x0060 - 0x0028)
class UWidgetTimeMove : public UObject
{
public:
	class UCurveFloat*                                 CurveData;                                                // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0030(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.WidgetTimeMove");
		return ptr;
	}


	struct FVector2D Update(float AddTime);
	void TimeReset();
	void SetTime(float resetTime);
	void SetMoveCurve(class UCurveFloat* Curve);
	void SetData(const struct FVector2D& Start, const struct FVector2D& End, float MoveTime);
	void SetAlphaTime(float StartTime, float EndTime);
	struct FVector2D GetMovePosition(float DesignateTime);
	float GetAlpha(float DesignateTime);
	class UWidgetTimeMove* STATIC_CreateInstance();
};


// Class Arise.WorldMapDatabase
// 0x0050 (0x0208 - 0x01B8)
class UWorldMapDatabase : public UXmlDatabaseBase
{
public:
	struct FWorldMapData                               Database;                                                 // 0x01B8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.WorldMapDatabase");
		return ptr;
	}

};


// Class Arise.WorldTimeBaseActor
// 0x0050 (0x0388 - 0x0338)
class AWorldTimeBaseActor : public AWorldTimeActor
{
public:
	class ULightComponent*                             LightCache;                                               // 0x0338(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    ParticleEmitterCache;                                     // 0x0340(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	int                                                MaxScatter;                                               // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ScatterID;                                                // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ScatterringCounter;                                       // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAlwaysActive;                                            // 0x0354(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0355(0x0003) MISSED OFFSET
	float                                              OrgLightintensity;                                        // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LightFadeTimer;                                           // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LightFadeSec;                                             // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LightOn;                                                  // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LightOff;                                                 // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	ELightState                                        LightState;                                               // 0x036C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EEffectState                                       EffectState;                                              // 0x036D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x036E(0x0002) MISSED OFFSET
	float                                              EffectOn;                                                 // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EffectOff;                                                // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ParticleOverrideColor;                                    // 0x0378(0x0010) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.WorldTimeBaseActor");
		return ptr;
	}


	void ParticleManagement(float CurrentHour);
	void OnUpdateTime(float CurrentHour);
	bool NowTimeOn(float CurrentHour, float OnHour, float OffHour);
	void LightManagement(float CurrentHour);
	void ChangeParticleColor(const struct FLinearColor& OverrideColor);
};


// Class Arise.WrapBoxHelper
// 0x0050 (0x0078 - 0x0028)
class UWrapBoxHelper : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<class UClickableWidgetBase*>                WidgetArray;                                              // 0x0030(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	int                                                SelectedIndex;                                            // 0x0040(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsActive;                                                 // 0x0044(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    ActivateDelegate;                                         // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SelectedProcedure;                                        // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     debugStr;                                                 // 0x0068(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.WrapBoxHelper");
		return ptr;
	}


	bool Up();
	bool SetTop();
	bool SetBottom();
	void Select(int iNewIndex);
	bool Right();
	void Refresh();
	bool PageUp();
	bool PageDown();
	bool Left();
	void Initialize(class UWrapBox* TargetBox);
	bool Down();
	bool DefaultPadControl(class AMenuPadProcess* PadProcess);
	class UWrapBoxHelper* STATIC_CreateInstance(class UWrapBox* TargetBox);
	void Clear();
	void AddWidget(class UClickableWidgetBase* iWidget, int UniqueId);
	void Activate(bool sw);
};


// Class Arise.XmldbTest
// 0x0010 (0x01C8 - 0x01B8)
class UXmldbTest : public UXmlDatabaseBase
{
public:
	struct FSbObjectList                               Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.XmldbTest");
		return ptr;
	}

};


// Class Arise.XmldbTest2
// 0x0010 (0x01C8 - 0x01B8)
class UXmldbTest2 : public UXmlDatabaseBase
{
public:
	struct FSbObject2List                              Database;                                                 // 0x01B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.XmldbTest2");
		return ptr;
	}

};


// Class Arise.SaveImageConv
// 0x0000 (0x0028 - 0x0028)
class USaveImageConv : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Arise.SaveImageConv");
		return ptr;
	}


	void OnGetThumbneilDataBuffer__DelegateSignature(TArray<unsigned char> OutBuffer, bool ReturnValue);
	void STATIC_ImageResizeWork(int srcWidth, int srcHeight, int dstWidth, int dstHeight, TArray<struct FColor>* srcBuffer, TArray<struct FColor>* dstBuffer);
	void STATIC_GetThumbneilDataBufferAsync(int Width, int Height, const struct FScriptDelegate& OnComplete);
	bool STATIC_GetThumbneilDataBuffer(int Width, int Height, TArray<unsigned char>* OutBuffer);
	bool STATIC_GetThumbneilData(int Width, int Height, class UTexture2DDynamic** OutTexture);
	bool STATIC_GetTextureBuffer(class UTexture2D* InTexture, int Width, int Height, TArray<unsigned char>* OutBuffer);
	void STATIC_GetImageBufferData(class UTextureRenderTarget2D* InRenderTarget, TArray<struct FColor>* OutColor, int* OutWidth, int* OutHeight);
	bool STATIC_CreateThumbneilTextureDynamic(int Width, int Height, TArray<unsigned char>* InBuffer, class UTexture2DDynamic** OutTexture);
	bool STATIC_CreateThumbneilTexture(int Width, int Height, TArray<unsigned char>* InBuffer, class UTexture2D** OutTexture);
	class UTexture2D* STATIC_CreateImageTexture(int Width, int Height, TArray<struct FColor>* srcBuffer);
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
